# coding: utf-8
from datetime import datetime
def getTime2():
        TIME = str(datetime.now())[11:].split(":")
        TIME = TIME[0]+":"+TIME[1]+":"+TIME[2][:2]
        return str(TIME)
import random
import Minigames
import time
import types
import re
import base64
import binascii
import hashlib
import logging
import json
import sqlite3
import os
import urllib2
import xml.etree.ElementTree as xml
import xml.parsers.expat
import sys
import struct
import math
import platform
import subprocess
import shutil
import socket
import smtplib
import zlib
import pickle
import traceback
import thread, threading
import time as thetime
import imp
import ConfigParser
import psutil

from time import strftime
from subprocess import call
from twisted.internet import reactor, protocol
from datetime import datetime
from datetime import timedelta
from email.mime.text import MIMEText
from SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler
from urllib import urlopen

from tfm import TFMProtocol

dateNow = datetime.now()

def getTime():
        global time
        return time.time()

#psutil = PSUtil()

logging.basicConfig(filename='./server.log',level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

dbcon = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon.isolation_level = None
dbcur = dbcon.cursor()
dbcon.row_factory = sqlite3.Row
dbcon.text_factory = str

dbcon1 = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon1.isolation_level = None
dbcur1 = dbcon1.cursor()
dbcon1.row_factory = sqlite3.Row
dbcon1.text_factory = str

dbcon2 = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon2.isolation_level = None
dbcur2 = dbcon2.cursor()
dbcon2.row_factory = sqlite3.Row
dbcon2.text_factory = str

dbcon3 = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon3.isolation_level = None
dbcur3 = dbcon3.cursor()
dbcon3.row_factory = sqlite3.Row
dbcon3.text_factory = str

dbcon4 = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon4.isolation_level = None
dbcur4 = dbcon4.cursor()
dbcon4.row_factory = sqlite3.Row
dbcon4.text_factory = str

dbcon5 = sqlite3.connect("./Compile/dbfile.sqlite")#, check_same_thread = False)
dbcon5.isolation_level = None
dbcur5 = dbcon5.cursor()
dbcon5.row_factory = sqlite3.Row
dbcon5.text_factory = str

Q0 = "Qual é a cor do céu?"
R0 = "azul"
Q1 = "Por que o Tarzan não tem barba?"
R1 = "Marimbondo"
Q2 = "Qual é o composto químico de água regular?"
R2 = "H20"
Q3 = "Em que ano TransforMicmos abriu?"
R3 = "2013"
Q4 = "Qual a capital da italia?"
R4 = "Roma"
Q5 = "Qual a capital dos Estados Unidos"
R5 = "Washington, D.C."
Q6 = "Qual a rais quadada de 1024"
R6 = "32"
Q7 = "Qual Nome da sala onde 2 shamans lutam"
R7 = "Fight"
Q8 = "Qual é o nome do navegador do Google?"
R8 = "Google"
Q9 = "Qual é o nome do presidente dos Estados Unidos"
R9 = "Barack Obama"
Q = [Q0, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9]
R = [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9]
QMax = 9
RMax = 9

VERBOSE = False
LOGVERB = False
EXEVERS = False
VERSION = "1.96"
print ("="*80 + VERSION.center(80) + "="*80)
SOURCEV = "4.0.0"
ZEBRA = "OK"
DDOSV = "1.0"
DDOSC = "OKAY"		
BC = "OKAY"
ENGINE = "Protection Guard"

LEVEL_LIST = range(0, 134+1) + range(136, 143+1) + range(200, 210+1)
CONJURATION_MAPS = [101, 102, 103, 104, 105, 106, 107]
LEVEL_LIST_FIGHT = [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 138, 139, 140, 141, 142, 143]
FULL_LEVEL_LIST = range(0, 134+1) + range(136, 143+1) + range(200, 210+1) + [-1, 135, 444, 555, 666, 777, 800, 801, 850, 851, 852, 853, 888, 900, 1444, 1666, 1777, 1801] + range(1001, 1127+1)

if EXEVERS:
        VERBOSE = False

class TransformiceClientHandler(TFMProtocol):
        def __init__(self):

                self.buffer = ""
                self.MDT = ""

                self.packetSize = ""
                self.packetSizeUTF = ""
                self.eventToken1 = ""
                self.eventToken2 = ""
                self.isUtfPacket = False
                self.currentPacketPos = 0
                self.packetQueue = []
                self.partialPacketHold = False

                self.validatingVersion = True

                self.loaderInfoUrl = ""
                self.stageloaderInfobytesTotal = "0"
                self.stageloaderInfobytesLoaded = "0"
                self.loaderInfobytesTotal = "0"
                self.loaderInfobytesLoaded = "0"

                self.Langue="br"
                self.Translating=False
                self.voar = False
                self.speeding = False                
				
                self.computer=""
                self.flashvers=""				

                self.username = ""
                self.isHole = False
                self.libCnTimer = None
                self.libSpTimer = None
                self.posX = 0
                self.posY = 0
                self.mDirection = "0"
                self.libCn = False
                self.sendMsgDuck = False
                self.mDirection = "1"				
                self.playerCode = -1
                self.privilegeLevel = 0
                        #-1 - Invalid
                        #0 - Guest
                        #1 - Normal
						#1 - Divulgador
						#2 - VIP
                        #3 - Helper
                        #4 - MapCrew
						#5 - Moderador
                        #6 - Mega Moderador
						#8 - Coordenador
                        #10 - Administrador
                self.room = None
                self.chatdisabled = False
                self.modoPwet = False

                self.isBanned = False
                self.isFrozen = False
                self.isFrozenTimer = None
                self.isShaman = False
                self.isDead = False 
                self.Q = "5"                
                self.Q = "10"
                self.Accusations = int(0)
                self.canAccusations = True
                self.TotalAccusations = int(0)
                self.QCurrent = random.choice(Q)				
                self.duckCheckCounter = 0
                self.forumid = "1"
                self.hasCheese = False
                self.isAfk = True
                self.isSyncroniser = False
                self.score = 0
                self.isMapCrew = False
                self.isOwner = False				
                self.avatar = 0
                self.voteban = []
                self.votemute = 0
                self.mumute = False
                self.modmute= False
                self.TempBan= False
                self.roomname = ""
                self.icecubecount = 0
                self.lastmessage = ""
                self.isinit = True
                self.sentinelle = False
                self.ignoredList = [""]
                self.clearloglistmod = ["Hangover"]				
                self.sentcount = 0
                self.x = 0
                self.y = 0
                self.posX = 0
                self.posY = 0
                self.Yer3 = 0
                self.ShamanRespawn = False
                self.Balonlar = 0
                self.loadercheck = True
                self.logonsuccess = False
                self.wrongPasswordAttempts=0
                #directions				
                self.isIPban = "NotChecked"
                self.isInTribe = False
                self.giftCount = 0
                self.sendGiftCount = 0
                self.recvGiftCount = 0
                self.moip = 1				
                self.gotGift = 0
                self.wonFight = False
                self.titleNumber = 0
                self.Tellfirsttime = 0
                self.disableShop = False
                self.SPEC = False
                self.Voted= False
                self.QualifiedVoter=False
                self.ATEC_Time = None
                self.AWKE_Time = (getTime() * 1000)
                self.playerStartTime = None
                self.isBecerikullanma = False
                self.REMOTECONTROLPRT= False
                self.NoDataTimer = None
                self.JumpCheck = 1
                self.canMeep = False
                self.AwakeTimerKickTimer = None
                self.iskelet = False

                self.modoPwet = False
				
				#Modo command
                self.silence   = False
                self.silenceData = ""
                self.muteTribe = False
                self.censorChat= False
                self.muteChat  = False
                self.isHidden  = False
                self.isCupido  = False
                self.isCornonome  = False
                self.isCornonomez  = False
                self.isCornonome2  = False
                self.isCornonomez2  = False
                self.isCoramarelo  = False	
                self.isSpeed  = False			
                self.isAsasad  = False	
                self.isNamecor  = False
                self.isnomebra  = False		
                self.isnomelar  = False					
                self.istimeama  = False
                self.istimever  = False
                self.isnomeam  = False	
                self.isnomever  = False			
                self.isnomecin  = False	
                self.isnomeverd  = False
                self.isnomeroxo  = False				
				

                self.isSade = False
                self.isCupid = False
                self.isZombie = False				
                self.defilantePoints = 0
                self.halloweenHealth = 0
                self.AttackedCat = 0
                self.tribewar = 0
                self.Habbit = 0				
                self.Testing = 0				

                self.isUserBot = False
                self.censorChat= False				
                self.isBot = False
                self.chatcolored=False
                self.chatcolor = ""				

                self.EmailAddress = ""
                self.UsernameRecoveryPass = ""
                self.ValidatedEmail = False
                self.LastEmailCode = str(random.randrange(10000, 99999+1))
                self.ValidatedPassChange = False

                self.TribeName  = ""
                self.TribeRank  = ""
                self.TribeCode  = ""
                self.TribeInfo  = []
                        #m= Modify Greeting Message
                        #I= Recruit
                        #D= Change Permissions
                        #E= Exlude Tribe Members
                self.TribeMessage = ""
                self.TribeFromage = 0
                self.Triberanked = 0				
                self.AcceptableInvites = []

                self.RTNail= False
                self.RTotem= False
                self.UTotem= False
                self.STotem= [0,""]
                self.Totem = [0,""]
                        #Item Count, Totem (Minus playercode#x#y at the beginning)
                        #When summoning totem, Do: PlayerCode#X#Y+self.Totem[1]
                        #Totem Editor uses 400, 203 for X/Y

                self.isFishing = False
                self.Map777FishingTimer = None
                self.LoadCountTotem = False
                #self.shoplist = "0,3,1,0,20,10;0,5,2,0,100,50;0,2,1,0,200,100;0,4,1,0,200,100;0,1,2,0,500,250;0,6,2,0,500,250;1,1,1,0,200,100;1,2,1,0,200,100;0,7,1,0,200,100;0,8,1,0,300,150;0,9,4,0,500,250;0,10,1,0,100,50;0,11,1,0,500,250;1,4,1,0,200,100;0,12,1,0,200,100;0,13,1,0,500,250;0,14,3,0,300,150;1,3,1,0,200,100;1,5,1,0,300,150;0,15,1,0,200,100;3,1,1,0,100,50;3,2,1,0,25,10;3,3,1,0,150,75;3,4,0,0,400,200;100,16,2,0,300,150;0,17,3,0,200,100;0,18,1,0,300,150;0,19,2,0,300,150;0,20,2,0,500,250;0,21,2,0,200,100;2,1,1,0,100,50;3,5,1,0,300,150;0,22,1,0,300,150;0,23,3,0,400,200;0,24,1,0,50,25;0,25,1,0,250,125;0,26,1,0,300,150;0,27,2,0,800,400;0,28,2,0,300,150;0,29,3,0,500,250;4,1,3,0,200,100;4,2,1,0,200,100;0,30,1,0,200,100;0,31,1,0,300,150;0,32,1,0,800,400;0,33,2,0,150,75;0,34,2,0,400,200;0,35,1,0,1000,500;0,36,2,0,500,250;0,37,1,0,200,100;0,38,3,0,800,400;1,6,2,0,800,400;0,41,1,0,800,400;0,42,2,0,800,400;4,3,1,0,800,400;2,3,1,0,800,400;0,43,1,0,200,100;0,44,3,0,250,125;0,45,1,0,300,150;0,46,2,0,100,50;0,47,4,0,1500,750;1,7,3,0,50,25;2,4,2,0,20,10;3,6,1,0,300,150;3,7,1,0,300,150;4,4,2,0,50,25;1,8,1,0,50,25;0,48,2,0,300,150;0,52,0,0,400,200;2,5,2,0,300,150;0,51,1,0,200,100;0,49,3,0,500,250;3,8,0,0,400,200;0,54,2,0,50,25;0,50,1,0,400,200;0,53,0,0,400,200;3,9,1,0,400,200;0,55,1,0,100,50;4,6,2,0,50,25;3,10,1,0,20,10;2,9,0,0,100,50;0,61,1,0,200,100;0,62,2,0,300,150;1,10,1,0,100,50;0,63,1,0,350,175;0,64,2,0,300,150;1,11,2,0,200,100;0,68,7,0,200,100;0,69,6,0,200,100;0,70,4,0,200,100;0,71,2,0,200,100;0,72,3,0,200,100;0,73,2,0,200,100;3,12,1,0,150,75;0,65,2,0,200,100;3,13,0,0,150,75;0,66,2,0,300,150;0,67,1,0,400,200;0,74,2,0,150,75;3,14,1,0,50,25;0,77,3,0,250,125;4,8,2,0,100,50;0,78,3,0,300,150;2,10,3,0,4001,1001;0,79,2,0,250,125;1,12,2,0,400,200;0,75,2,0,50,25;0,76,1,0,200,100;2,2,0,0,500,250;4,9,2,0,500,250;0,39,1,0,400,200;3,15,0,0,500,250;0,81,1,0,400,200;0,82,1,0,500,250;0,80,1,0,500,250;0,40,2,0,650,325;0,83,2,0,350,125;3,16,1,0,350,175;2,12,1,0,350,175;4,10,1,0,800,400;2,11,1,0,1000,500;0,85,2,0,500,250;0,84,0,0,500,250;1,13,0,0,500,250;1,9,1,0,500,250;4,5,2,0,500,250;2,6,2,0,500,250;4,11,2,0,500,250;2,13,1,0,500,250;4,12,1,0,500,250;0,86,0,0,1000,500;2,15,0,0,600,300;2,14,3,0,200,100;0,88,2,0,500,250;1,14,3,0,500,250;0,87,3,0,500,250;0,56,4,0,500,250;0,57,1,0,500,250;0,58,0,0,500,250;2,7,0,0,500,250;2,8,2,0,500,250;3,11,0,0,500,250;0,89,2,0,500,250;0,91,0,0,500,250;0,90,0,0,500,250;0,93,3,0,500,250;0,92,3,0,500,250;0,59,1,0,500,250;0,60,0,0,500,250;4,7,2,0,500,250;3,17,0,0,500,250;2,16,3,0,500,250;0,94,3,0,500,250;0,95,5,0,500,250;0,96,2,0,400,200;0,97,4,0,400,200;1,15,0,0,400,200;2,17,0,0,400,200;3,18,0,0,400,200;4,13,0,0,400,200;5,1,1,0,400,200;5,2,1,0,400,200;5,3,1,0,400,200;5,4,1,0,400,200;5,5,1,0,400,200;5,6,4,0,400,200;5,7,2,0,400,200;5,8,4,0,400,200;21,0,0,0,400,200;21,1,0,0,400,200;21,2,0,0,700,350;21,3,0,0,750,350;21,4,0,0,750,375;21,5,0,0,700,350;21,6,0,0,800,400;22,2,0,0,1400,700;22,3,0,0,1400,700;22,4,0,0,1400,700;22,5,0,0,1400,700;22,6,0,0,1400,700;22,7,0,0,1800,900;22,8,0,0,2000,1000;22,9,0,0,2000,1000;22,10,0,0,1300,650;22,11,0,0,2200,1100;22,12,0,0,2200,1100;22,13,0,0,2200,1100;22,14,0,0,2200,1100;22,15,0,0,1900,950;3,19,2,0,50,25;0,98,1,0,300,150;0,99,2,0,200,100;0,101,3,0,300,150;0,102,3,0,300,150;3,20,3,0,20,10;3,21,3,0,60,30;3,22,1,0,20,10;3,23,1,0,20,10;5,9,2,0,300,150;5,10,2,0,200,100;2,18,2,0,20,10;2,19,1,0,100,50;6,1,2,0,1000,500;1,16,2,0,100,50;0,103,3,0,250,125;2,20,1,0,200,100;2,21,1,0,250,125;2,22,1,0,200,100;1,17,2,0,300,150;3,24,1,0,200,100;4,14,0,0,200,100;7,1,0,0,400,200;8,1,1,0,300,150;6,2,1,0,900,450;3,26,1,0,400,200;3,25,1,0,30,15;0,104,0,0,250,125;4,15,0,0,150,75;2,23,0,0,100,50;22,16,0,0,1500,750;3,27,1,0,250,125;3,28,2,0,200,100;6,4,1,0,250,125;6,5,1,0,1500,750;2,24,3,0,2000,1000;0,106,3,0,2000,1000"#final               

                self.shoplist = "0,3,1,0,20,0;0,5,2,0,100,0;0,2,1,0,200,0;0,4,1,0,200,0;0,1,2,0,500,0;0,6,2,0,500,0;1,1,1,0,200,0;1,2,1,0,200,0;0,7,1,0,200,0;0,8,1,0,300,0;0,9,4,0,500,0;0,10,1,0,100,0;0,11,1,0,500,0;1,4,1,0,200,0;0,12,1,0,200,0;0,13,1,0,500,0;0,14,3,0,300,0;1,3,1,0,200,0;1,5,1,0,300,0;0,15,1,0,200,0;3,1,1,0,100,0;3,2,1,0,25,0;3,3,1,0,150,0;3,4,0,0,400,0;0,16,2,0,300,0;0,17,3,0,200,0;0,18,1,0,300,0;0,19,2,0,300,0;0,20,2,0,500,0;0,21,2,0,200,0;2,1,1,0,100,0;3,5,1,0,300,0;0,22,1,0,300,0;0,23,3,0,400,0;0,24,1,0,50,0;0,25,1,0,250,0;0,26,1,0,300,0;0,27,2,0,800,0;0,28,2,0,300,0;0,29,3,0,500,0;4,1,3,0,200,0;4,2,1,0,200,0;0,30,1,0,200,0;0,31,1,0,300,0;0,32,1,0,800,0;0,33,2,0,150,0;0,34,2,0,400,0;0,35,1,0,1000,0;0,36,2,0,500,0;0,37,1,0,200,0;0,38,3,0,800,0;1,6,2,0,800,0;0,41,1,0,800,0;0,42,2,0,800,0;4,3,1,0,800,0;2,3,1,0,800,0;0,43,1,0,200,0;0,44,3,0,250,0;0,45,1,0,300,0;0,46,2,0,100,0;0,47,4,0,1500,0;1,7,3,0,50,0;2,4,2,0,20,0;3,6,1,0,300,0;3,7,1,0,300,0;4,4,2,0,50,0;1,8,1,0,50,0;0,48,2,0,300,0;0,52,0,0,400,0;2,5,2,0,300,0;0,51,1,0,200,0;0,49,3,0,500,0;3,8,0,0,400,0;0,54,2,0,50,0;0,50,1,0,400,0;0,53,0,0,400,0;3,9,1,0,400,0;0,55,1,0,100,0;4,6,2,0,50,0;3,10,1,0,20,0;2,9,0,0,100,0;0,61,1,0,200,0;0,62,2,0,300,0;1,10,1,0,100,0;0,63,1,0,350,0;0,64,2,0,300,0;1,11,2,0,200,0;0,68,7,0,200,0;0,69,6,0,200,0;0,70,4,0,200,0;0,71,2,0,200,0;0,72,3,0,200,0;0,73,2,0,200,0;3,12,1,0,150,0;0,65,2,0,200,0;3,13,0,0,150,0;0,66,2,0,300,0;0,67,1,0,400,0;0,74,2,0,150,0;3,14,1,0,50,0;0,77,3,0,250,0;4,8,2,0,100,0;0,78,3,0,300,0;2,10,3,0,4001,1001;0,79,2,0,250,0;1,12,2,0,400,0;0,75,2,0,50,0;0,76,1,0,200,0;2,2,0,0,500,0;4,9,2,0,500,0;3,15,0,0,500,0;0,82,1,0,500,0;0,80,1,0,500,0;0,40,2,0,655,0;0,83,2,0,350,0;3,16,1,0,350,0;2,12,1,0,350,0;4,10,1,0,800,0;2,11,1,0,1000,0;0,85,2,0,500,0;0,84,0,0,500,0;1,13,0,0,500,0;1,9,1,0,100,50;4,5,2,0,200,50;2,6,2,0,250,100;4,11,2,0,300,140;2,13,1,0,300,200;4,12,1,0,300,200;0,86,0,0,1000,0;2,15,0,0,600,0;2,14,3,0,200,0;0,88,2,0,500,0;1,14,3,0,500,0;0,87,3,0,500,0;0,56,4,0,500,0;0,57,1,0,500,0;0,58,0,0,500,0;2,7,0,0,500,0;2,8,2,0,500,0;3,11,0,0,500,0;0,89,2,0,500,0;0,91,0,0,500,0;0,90,0,0,500,0;0,93,3,0,500,0;0,92,3,0,500,0;0,59,1,3,10,0;0,60,0,3,12,0;4,7,2,3,4,0;3,17,0,3,2,0;2,16,3,3,4,0;0,94,3,3,14,0;0,95,5,0,500,50;0,96,2,0,400,40;0,97,4,0,400,40;1,15,0,0,400,0;2,17,0,0,400,40;3,18,0,0,400,0;4,13,0,0,400,40;5,1,1,0,400,40;5,2,1,0,400,40;5,3,1,0,400,40;5,4,1,0,400,40;5,5,1,0,400,40;5,6,4,0,400,0;5,7,2,0,400,0;5,8,4,0,400,0;21,0,0,0,1000,50;21,1,0,0,1000,50;21,2,0,0,3000,150;21,3,0,0,3000,150;21,4,0,0,3000,150;21,5,0,0,3000,150;21,6,0,0,3000,150;22,2,0,0,6000,300;22,3,0,0,6000,300;22,4,0,0,6000,300;22,5,0,0,6000,300;22,6,0,0,6000,300;22,7,0,0,8000,350;22,8,0,0,10000,400;3,19,2,0,50,10;0,98,1,0,300,40;0,99,2,0,200,40;0,101,3,0,300,40;0,102,3,0,300,40;3,20,3,0,20,2;3,21,3,0,60,6;3,22,1,0,20,2;3,23,1,0,20,2;5,9,2,0,300,40;5,10,2,0,200,40;2,18,2,0,20,2;2,19,1,0,100,10;6,1,2,0,1000,100;22,9,0,0,7000,400;22,10,0,0,7250,425;3,24,0,0,1000000,0;1,17,0,0,1000000,0;2,20,0,0,1000000,0;0,103,0,0,250,40;2,21,0,0,300,40;4,14,0,0,200,40;2,22,0,0,400,40;22,11,0,0,6000,250;22,12,0,0,5200,225;22,13,0,0,5000,200;22,14,0,0,5250,200;3,25,1,0,200,0;4,15,3,0,150,0;2,23,0,0,80,0;0,104,0,0,250,0;3,26,1,0,200,0;6,2,1,0,1000,100;22,15,0,0,5000,300;3,27,0,2,150,40;3,28,0,2,200,60;6,4,0,2,250,150;3,19,2,0,100,0;1,16,2,0,100,0;0,105,0,0,100,10;5,13,1,0,400,40;1,18,3,0,500,50;3,29,2,0,50,5;6,3,1,0,1000,100;5,14,1,0,150,15;22,16,0,0,1000001,0;22,17,0,0,6000,300;2,24,3,3,20,30;0,106,0,3,30,50;6,5,3,3,40,100;22,18,0,0,6000,300;22,19,0,0,6000,300;22,20,0,0,6000,300;22,21,0,0,6000,300;22,22,0,0,6000,300"#final

                
                self.color1 = "78583a" #Fur
                self.color2 = "95d9d6" #Shaman marks ("fade55" for previous hardmode color?)

                self.cheeseTitleCheckList = [5, 20, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000, 2300, 2700, 3200, 3800, 4600, 6000, 7000, 8000, 9001, 10000, 14000, 18000, 22000, 26000, 30000, 34000, 38000, 42000, 46000, 50000, 55000, 60000, 65000, 70000, 75000, 80000]
                self.cheeseTitleDictionary = {5:5, 20:6, 100:7, 200:8, 300:35, 400:36, 500:37, 600:26, 700:27, 800:28, 900:29, 1000:30, 1100:31, 1200:32, 1300:33, 1400:34, 1500:38, 1600:39, 1700:40, 1800:41, 2000:72, 2300:73, 2700:74, 3200:75, 3800:76, 4600:77, 6000:78, 7000:79, 8000:80, 9001:81, 10000:82, 14000:83, 18000:84, 22000:85, 26000:86, 30000:87, 34000:88, 38000:89, 42000:90, 46000:91, 50000:92, 55000:234, 60000:235, 65000:236, 70000:237, 75000:238, 80000:93}

                self.firstTitleCheckList = [1, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4500, 5000, 5500, 6000, 7000, 8000, 9000, 10000, 12000, 14000, 16000, 18000, 20000, 25000, 30000, 35000, 40000]
                self.firstTitleDictionary = {1:9, 10:10, 100:11, 200:12, 300:42, 400:43, 500:44, 600:45, 700:46, 800:47, 900:48, 1000:49, 1100:50, 1200:51, 1400:52, 1600:53, 1800:54, 2000:55, 2200:56, 2400:57, 2600:58, 2800:59, 3000:60, 3200:61, 3400:62, 3600:63, 3800:64, 4000:65, 4500:66, 5000:67, 5500:68, 6000:69, 7000:231, 8000:232, 9000:233, 10000:70, 12000:224, 14000:225, 16000:226, 18000:227, 20000:202, 25000:228, 30000:229, 35000:230, 40000:71}

                self.shamanTitleCheckList = [10, 100, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 18000, 20000, 22000, 24000, 26000, 28000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 85000, 90000, 100000, 140000]
                self.shamanTitleDictionary = {10:1, 100:2, 1000:3, 2000:4, 3000:13, 4000:14, 5000:15, 6000:16, 7000:17, 8000:18, 9000:19, 10000:20, 11000:21, 12000:22, 13000:23, 14000:24, 15000:25, 16000:94, 18000:95, 20000:96, 22000:97, 24000:98, 26000:99, 28000:100, 30000:101, 35000:102, 40000:103, 45000:104, 50000:105, 55000:106, 60000:107, 65000:108, 70000:109, 75000:110, 80000:111, 85000:112, 90000:113, 100000:114, 140000:115}

                self.shopTitleCheckList = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]
                self.shopTitleDictionary = {1:115, 2:116, 4:117, 6:118, 8:119, 10:120, 12:121, 14:122, 16:123, 18:124, 20:125, 22:126}

                self.noelGiftTitleCheckList = [5, 10, 40, 60]
                self.noelGiftTitleDictionary = {5:127, 10:128, 40:129, 60:130}

                self.valentinGiftTitleCheckList = [5, 30, 60]
                self.valentinGiftTitleDictionary = {5:210, 30:211, 60:212}

                self.hardShamTitleCheckList = [500, 2000, 4000, 7000, 10000, 14000, 18000, 22000, 26000, 30000, 40000]
                self.hardShamTitleDictionary = {500:213, 2000:214, 4000:215, 7000:216, 10000:217, 14000:218, 18000:219, 22000:220, 26000:221, 30000:222, 40000:223}

                self.bootcampTitleCheckList = [1, 3, 5, 7, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 500, 600, 700, 800, 900, 1000]
                self.bootcampTitleDictionary = {1:256, 3:257, 5:258, 7:259, 10:260, 15:261, 20:262, 25:263, 30:264, 40:265, 50:266, 60:267, 70:268, 80:269, 90:270, 100:271, 120:272, 140:273, 160:274, 180:275, 200:276, 250:277, 300:278, 350:279, 400:280, 500:281, 600:282, 700:283, 800:284, 900:285, 1000:286}

                self.tickets = 0
                self.vel = 0
                self.IcedMouses = 0
                self.dataReg = "0"				
				
                self.CMDTEC = 0
                self.invisification = 0
                self.SGMDT = [0, 0, 0]
                self.ICMDTEC = 0
                
        def connectionMade(self):
                self.address = self.transport.getPeer()
                self.address = [self.address.host]
                
                self.server = self.factory

                if self.server.getIPPermaBan(self.address[0]):
                        self.transport.loseConnection()
                        self.look = "22;0,0,0,0,0,0,0,0"
                        self.isIPban = True
                        self.isBanned = True
                        data=""
                elif self.address[0] in self.server.tempIPBanList:
                        self.transport.loseConnection()
                        self.isIPban = True
                        self.isBanned = True
                        data=""
                else:
                        try:
                                derp = self.server.connectCounts[self.address[0]]
                                self.server.connectCounts[self.address[0]]['count'] += 1
                        except:
                                self.server.connectCounts[self.address[0]] = {'count':1}
# Verificação de ataque # DDos # Dos
                        # Check DOS
                        if self.server.connectCounts[self.address[0]]['count'] >= 20:
                                self.server.tempIPBanList.append(self.address[0])
                                self.transport.loseConnection()
                                self.server.sendModChat(self, "\x06\x14", ["<N>DOS Ataque Bloqueado em IP: [<CH>"+str(self.address[0])+"<N>]"])
                                print "DOS Attack Blocked in IP: ["+str(self.address[0])+"]"
                                self.server.connectCounts[self.address[0]] = {'count':1}
                                with open("./KiwiGuard/Data/Block_IPList.kwg", "r+") as f:
									old = f.read()
									f.seek(0)
									f.write("" + str(now.strftime("%m/%d/%Y %I:%M:%S %p")) + "|"+ str(self.address[0]) +"|0\n" + old)	
									logging.warning("KiwiGuard Firewall Detected: (DOS form IP "+self.address[0]+"), Act: Disconnect He and Ban Perma IP.")								
                        else:
                                self.validatingLoader = self.server.ValidateLoader
                                #self.shoplist = self.server.shopList

                                self.NoDataTimer = reactor.callLater(7, self.transport.loseConnection)
                                
                                if VERBOSE:
                                        print "["+str(datetime.today())+"] "+'Interface de login enviada para '+str(self.address[0])

                                self.SGMDT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                                LCDMT = str(self.server.LCDMT)
                                self.CMDTEC = random.randrange(1000, 9999)
                                self.ICMDTEC = self.CMDTEC
                                i = 0
                                while(i < 10):
                                        self.CMDT = LCDMT[i]
                                        if self.CMDT == "0":
                                                self.SGMDT[i] = "10"
                                        else:
                                                self.SGMDT[i] = self.CMDT
                                        i = (i+1)

        def inforequestReceived(self, data):
                if self.NoDataTimer:
                        try:
                                self.NoDataTimer.cancel()
                        except:
                                self.NoDataTimer=None
                if VERBOSE:
                        print "RECV: "+repr(data)
                if LOGVERB:
                        pass
                        ##logging.warning("RECV: "+repr(data))
                if self.isBanned:
                        data=""
                        self.transport.loseConnection()
                self.buffer += data
                if self.buffer=="<policy-file-request/>\x00":
                        if self.server.getIPPermaBan(self.address[0]):
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""
                        elif self.address[0] in self.server.tempIPBanList:
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""

                        self.isIPban = False
                        self.transport.write(r"""<cross-domain-policy><allow-access-from domain="*" to-ports="*" /></cross-domain-policy>""" + "\x00")
                        self.transport.loseConnection()

                elif self.buffer=="SuperBelette\x00":
                        if self.server.getIPPermaBan(self.address[0]):
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""
                        elif self.address[0] in self.server.tempIPBanList:
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""
                        else:
                                self.isIPban = False
                                self.isinit = False
                                self.sentinelle = True
                                self.sentinelleSendStat()
                                self.sentinelleSendCPU()
                elif self.buffer.startswith("PlayerStat-"):
                        username=self.buffer[11:].replace("\x00","").lower().capitalize()
                        if len(username)<3 or len(username)>12:
                                self.transport.loseConnection()
                        elif self.server.checkExistingUsers(username):
                                name = username
                                tribe = self.server.getTribeName(username)
                                rounds = self.server.getRoundsCount(username)
                                cheese = self.server.getCheeseCount(username)
                                first = self.server.getFirstCount(username)
                                chamansave = self.server.getSavesCount(username)
                                chamancheese = self.server.getShamanCheeseCount(username)
                                chamangold = self.server.getShamanGoldSavesCount(username)
                                micetitle = self.server.getCurrentTitle(username)
                                self.sendDataOld("\x05", [name, tribe, rounds, cheese, first, chamansave, chamancheese, chamangold, micetitle])
                                self.transport.loseConnection()
                        else:
                                self.transport.loseConnection()

        def parseSentinelle(self, data):
                #print repr(data)
                pass

        def sentinelleSendStat(self):
                if not self.sentcount>1200:
                        usedram=psutil.avail_phymem()
                        totalram=psutil.TOTAL_PHYMEM
                        usedram = usedram / 1048576
                        totalram = totalram / 1048576
                        usedram = totalram-usedram
                        usedram = '%.1f' % usedram
                        totalram = '%.1f' % totalram
                        self.sendDataOld("\x05", self.server.PlayerCountHistory+["\x00\x04", str(usedram)+"/"+str(totalram), self.server.POLICY+" - "+VERSION, str(self.server.getConnectedPlayerCount())])
                        self.sentinelleSendStatTimer = reactor.callLater(10, self.sentinelleSendStat)

        #def chatEnable(self):
        #        self.chatdisabled=False
        def sentinelleSendCPU(self):
                #600 for 1s cpu counts for 10 minutes.
                #2400 for 0.2 cpu counts for 10 minutes.
                #1200 for 0.2 cpu counts for 5 minutes.
                #600 for 0.2 cpu counts for 2.5 minutes.
                #Have interval and callLater be the same numbers.
                self.sentcount=self.sentcount+1
                if self.sentcount>1200:
                        self.transport.loseConnection()
                        if self.sentinelleSendCPUTimer:
                                try:
                                        self.sentinelleSendCPUTimer.cancel()
                                except:
                                        self.sentinelleSendCPUTimer=None
                        if self.sentinelleSendStatTimer:
                                try:
                                        self.sentinelleSendStatTimer.cancel()
                                except:
                                        self.sentinelleSendStatTimer=None
                else:
                        cpu=str(math.floor(psutil.cpu_percent(interval=0.2))).replace(".0","")
                        self.sendDataOld("\x06", [cpu])
                        self.sentinelleSendCPUTimer = reactor.callLater(0.2, self.sentinelleSendCPU)

        def stringReceived(self, packet):
                if self.NoDataTimer:
                        try:
                                self.NoDataTimer.cancel()
                        except:
                                self.NoDataTimer=None
                #print repr(packet)
                Size = 0#len(packet)
                MDT = packet[:4]
                data = packet[4:]
                if self.isBanned:
                        data=""
                        self.transport.loseConnection()
                else:
                        self.found_terminator(MDT, data, Size)

        def found_terminator(self, MDT, data, Size):
                if self.validatingVersion:
                        if self.server.getIPPermaBan(self.address[0]):
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""
                        elif self.address[0] in self.server.tempIPBanList:
                                self.transport.loseConnection()
                                self.isIPban = True
                                self.isBanned = True
                                data=""
                        else:
                                self.isIPban = False
                        if VERBOSE:
                                print "RECV: "+repr(data)
                        if LOGVERB:
                                #logging.warning("RECV: "+repr(data))
                                pass
                        if data.startswith("\x1c\x01"):
                                version, connectionkeylen = struct.unpack('!hh', data[2:6])
                                version = "1." + str(version)
                                connectionkey = data[6:6+connectionkeylen]
                                print connectionkey
                                if self.isinit:
                                        if self.server.GetCapabilities:
                                                secFile = open("./Compile/Capabilities.swf", "rb")
                                                self.validatingLoader = True
                                        elif self.validatingLoader:
                                                secFile = open("./Compile/AltKikoo.swf", "rb")
                                        else:
                                                secFile = open("./Compile/Kikoo.swf", "rb")
                                        secData = secFile.read()
                                        secFile.close()
                                        secB64=base64.b64encode(secData)
                                        self.isinit = False
                                if self.server.ValidateVersion:
                                        if version == VERSION:
                                                self.sendCorrectVersion()
                                                self.AwakeTimerKickTimer = reactor.callLater(600, self.AwakeTimerKick)
                                        else:
                                                self.transport.loseConnection()
                                else:
                                        self.sendCorrectVersion()
                                        self.AwakeTimerKickTimer = reactor.callLater(600, self.AwakeTimerKick)
                                self.validatingVersion = False
                        else:
                                #logging.error(repr(data))
                                self.transport.loseConnection()
                else:
                        try:
                                self.parseData(data, MDT, Size)
                        except Exception as e:
                                self.sendPlayerBan(0, "Ocorreu um erro e você foi desconectado.\n", True)
                                aq=open("./logs/errors.log","a")
                                aq.write("\n"+"="*40+"\n")
                                aq.write("- Time: "+getTime2()+"\n- IP: "+self.address[0]+"\n- Username: "+self.username+"\n- Error: \n")
                                traceback.print_exc(file=aq)
                                aq.close()
                                print("["+str(getTime2())+"] "+"O jogador "+self.username+" foi desconectado por um Erro. Olhar em errors.log")
                                self.transport.loseConnection()                      
        def sendMessage(self, message):
                self.sendData("\x06\x09" + struct.pack("!h", len(message)) + message, [], True)

        def sendAllMessage(self, message):
                self.room.sendAllBin("\x06\x09", struct.pack("!h", len(message)) + message)				
						
        def setNameColor(self, playerCode, Color):
                hexcolor = struct.pack('!i', int(Color, 16))
                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(playerCode))+hexcolor)

        def movePlayer(self, playerName, x, y, teleport, mx, my, b1):
            for player in self.room.clients.values():
                if player.username == playerName:
                        player.sendData("\x08\x03" + struct.pack("!hhbhhb", x, y, teleport, mx, my, b1),[],True)

        def SusShopCheese(self, senderClient, username, amount):
                for room in self.server.rooms.values():
                    for player in room.clients.values():
                        if player.username == username:
                            player.shopcheese = player.shopcheese-int(amount)
                            self.server.sendModChat(self, "\x06\x14", [senderClient.username+" Retirou "+str(amount)+" Queijos De "+player.username], False)
                            player.sendPlayerEmote(player.playerCode, 2, False)


        def SusShopFraises(self, senderClient, username, amount):
            for room in self.server.rooms.values():
                for player in room.clients.values():
                    if player.username == username:
                        player.shopfraises = player.shopfraises-int(amount)
                        self.server.sendModChat(self, "\x06\x14", [senderClient.username+" Retirou "+str(amount)+" Morangos De "+player.username], False)
                        player.sendPlayerEmote(player.playerCode, 2, False)

        def sendNoModMute(self, username, modname):
                found = False
                if username.isalpha():
                    username=username.lower().capitalize()
                    for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                            if client.username == username:
                                self.server.sendModChat(self, "\x06\x14", [modname+" Deu de Volta à Fala Para "+username], False)
                                self.server.removeModMute(client.username)
                                client.modmute = False
                                found = True
                                break
                return found
		
	def enableKey(self, key, onKeyPress=True, onKeyLeave=True):
                # onKeyPress não funciona se o onKeyLeave for FALSE!
                self.sendData("\x1d\x02"+struct.pack("!hbb", int(key), onKeyPress, onKeyLeave), [], True)
        def disableKey(self, key, onKeyPress=False, onKeyLeave=False):
                self.sendData("\x1d\x02"+struct.pack("!hbb", int(key), onKeyPress, onKeyLeave), [], True)				

        def parseData(self, data, MDT, Size):
                Pos = int((self.CMDTEC)%9000 + 1000)
                d1 = int(Pos / 1000)
                d2 = int(Pos / 100) % 10
                d3 = int(Pos / 10) % 10
                d4 = int(Pos % 10)
                SMDT = chr(int(self.SGMDT[d1])) + chr(int(self.SGMDT[d2])) + chr(int(self.SGMDT[d3])) + chr(int(self.SGMDT[d4]))
                self.CMDTEC += 1
                if self.CMDTEC==self.ICMDTEC+9000:
                        self.CMDTEC=self.ICMDTEC
                if str(MDT)!=str(SMDT):
                        if self.room:
                                self.sendPlayerDisconnect(self.playerCode)
                                self.room.removeClient(self)
                        self.sendModMessageChannel("Servidor", "Pacote Inesperado De "+str(self.address[0]))
                        data=""
                        self.transport.loseConnection()

                if self.isFrozen:
                        eventTokens=data[:2]
                        data=data[2:]
                        eventToken1, eventToken2 = eventTokens
                        if eventToken1 == "\x01" and eventToken2 == "\x01":
                                Check=str(data[2:struct.unpack('!h', data[:2])[0]+2]).split("\x01").pop(0)
                                if Check=="\x1A\x1A":
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                                elif Check=="\x1A\x02":
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                                else:
                                        pass
                        data=""

                if data=="":
                        pass
                else:
                        eventTokens=data[:2]
                        data=data[2:]
                        eventToken1, eventToken2 = eventTokens
                        if VERBOSE:
                                print "RECV:", repr(eventToken1+eventToken2), repr(data)
                        if LOGVERB:
                                #logging.warning("RECV: "+repr(eventToken1+eventToken2)+" "+repr(data))
                                pass
                        if eventToken1 == "\r":
                                if eventToken2 == "\r":
                                        if self.validatingLoader:
                                                data=str(data[2:struct.unpack('!h', data[:2])[0]+2]).split("\x01")
                                                linfo=data[0].split("null")
                                                data=linfo+data[1:]
                                                if self.server.GetCapabilities:
                                                        if len(data)==33:
                                                                self.loaderInfoUrl, self.stageloaderInfobytesTotal, self.stageloaderInfobytesLoaded, self.loaderInfobytesTotal, self.loaderInfobytesLoaded, avHardwareDisable, hasAccessibility, hasAudio, hasAudioEncoder, hasEmbeddedVideo, hasIME, hasMP3, hasPrinting, hasScreenBroadcast, hasScreenPlayback, hasStreamingAudio, hasStreamingVideo, hasTLS, hasVideoEncoder, isDebugger, isEmbeddedInAcrobat, language, localFileReadDisable, manufacturer, clientos, pixelAspectRatio, playerType, screenColor, screenDPI, screenResolutionX, screenResolutionY, serverString, flashversion = data
                                                                if not re.search(self.server.LoaderURL, self.loaderInfoUrl):
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+" did not load this from "+self.server.LoaderURL+".")
                                                                if str(self.stageloaderInfobytesTotal)!=str(self.server.LoaderSize):
                                                                        if str(self.stageloaderInfobytesTotal)!=str(self.server.ModLoaderSize):
                                                                                self.sendModMessageChannel("Servidor", str(self.address[0])+"'s ChargeurTransformice.swf filesize is different.")
                                                                if str(self.loaderInfobytesTotal)!=str(self.server.ClientSize):
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s Transformice.swf filesize is different.")
                                                                if self.stageloaderInfobytesTotal!=self.stageloaderInfobytesLoaded:
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s ChargeurTransformice.swf didn't fully load?")
                                                                if self.loaderInfobytesTotal!=self.loaderInfobytesLoaded:
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s Transformice.swf didn't fully load?")
                                                        else:
                                                                self.sendModMessageChannel("Servidor", str(self.address[0])+" sent invalid loader info or no info at all.")
                                                                self.server.tempBanIPExact(self.address[0], 120)
                                                                data=""
                                                                self.isBanned=True
                                                                self.transport.loseConnection()
                                                else:
                                                        if len(data)==5:
                                                                self.loaderInfoUrl, self.stageloaderInfobytesTotal, self.stageloaderInfobytesLoaded, self.loaderInfobytesTotal, self.loaderInfobytesLoaded = data
                                                                if not re.search(self.server.LoaderURL, self.loaderInfoUrl):
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+" did not load this from "+self.server.LoaderURL+".")
                                                                if str(self.stageloaderInfobytesTotal)!=str(self.server.LoaderSize):
                                                                        if str(self.stageloaderInfobytesTotal)!=str(self.server.ModLoaderSize):
                                                                                self.sendModMessageChannel("Servidor", str(self.address[0])+"'s ChargeurTransformice.swf filesize is different.")
                                                                if str(self.loaderInfobytesTotal)!=str(self.server.ClientSize):
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s Transformice.swf filesize is different.")
                                                                if self.stageloaderInfobytesTotal!=self.stageloaderInfobytesLoaded:
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s ChargeurTransformice.swf didn't fully load?")
                                                                if self.loaderInfobytesTotal!=self.loaderInfobytesLoaded:
                                                                        self.sendModMessageChannel("Servidor", str(self.address[0])+"'s Transformice.swf didn't fully load?")
                                                        else:
                                                                self.sendModMessageChannel("Servidor", str(self.address[0])+" sent invalid loader info or no info at all.")
                                                                self.server.tempBanIPExact(self.address[0], 120)
                                                                data=""
                                                                self.isBanned=True
                                                                self.transport.loseConnection()
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                        elif eventToken1 == "\x1f":
                                if eventToken2 == "l":
                                        #self.sendData("\x19\x02E\x00\x06Starmj\x00\x0bbr-vanilla2\x00\x00\n\x96\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\nIasminlove\x00\x0bbr-vanilla2\x00\x00\x00S\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cViniciuslima\x00\x010\x00\x00\x00\x00\x03\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x02\x00\tLuagiardi\x00\x04br-2\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x04Xupz\x00\x04br-2\x00\x00\x00\x0b\x02\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\nIasminlove\x00\x00\x00\x06sala 2\x00\x00\x01\x00\nBorgovelho\x00\x0bbr-vanilla1\x00\x00\x00\x18\x03\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x02\x00\x07Mitands\x00\x010\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\tSomtfodaa\x00\x04br-2\x00\x00\x00\xa9\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\nFusilation\x00\x04br-2\x00\x00\x00i\x02\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x01\x00\x0cFristidenovo\x00\x0bbr-vanilla1\x00\x00\x00\xbf\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\x08Reitribo\x00\x0bbr-vanilla1\x00\x00\x03\xb2\x02\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x01\x00\x0bMousehellll\x00\x16\x03[Editeur] Mousehellll\x00\x00\x00\x01\x01\x00\tMousehell\x00\x00\x00\x00\x02\x00\x00\x00\x06Iurigg\x00\nbr-vanilla\x00\x00\x00\x02\x02\x00\x0cSoudobemcrll\x00\x00\x00\x1bChamou de Mice Lixo e Putas\x02\x00\x00\x00\x07Mitxpro\x00\x00\x00\x00\x01\x00\x01\x00\x0cSoudobemcrll\x00\x010\x00\x00\x00\x00\x01\x00\x06Iurigg\x00\x00\x00\x00\x00\x00\x00\x00\x07Canabis\x00\x010\x00\x00\x00\x00\x01\x00\x0cRatinhozimbr\x00\x00\x00\x00\x04\x00\x00\x00\tDjmozilla\x00\x07*\x03so dj\x00\x00\x00B\x01\x00\tRodrigobr\x00\x00\x00\x1dOlha ele esta flodando mt '-'\x01\x00\x00\x00\tBotbyguuh\x00\x010\x00\x00\x00\x00\x01\x00\x08Niitroox\x00\x00\x00\x00\x00\x00\x00\x00\tSxduduzin\x00\x010\x00\x00\x00\x00\x01\x00\tSemideuss\x00\x00\x00\x0cUso de bug !\x04\x00\x00\x00\x05Thjkd\x00\x010\x00\x00\x00\x00\x01\x00\tSolrachpj\x00\x00\x00\x00\x00\x00\x00\x00\x05Xfeer\x00\x010\x00\x00\x00\x00\x01\x00\x05Xfeer\x00\x00\x00\x00\x00\x00\x00\x00\x03Rkz\x00\x010\x00\x00\x00\x00\x01\x00\x07Mclocok\x00\x00\x00\x03hak\x00\x00\x00\x00\x0cArifemuhamed\x00\x010\x00\x00\x00\x00\x01\x00\tMertaltin\x00\x00\x00\x00\x00\x00\x00\x00\t*Souris_1\x00\x15\x03[Tutorial] *Souris_1\x00\x00\x00\x00\x03\x00\t*Souris_1\x00\x00\x00\x00\x01\x00\x00\x00\x07Mimitao\x00\x00\x00\x1cmmmmmmmmmaaaaaaatttttttaaaaa\x04\x00\x01\x00\t*Souris_1\x00\x00\x00\x02co\x00\x00\x02\x00\x07Prosone\x00\x010\x00\x00\x00\x00\x02\x00\x08Arseniko\x00\x00\x00\x00\x00\x00\x00\x00\nNuevoprooo\x00\x00\x00\x00\x00\x00\x01\x00\nBotfodexas\x00\x010\x00\x00\x00\x00\x06\x00\tNinjabull\x00\x00\x00\x03ban\x00\x00\x00\x00\x07Alguemm\x00\x00\x00\x08teleport\x00\x00\x01\x00\x08Wesleymc\x00\x00\x00\x00\x00\x00\x02\x00\x08Wesleymc\x00\x00\x00+ele quando \xc3\xa9 sha nem ajuda pf da bam nele \x00\x00\x03\x00\tIntocavil\x00\x00\x00\x00\x00\x00\x04\x00\tNinjabull\x00\x00\x00\x0bban ban ban\x00\x00\x05\x00\tOmegaprox\x00\x04es-1\x00\x00\x00R\x01\x00\x0cCometemiyuca\x00\x00\x00\x00\x00\x00\x00\x00\r*Mitosubishnb\x00\x010\x00\x00\x00\x00\x01\x00\x0cTransforboyy\x00\x00\x00\x07ban ele\x00\x00\x00\x00\tRatodelab\x00\x010\x00\x00\x00\x00\x01\x00\x05Creme\x00\x00\x00\x00\x00\x00\x00\x00\tMiaapipio\x00\x010\x00\x00\x00\x00\x01\x00\nNuevoprooo\x00\x00\x00\x00\x00\x00\x00\x00\tSllendder\x00\x010\x00\x00\x00\x00\x01\x00\x06Nuubao\x00\x00\x00\x06ban pf\x00\x00\x00\x00\x08Oretorno\x00\x010\x00\x00\x00\x00\x02\x00\tNinjabull\x00\x00\x00\x03ban\x00\x00\x00\x00\x08Gokutyon\x00\x00\x00\x10hack speed lixo \x00\x00\x01\x00\tIrmaowily\x00\x010\x00\x00\x00\x00\x01\x00\nGuizinhobl\x00\x00\x00\x00\x02\x00\x00\x00\x08Bemcagao\x00\x010\x00\x00\x00\x00\x02\x00\x07Apolokk\x00\x00\x00\x00\x04\x00\x00\x00\x07Apolokk\x00\x00\x00\x00\x00\x00\x01\x00\x05Zdark\x00\x010\x00\x00\x00\x00\x01\x00\x08Renanbom\x00\x00\x00\x00\x00\x00\x00\x00\x0cLimozinedeat\x00\x07br-limo\x00\x00?(\x01\x00\x07Saquene\x00\x00\x00\x05spped\x00\x00\x00\x00\nReumatismo\x00\x010\x00\x00\x00\x00\x04\x00\x04Tdmj\x00\x00\x00\x00\x00\x00\x00\x00\x05Hyjug\x00\x00\x00\x04ban]\x00\x00\x01\x00\x06Sipika\x00\x00\x00\x00\x00\x00\x02\x00\x07Matryxx\x00\x00\x00\x00\x00\x00\x03\x00\x0bArtezanatox\x00\x010\x00\x00\x00\x00\x01\x00\x0cLeandroalexa\x00\x00\x00\x00\x02\x00\x00\x00\x07Matryxx\x00\x010\x00\x00\x00\x00\x01\x00\x0bLekinhofake\x00\x00\x00\x07Matryxx\x00\x00\x00\x00\x08Mitoneto\x00\x010\x00\x00\x00\x00\x02\x00\x0cRenanfebreee\x00\x00\x00\x00\x00\x00\x00\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x01\x00\x07Nakashi\x00\x010\x00\x00\x00\x00\x01\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x00\x00\x0cVolteitranmj\x00\x010\x00\x00\x00\x00\x01\x00\x0cRenanfebreee\x00\x00\x00\x00\x01\x00\x00\x00\x08Lafofuxa\x00\x0bbr-vanilla1\x00\x00\x00\x0b\x04\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x00\x00\x07Dblackk\x00\x00\x00\x03mod\x00\x00\x01\x00\x0cRenanfebreee\x00\x00\x00\x00\x00\x00\x02\x00\x07Nakashi\x00\x00\x00\x00\x00\x00\x03\x00\x05Icose\x00\x010\x00\x00\x00\x00\x01\x00\x07Ninjajk\x00\x00\x00*icose vai toma no cu vem chupa me pall vem\x00\x00\x00\x00\tSheqerqiz\x00\x010\x00\x00\x00\x00\x01\x00\x08Termigol\x00\x00\x00\x00\x00\x00\x00\x00\x07Muleksb\x00\x010\x00\x00\x00\x00\x05\x00\x0bLekinhofake\x00\x00\x00\x07Muleksb\x00\x00\x00\x00\x07Matryxx\x00\x00\x00\x00\x00\x00\x01\x00\x0bLekinhofake\x00\x00\x00\x08mulekesb\x00\x00\x02\x00\x0bLekinhofake\x00\x00\x00\x08Muleksb \x00\x00\x03\x00\x07Saquene\x00\x00\x00\x05spped\x00\x00\x04\x00\x0cLxgustavinho\x00\x010\x00\x00\x00\x00\x05\x00\x0cLxgustavinho\x00\x00\x00\x04hack\x00\x00\x00\x00\x0cLxgustavinho\x00\x00\x00\x00\x01\x00\x01\x00\x0cLxgustavinho\x00\x00\x00\x00\x04\x00\x02\x00\x0cLxgustavinho\x00\x00\x00\x00\x01\x00\x03\x00\x0cLxgustavinho\x00\x00\x00\x00\x00\x00\x04\x00\x0bAnormalmice\x00\x010\x00\x00\x00\x00\x02\x00\t*Souris_3\x00\x00\x00\x00\x00\x00\x00\x00\tSheqerqiz\x00\x00\x00\x00\x04\x00\x01\x00\t*Souris_2\x00\x010\x00\x00\x00\x00\x04\x00\x08Mitotoso\x00\x00\x00\x00\x00\x00\x00\x00\x0bCriadoradeq\x00\x00\x00\x00\x00\x00\x01\x00\x05Poppp\x00\x00\x00\x10vido muito viado\x00\x00\x02\x00\x06Sparrw\x00\x00\x00\x00\x01\x00\x03\x00\t*Souris_3\x00\x010\x00\x00\x00\x00\x03\x00\x03Nhm\x00\x00\x00\x00\x00\x00\x00\x00\tSheqerqiz\x00\x00\x00\x00\x00\x00\x01\x00\t*Souris_3\x00\x00\x00\x00\x00\x00\x02\x00\x04Tdmj\x00\x010\x00\x00\x00\x00\x01\x00\x08Aimeleck\x00\x00\x00\x00\x00\x00\x00\x00\nGuizinhobl\x00\nbr-vanilla\x00\x00\r\x8f\x01\x00\x03Evy\x00\x00\x00\x13> [Guizinhobl] vaca\x02\x00\x00\x00\tIgoormiix\x00\x04br-9\x00\x00\x006\x01\x00\x06Wowtop\x00\x00\x00\x00\x00\x00\x00\x00\x03Igi\x00\x010\x00\x00\x00\x00\x01\x00\x05Creme\x00\x00\x00\x00\x00\x00\x00\x00\x07Viquinb\x00\x010\x00\x00\x00\x00\x01\x00\x06Mattmj\x00\x00\x00\x00\x00\x00\x00\x00\x08Luskinha\x00\x0cbr-bootcamp1\x00\x00\x15\x18\x01\x00\x03Evy\x00\x00\x00\x00\x02\x00\x00\x00\tCapaveloz\x00\x010\x00\x00\x00\x00\x01\x00\nThemilgaus\x00\x00\x00\x05hacig\x00\x00\x00\x00\x04Frev\x00\x010\x00\x00\x00\x00\x01\x00\tPredrogro\x00\x00\x00\x01b\x00\x00\x00\x00\tBielfcfer\x00\x010\x00\x00\x00\x00\x01\x00\x08Aimeleck\x00\x00\x00\x00\x00\x00\x00\x00\x0bBandolleros\x00\x010\x00\x00\x00\x00\x02\x00\x0bArquivoflex\x00\x00\x00\x00\x00\x00\x00\x00\x05Creme\x00\x00\x00\x00\x00\x00\x01\x00\x08Erdenizq\x00\x010\x00\x00\x00\x00\x01\x00\x0cFenerbahceem\x00\x00\x00\x00\x00\x00\x00\x00\x07*Souris\x00\x13\x03[Tutorial] *Souris\x00\x00\x00\x00\x03\x00\x03Nhm\x00\x00\x00\x00\x00\x00\x00\x00\tJoaoviela\x00\x00\x00\x0bcapa grossa\x00\x00\x01\x00\tJoaoviela\x00\x00\x00\x19eicara seja meo amigo -V-\x00\x00\x02\x00\nKarollider\x00\x010\x00\x00\x00\x00\x01\x00\x0cRuanmitorato\x00\x00\x00\x07maa\xc2\xb4pa\x00\x00\x00\x00\x07Saquene\x00\x010\x00\x00\x00\x00\x01\x00\x0cRuanmitorato\x00\x00\x00\x04ruan\x00\x00\x00\x00\tXxhaacker\x00\x010\x00\x00\x00\x00\x01\x00\x06Wowtop\x00\x00\x00\x00\x00\x00\x00\x00\x07Xjoaovx\x00\x010\x00\x00\x00\x00\x01\x00\x04Szvc\x00\x00\x00\x00\x00\x00\x00\x00\x03Cil\x00\x010\x00\x00\x00\x00\x01\x00\tSoyalvoxd\x00\x00\x00\x00\x00\x00\x00\x00\x07Firtskk\x00\x010\x00\x00\x00\x00\x02\x00\x04Axon\x00\x00\x00\x00\x00\x00\x00\x00\x04Axon\x00\x00\x00\x00\x00\x00\x01\x00\x0cAdrianlindao\x00\x010\x00\x00\x00\x00\x02\x00\nIasminlove\x00\x00\x00\x0bhack sala 2\x00\x00\x00\x00\x0bLekinhofake\x00\x00\x00\x0cAdrianlindao\x00\x00\x01\x00\x0bMegatroller\x00\x010\x00\x00\x00\x00\x01\x00\x05Ctera\x00\x00\x00\x00\x00\x00\x00", [], True)
                                        #Main Modopwet
                                        stat = int(struct.unpack("!b", data)[0])
                                        if stat == 1:
                                                # Reports(H) - Name - Room - ID(I) - Reports2(H) - DensName(H) - ID?(H) - Motive(H) - Type(b) - POS(H) (FIM/RECOMEÇO)
                                                reports = self.server.reports
                                                reportlen = struct.pack("!b", len(reports))
                                                data = "\x19\x06"+reportlen
                                                for Value in reports:
                                                        Value = Value.split(",")
                                                        RepName = struct.pack("!h", len(Value[0]))+Value[0]
                                                        Room = struct.pack("!h", len(Value[1]))+Value[1]
                                                        RepID = struct.pack("!i", 0)
                                                        RepSplit = Value[3].split("_")
                                                        Reports = struct.pack("!b", len(RepSplit))
                                                        data = data+RepName+Room+RepID+Reports
                                                        for Value2 in RepSplit:
                                                                Value2 = Value2.split("|")
                                                                Name = struct.pack("!h", len(Value2[0]))+Value2[0]
                                                                ID = struct.pack("!h", 0)
                                                                Motive = struct.pack("!h", len(Value2[2]))+Value2[2]
                                                                Type = struct.pack("!b", int(Value2[3]))
                                                                Pos = struct.pack("!h", 0)
                                                                data = data+Name+ID+Motive+Type+Pos
                                                #self.sendData("\x19\x02\x01\x00\x0bMegatroller\x00\x011\x00\x00\x00\x00\x02\x00\x05Ctera\x00\x00\x00\x01a\x01\x00\x00\x00\x05Igoor\x00\x00\x00\x01b\x00\x00\x01", [], True)
                                                self.sendData(data, [], True)
                                        else:
                                                pass

                                        if data == "\x01":
                                                #Opened
                                                self.modoPwet = True
                
                                        elif data == "\x20":
                                                #Closed
                                                self.modoPwet = False
                                                
                        elif eventToken1 == "\x1a":
                                if eventToken2 == "/":
                                        # MajPositionMobile
                                        if not self.room.CheckedPhysics:
                                                codePartie=struct.unpack('!i', data[:4])[0]

                                        if not self.room.CheckedPhysics:
                                                self.room.CheckedPhysics=True
                                                if self.isSyncroniser and codePartie == self.room.CodePartieEnCours:
                                                        self.room.sendAllBin("\x04\x03", data)
                                        else:
                                                if self.isSyncroniser:
                                                        self.room.sendAllBin("\x04\x03", data)
                                                        
                                elif eventToken2 == "\x1a":
                                        # MajPositionJoueur
                                        if len(data)==21:
                                                codePartie, droiteEnCours, gaucheEnCours, posX, posY, vX, xY, saute, imageSaut, codeTP, angle, vitesseAngle = struct.unpack('!i??hhhh?bbhh', data)
                                        elif len(data)==17:
                                                codePartie, droiteEnCours, gaucheEnCours, posX, posY, vX, xY, saute, imageSaut, codeTP = struct.unpack('!i??hhhh?bb', data)
                                        else:
                                                pass
                                        self.posX = int(posX)
                                        self.posY = int(posY)
                                        if droiteEnCours == 1:
                                                self.mDirection = "1"
                                        elif gaucheEnCours == 1:
                                                self.mDirection = "0"
            
                                        if self.room.isHalloween:
                                            if int(self.room.ISCM) == 1034:
                                                if self.posX >= 5220:
                                                    if not self.hasCheese:
                                                        self.room.sendAll("\x05\x13", [str(self.playerCode)])
                                                        self.hasCheese = True
                            
                                            if int(self.room.ISCM) == 1035:
                                                if self.posX >= 7780:
                                                    if not self.hasCheese:
                                                        self.room.sendAll("\x05\x13", [str(self.playerCode)])
                                                        self.hasCheese = True           
                                                                                
                                        codePartie = struct.unpack('!i', data[:4])[0]
                                        data=data+struct.pack("!l", int(self.playerCode))
                                        if self.isFishing:
                                                self.isFishing=False
                                        if int(codePartie) == int(self.room.CodePartieEnCours):
                                                self.room.sendAllBin("\x04\x04", data)
                                elif eventToken2 == "\x08":
                                        pass														                                        										
                                elif eventToken2 == "J":
                                        #Mort
                                        for player in self.room.clients.values():
                                                if player.playerCode == self.room.currentShamanCode:
                                                        if not player.room.checkDeathCount()[1] == 1:
                                                                if not player.Balonlar == 0:
                                                                        player.room.sendAllBin("\x05\x14", struct.pack("!ihhhhb", 59, int(self.posX), 415, 0, 0, 1))#Balon
                                                                        player.Balonlar -= 1
                                        CodePartieEnCours = struct.unpack('!i', data[:4])[0]
                                        if CodePartieEnCours == self.room.CodePartieEnCours:
                                                if int(self.room.getPlayerCount())>=2:
                                                        if not self.room.checkDeathCount()[1] == 1:
                                                                if not self.ShamanRespawn:
                                                                        self.isDead = True
                                                        else:
                                                                self.ShamanRespawn = False
                                                                self.isDead = True
                                                else:
                                                        self.ShamanRespawn = False
                                                        self.isDead = True
                                                if self.room.isBootcamp:
                                                        self.score -= 1
                                                elif self.room.isSurvivor:
                                                        self.score -= 1
                                                else:
                                                        self.score += 1
                                                if self.score < 0:
                                                        self.score = 0
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                self.room.checkShouldChangeWorld()
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Unimplemented Error: Mort-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == "J":
                                if eventToken2 == "f":
                                        global time
                                        cantgoin = 0
                                        #Mouse got cheese into hole
                                        objectID, CodePartieEnCours, holedistance = struct.unpack("!bih", data)
                                        if self.room.isRacing:                                          
                                                timeTaken = int( (getTime() - self.room.gameStartTime))
                                                self.room.sendAll("\x1A" + "\x04", ["Parabéns à " + self.username + " por completar o mapa com o tempo arredondado de: <ROSE>"] + [timeTaken] + ["segundos"])
                                        if self.room.currentWorld == 900:
                                                self.sendData("\x05\x5A\x02")
                                        else:
                                                pass
                                        if self.room.isEditeur:
                                                if self.room.ISCMVdata[7]==0 and self.room.ISCMV!=0:
                                                        self.room.ISCMVdata[7]=1
                                                        self.sendMapValidated()
                                                        
                                        if int(CodePartieEnCours) != int(self.room.CodePartieEnCours):
                                                pass
                                        elif not self.hasCheese:
                                                pass
                                        else:
                                                if self.isShaman:
                                                        if self.room.isDoubleMap:
                                                                checkISCGI = self.room.checkIfDoubleShamanCanGoIn()
                                                        else:
                                                                checkISCGI = self.room.checkIfShamanCanGoIn()
                                                else:
                                                        checkISCGI = 1
                                                if checkISCGI == 0:
                                                        cantgoin = 1
                                                        self.saveRemainingMiceMessage()

                                                if cantgoin != 1:
                                                        self.isDead = True
                                                        self.isHole = True
                                                        if self.room.isHalloween:
                                                                self.room.numCompletedToGo +=1
                                                        self.room.numCompleted += 1
                                                        if self.room.isDoubleMap:
                                                                if objectID=="1":
                                                                        self.room.FSnumCompleted += 1
                                                                elif objectID=="2":
                                                                        self.room.SSnumCompleted += 1
                                                                else:
                                                                        self.room.FSnumCompleted += 1
                                                                        self.room.SSnumCompleted += 1
                                                        place = self.room.numCompleted
                                                        if self.room.autoRespawn or self.room.isTribehouseMap:
                                                                timeTaken = int( (getTime() - self.playerStartTime)*100 )
                                                        else:
                                                                timeTaken = int( (getTime() - self.room.gameStartTime)*100 )
                                                        #Score stuff
                                                        playerscorep = self.score
                                                        if self.room.ISCM == 1:
                                                                if not self.isTonnere:
                                                                        self.titleList = self.titleList+["253"]
                                                                        self.sendUnlockedTitle(self.playerCode, "253")
                                                                        self.isTonnere = True
                                                        if place==1 and not self.room.isDefilante:
                                                                playerscorep = playerscorep+16
                                                                if int (self.room.getPlayerCount(True))>=3 and self.room.countStats and not self.room.isDefilante: #Change this number for how many have to be in the room for firsts to count
                                                                        if self.isShaman:
                                                                                self.firstcount = self.firstcount
                                                                                self.shopfraises = self.shopfraises
                                                                        else:
                                                                                self.firstcount += 1
                                                                                self.shopfraises += 10
                                                                                if self.privilegeLevel>=0:
                                                                                        if self.firstcount in self.firstTitleCheckList:
                                                                                                unlockedtitle=self.firstTitleDictionary[self.firstcount]
                                                                                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                                self.FirstTitleList=self.FirstTitleList+[unlockedtitle]
                                                                                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                                if self.privilegeLevel==10:
                                                                                                        self.titleList = self.titleList+["440","442","444","201"]
                                                                                                if self.privilegeLevel==8:
                                                                                                        self.titleList = self.titleList+["442","444"]
                                                                                                if self.privilegeLevel==5:
                                                                                                        self.titleList = self.titleList+["442"]
                                                                                                self.titleList = filter(None, self.titleList)
                                                                                                self.sendTitleList()

                                                        elif place==2:
                                                                playerscorep = playerscorep+14
                                                        elif place==3:
                                                                playerscorep = playerscorep+12
                                                        else:
                                                                playerscorep = playerscorep+10
                                                        if self.isShaman==True:
                                                                playerscorep = self.score
                                                        self.score = playerscorep
                                                        #end
                                                        if int(self.room.getPlayerCount(True))>=3 and self.room.countStats:
                                                                if self.playerCode == self.room.currentShamanCode:
                                                                        self.shamancheese += 1
                                                                elif self.playerCode == self.room.currentSecondShamanCode:
                                                                        self.shamancheese += 1
                                                                else:
                                                                        self.cheesecount += 1
                                                                        self.room.sendAll("\x1A" + "\x04", ["<ROSE>"+self.username+" Firsto :)"]) 
                                                                        self.shopcheese += 1
                                                                        l = self.levelcount.split('/')
                                                                        lks = 20
                                                                        if l[0] > 30:
                                                                                self.nextlevel += 20
                                                                                if int(l[0]) < int(self.nextlevel) or int(l[0]) == int(self.nextlevel):
                                                                                        ns = (int(self.nextlevel)-int(l[0]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                self.nextlevel = int(ns)
                                                                                        else:
                                                                                                self.nextlevel = 0
                                                                                        if l[0] == 1:
                                                                                                lehel = int(l[0])
                                                                                        else:
                                                                                                lehel = int(l[0])+1
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[0])
                                                                                        self.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                        self.levelcount = str(lehel)+"/"+str(n)
                                                                                else:
                                                                                        pass
                                                                                self.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                        else:
                                                                                self.nextlevel += 10
                                                                                if int(l[0]) < int(self.nextlevel) or int(l[0]) == int(self.nextlevel):
                                                                                        ns = (int(self.nextlevel)-int(l[0]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                self.nextlevel = int(ns)
                                                                                        else:
                                                                                                self.nextlevel = 0
                                                                                        if l[0] == 1:
                                                                                                lehel = int(l[0])
                                                                                        else:
                                                                                                lehel = int(l[0])+1
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[0])
                                                                                        self.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                        self.levelcount = str(lehel)+"/"+str(n)
                                                                                else:
                                                                                        pass
                                                                                self.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                                self.sendData("\x08\x09", struct.pack("!h", 10), True)
                                                                        self.sendData("\x08\x02", struct.pack("!bb", 0, 1), True)
                                                                        if self.privilegeLevel>=0:
                                                                                if self.cheesecount in self.cheeseTitleCheckList:
                                                                                        unlockedtitle=self.cheeseTitleDictionary[self.cheesecount]
                                                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                        self.CheeseTitleList=self.CheeseTitleList+[unlockedtitle]
                                                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                        if self.privilegeLevel==10:
                                                                                                self.titleList = self.titleList+["440","442","444","201"]                                                                                                                                         
                                                                                        if self.privilegeLevel==8:
                                                                                                self.titleList = self.titleList+["442","444"]
                                                                                        if self.privilegeLevel==5:
                                                                                                self.titleList = self.titleList+["442"]
                                                                                        self.titleList = filter(None, self.titleList)
                                                                                        self.sendTitleList()
                                                                        
                                                                if objectID == "0" or objectID == "1":
                                                                        self.room.giveShamanSave()
                                                                elif objectID == "2":
                                                                        if self.room.isDoubleMap:
                                                                                self.room.giveSecondShamanSave()
                                                                        else:
                                                                                self.room.giveShamanSave()
                                                                else:
                                                                        self.room.giveShamanSave()

                                                                if self.cheesecount == 20:
                                                                        self.updateSelfSQL()
                                                                if self.room.isHardSham:
                                                                        self.room.giveShamanHardSave()
                                                        elif int(self.room.getPlayerCount(True))>3 and self.room.isBootcamp:
                                                                self.bootcampcount += 1
                                                                if self.privilegeLevel != 0:
                                                                        if self.bootcampcount in self.bootcampTitleCheckList:
                                                                                unlockedtitle=self.bootcampTitleDictionary[self.bootcampcount]
                                                                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                self.BootcampTitleList=self.BootcampTitleList+[unlockedtitle]
                                                                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                if self.privilegeLevel==10:
                                                                                        self.titleList = self.titleList+["440","442","444","201"]
                                                                                if self.privilegeLevel==8:
                                                                                        self.titleList = self.titleList+["442","444"]
                                                                                if self.privilegeLevel==5:
                                                                                        self.titleList = self.titleList+["442"]        
                                                                                self.titleList = filter(None, self.titleList)
                                                                                self.sendTitleList()
                                                        self.sendPlayerGotCheese(self.playerCode, self.score, place, timeTaken)
                                                        if int(self.room.getPlayerCount())>=3:
                                                                if self.room.isDoubleMap:
                                                                        if self.room.checkIfDoubleShamansAreDead():
                                                                                self.send20SecRemainingTimer()
                                                                elif self.room.checkIfShamanIsDead():
                                                                        self.send20SecRemainingTimer()
                                                                else:
                                                                        pass
                                                                if self.room.checkIfTooFewRemaining():
                                                                        self.send20SecRemainingTimer()
                                                                        self.room.checkShouldChangeWorld()
                                elif eventToken2 == "\x1f":
                                        # +1 POINT DEFILANTE ROOMS
                                        if self.room.isDefilante:
                                                self.defilantePoints += 1
                                elif eventToken2 == "J`":
                                        #reviver ratos #Habi
                                        x = struct.unpack('!hhh', data[:6]) [0]
                                        y = struct.unpack('!hhh', data[:6]) [1]
                                        ne = struct.unpack('!hhh', data[:6]) [2]
                                        for player in self.room.clients.values():
                                                if not player.playerCode == self.room.currentShamanCode:
                                                        player.sendData("\x05\x10", struct.pack("!hhh", int(x), int(y), int(ne)), True)
                                elif eventToken2 == "J\x06":
                                        #tirar objeto #Habi
                                        data=struct.unpack('!h', data[:2])[0]
                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", data))
                                elif eventToken2 == "J\x14":
                                        #converter objeto #Habi
                                        data=struct.unpack('!h', data[:2])[0]
                                        self.room.sendAllBin("\x05\x0D", struct.pack("!h", data) + "\x00") 
                                elif eventToken2 == "\x0b":
                                        #Ice Cube Placement
                                        if self.isShaman and not self.isDead or self.privilegeLevel >= 10:
                                                TargetCode = struct.unpack("!i", data[:4])[0]
                                                if not self.IcedMouses == 0:
                                                        if self.playerCode != TargetCode:
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                if client.playerCode == TargetCode:
                                                                                        if not client.isDead:
                                                                                                if not client.isShaman:
                                                                                                        if client.room.iceenabled:
                                                                                                                client.isDead=True
                                                                                                                client.sendPlayerDied(client.playerCode, client.score)
                                                                                                                code, x, y, origin = [54, struct.unpack("!h", data[4:][:2])[0], struct.unpack("!h", data[4:][2:])[0], 1]
                                                                                                                self.spawnObject(code, x, y, origin)
                                                                                                                self.IcedMouses -= 1
                                                                                                                client.room.checkShouldChangeWorld()
                                                                                                        else:
                                                                                                                self.sendData("\x06" + "\x14",["<R>Aguarde algum rato entrar na toca para poder congelar alguem!"])
                                elif eventToken2 == "6":
                                        codePartieEnCours, playerCheeseDistance = struct.unpack('!ih', data[:6])
                                        #client got cheese
                                        if codePartieEnCours==self.room.CodePartieEnCours:
                                                if self.hasCheese:
                                                        pass
                                                else:
                                                        self.room.sendAll("\x05\x13", [str(self.playerCode)])
                                                        self.hasCheese=True
                                                        self.room.numGotCheese += 1
                                                        if self.room.currentWorld == 900:
                                                                self.sendData("\x05\x5A\x01", [], True)
                                                        if self.room.isEventMap:
                                                                for playerCode, client in self.room.clients.items():
                                                                        if client.playerCode == client.room.getHighestPlayer():
                                                                                client.vel -= 1
                                                                                client.room.sendAllBin("\x08\x25",struct.pack("!i", int(client.playerCode))+struct.pack("!b", client.vel))
                                                        if self.room.currentWorld in [108,109,110,111,112,113,114]:
                                                                if self.room.numGotCheese>=10:
                                                                        self.room.killShaman()
                                elif eventToken2 == "`": 
                                        #PlacementObjet
                                        if self.room.isTotemEditeur:
                                                if self.LoadCountTotem == False:
                                                    self.room.identifiantTemporaire = self.Totem[0]
                                                    self.LoadCountTotem = True
                                                else:
                                                    pass
                                                if self.room.identifiantTemporaire == -1:
                                                        self.room.identifiantTemporaire = 0
                                                if not self.room.identifiantTemporaire > 20:
                                                        self.room.identifiantTemporaire+=1
                                                        self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                        id, code, px, py, angle, vx, vy, dur=struct.unpack('!hhhhhhbb', data)
                                                        self.Totem[0]=self.room.identifiantTemporaire
                                                        self.Totem[1]=self.Totem[1]+"#2#"+str(int(code))+"\x01"+str(int(px))+"\x01"+str(int(py))+"\x01"+str(int(angle))+"\x01"+str(int(vx))+"\x01"+str(int(vy))+"\x01"+str(int(dur))
                                                        data=struct.pack('!ihhhhbb', code, px, py, angle, vx, vy, dur)
                                                        self.room.sendAllOthersBin(self, '\x05\x14', data)
                                        else:
                                                id, code, px, py, angle, vx, vy, dur=struct.unpack('!hhhhhhbb', data)
                                                data=struct.pack('!hhhhhhbb', id, code, px, py, angle, vx, vy, dur)
                                                if self.isSyncroniser or self.isShaman:
                                                        if code == 36:
                                                                for player in self.room.clients.values():
                                                                        if self.playerCode != player.playerCode:
                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                if not self.isBecerikullanma:
                                                                                                        self.isBecerikullanma = True
                                                                                                        player.sendData("\x1B" + "\x0A", [], True)
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 37:
                                                                for player in self.room.clients.values():
                                                                        if self.playerCode != player.playerCode:
                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                if not self.isBecerikullanma:
                                                                                                        self.isBecerikullanma = True
                                                                                                        player.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(self.posX), int(self.posY), 0, 0, 0, 0), True)
                                                                                                        self.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(self.posX), int(self.posY)))
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 38:
                                                                        for player in self.room.clients.values():
                                                                                if player.isDead:
                                                                                        if not player.isHole:
                                                                                                if not self.diriltme == 0:
                                                                                                        self.diriltme -= 1
                                                                                                        player.isDead = False
                                                                                                        player.iskelet = True
                                                                                                        player.room.sendAll("\x08" + "\x08",[player.getPlayerDataDir(), "1"])
                                                                                                        player.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(px), int(py)))
                                                                                                        player.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(px), int(py), 0, 0, 0, 0), True)
                                                        if code == 42:
                                                                self.room.sendAllBin("\x05" + "\x0E", struct.pack("!hhb", int(px), int(py), 3))#Defilante zıplama
                                                        if code == 43:
                                                                self.room.sendAllBin("\x05\x0E", struct.pack("!hhb", int(px), int(py), 1))#Defilante hız
                                                        if code == 44:
                                                                if not self.UTotem:
                                                                        self.sendTotem(self.STotem[1], px, py, self.playerCode)
                                                                        self.UTotem=True
                                                        if code == 47:
                                                               if self.room.iceenabled and not self.isBecerikullanma:
                                                                        for player in self.room.clients.values():
                                                                                if player.hasCheese and self.playerCode != player.playerCode:
                                                                                        if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                                if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                        self.room.iceenabled = True
                                                                                                        player.isDead = True
                                                                                                        player.isHole = True
                                                                                                        self.isBecerikullanma = True
                                                                                                        if player.room.autoRespawn or player.room.isTribehouseMap:
                                                                                                                timeTaken = int( (getTime() - player.playerStartTime)*100 )
                                                                                                        else:
                                                                                                                timeTaken = int( (getTime() - player.room.gameStartTime)*100 )
                                                                                                        player.room.numCompleted += 1
                                                                                                        if int(player.room.getPlayerCount(True))>=2 and self.room.countStats:
                                                                                                                player.score = int(player.score)+10
                                                                                                                player.cheesecount += 1
                                                                                                                player.shopcheese += 1
                                                                                                                if not player.privilegeLevel==0:
                                                                                                                        l = player.levelcount.split('/')
                                                                                                                        lks = 20
                                                                                                                        if l[0] > 30:
                                                                                                                                player.nextlevel += 20
                                                                                                                                if int(l[0]) < int(player.nextlevel) or int(l[0]) == int(player.nextlevel):
                                                                                                                                        ns = (int(player.nextlevel)-int(l[0]))
                                                                                                                                        if not ns == 0:
                                                                                                                                                lks = int(ns)
                                                                                                                                                player.nextlevel = int(ns)
                                                                                                                                        else:
                                                                                                                                                player.nextlevel = 0
                                                                                                                                        lehel = int(l[0])+1
                                                                                                                                        z = int(lehel)*2
                                                                                                                                        n=int(z)+int(l[0])
                                                                                                                                        player.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                                                                        player.levelcount = str(lehel)+"/"+str(n)
                                                                                                                                else:
                                                                                                                                        pass
                                                                                                                                player.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                                                                        else:
                                                                                                                                lks = 10
                                                                                                                                player.nextlevel += 10
                                                                                                                                if int(l[0]) < int(player.nextlevel) or int(l[0]) == int(player.nextlevel):
                                                                                                                                        ns = (int(player.nextlevel)-int(l[0]))
                                                                                                                                        if not ns == 0:
                                                                                                                                                lks = int(ns)
                                                                                                                                                player.nextlevel = int(ns)
                                                                                                                                        else:
                                                                                                                                                player.nextlevel = 0
                                                                                                                                        lehel = int(l[0])+1
                                                                                                                                        z = int(lehel)*10
                                                                                                                                        n=int(z)+int(l[0])
                                                                                                                                        player.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                                                                        player.levelcount = str(lehel)+"/"+str(n)
                                                                                                                                else:
                                                                                                                                        pass
                                                                                                                                player.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                                                                player.sendData("\x08\x02", struct.pack("!bb", 0, 1), True)
                                                                                                                if player.privilegeLevel>=0:
                                                                                                                        if player.cheesecount in player.cheeseTitleCheckList:
                                                                                                                                unlockedtitle=player.cheeseTitleDictionary[player.cheesecount]
                                                                                                                                player.sendUnlockedTitle(player.playerCode, unlockedtitle)
                                                                                                                                player.CheeseTitleList=player.CheeseTitleList+[unlockedtitle]
                                                                                                                                player.titleList = ["0"]+player.GiftTitleList+player.ShamanTitleList+player.HardModeTitleList+player.CheeseTitleList+player.FirstTitleList+player.ShopTitleList+player.BootcampTitleList
                                                                                                                                if player.privilegeLevel==10:
                                                                                                                                        player.titleList = player.titleList+["440","442","444","201"]                                                                                                                                         
                                                                                                                                if player.privilegeLevel==8:
                                                                                                                                        player.titleList = player.titleList+["442","444"]
                                                                                                                                if player.privilegeLevel==5:
                                                                                                                                        player.titleList = player.titleList+["442"]
                                                                                                                                player.titleList = filter(None, player.titleList)
                                                                                                                                player.sendTitleList()
                                                                                                        self.sendPlayerGotCheese(player.playerCode, player.score, self.room.numCompleted, timeTaken)
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 56:
                                                                self.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(px), int(py), 0, 0, 0, 0), True)
                                                                self.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(px), int(py)))
                                                        if code == 55:
                                                                if self.room.iceenabled:
                                                                        if self.hasCheese:
                                                                                for player in self.room.clients.values():
                                                                                        if not player.hasCheese and not self.isBecerikullanma:
                                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                                self.isBecerikullanma = True
                                                                                                                self.room.sendAllBin("\x08\x13", struct.pack("!i", self.playerCode))#Defilante hız
                                                                                                                self.room.sendAll("\x05\x13", [str(player.playerCode)])
                                                                                                                player.hasCheese = True
                                                                                                                self.hasCheese = False
                                                                                                                reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 57:
                                                                if self.room.bulut1 == 1:
                                                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", int(self.room.bulut2)))
                                                                        self.room.bulut2 = id
                                                                else:
                                                                        self.room.bulut2 = id
                                                                        self.room.bulut1 = 1
                                                        if code == 61:
                                                                if self.room.arkadaslik1 == 1:
                                                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", int(self.room.arkadaslik2)))
                                                                        self.room.arkadaslik2 = id
                                                                else:
                                                                        self.room.arkadaslik2 = id
                                                                        self.room.arkadaslik1 = 1
                                                        self.room.sendAllOthersBin(self, "\x05\x14", data)
                                                        self.room.objectid = id       
                                                else:
                                                        pass                                                      
                                elif eventToken2 == "\x14":
                                        #Invisification
                                        if self.invisification == 0:        
                                                self.room.sendAllBin("\x05\x0d" + str(data) + "\x00")
                                                self.invisification+=1

                                        elif self.invisification == 1:        
                                                self.room.sendAllBin("\x05\x0d" + str(data) + "\x01")
                                                self.invisification-=1
                                elif eventToken2 == "\x06":
                                        #Delet object
                                        self.room.sendAllBin("\x05\x0f" + str(data)) 
                                elif eventToken2 == "\x1b":
                                        #DestructionObjet
                                        if self.isSyncroniser:
                                                self.room.sendAllBin("\x05\x18", data)
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Unimplemented Error: DestructionObjet-"+repr(eventTokens)+"-DATA:"+repr(data)
                                        print "Unimplemented Error: DestructionObjet-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == "4":
                                if eventToken2 == "4":
                                       #Chat Message
                                        utflength=struct.unpack('!h', data[:2])[0]
                                        utfstring=data[2:utflength+2]
                                        message = utfstring
                                        message = message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        if len(message) >= 201:
                                                self.transport.loseConnection()
                                                message=""
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                dv = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" Enviando Múltiplas da Mesma Mensagens de Bate-Papo.")
                                                        self.server.userflood.append("<VP>Jogador: <R>"+self.username+" <VP>está enviando múltiplas mensagens de bate-papo:<J>"+message+".")													
                                                #verificação de blacklist
												#Verificar divulgação...
                                                messagex = message.replace(" ", "")
                                                for site in self.server.blacklist:
                                                        if re.search(site, messagex.lower()):
                                                                dv = True	
															
                                                if dv:
                                                        self.enterRoom("*bad girls")
                                                        if self.server.banPlayer(self.username, "999", "Divulgação", "Servidor"):													        											
                                                                self.server.sendModChat(self, "\x06\x14", ["<BL>O Servidor baniu <VP>"+self.username+" <BL>por 999 horas. Razão: Divulgação Link: <VP>["+message+"]"], False)
                                                        else:
                                                                pass
                                                        message=""
														# verificação de http
                                                #Verificar divulgação...
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                dv2 = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" sent multiple of the same chat message.")												
                                                messagex = message.replace(" ", "")
                                                if re.search("http://www.", message.lower()):
                                                        dv2 = True
                                                elif re.search(".xpg", message.lower()):
                                                        dv2 = True
                                                elif re.search("www.", message.lower()):
                                                        dv2 = True                                                         
                                                elif re.search(".com.br", message.lower()):
                                                        dv2 = True													
                                                        if re.search(site, messagex.lower()):
                                                                dv2 = True																	
																
                                                if dv2:
                                                        if self.server.sendModChat(self, "\x06\x14", ["<BL>Usuário <VP>"+self.username+" <BL>fez uma divulgação de link, se o link estiver relacionado a outros servidores digite: /ablack <VP>"+message+""], False) or self.sendData("\x06" + "\x14",["Woooohoooo! <ROSE>"+self.username+" <BL>é proibido divulgar links em nosso servidor :( Se o link em questão for de algum servidor será adicionado na blacklist.<BR><ROSE>["+message+"]"]):	
                                                                self.sendData("\x06" + "\x14",["Divulgação"])																
                                                        else:
                                                                pass
                                                        message=""														
												#COMANDOS EM LUA# INICIO:

################################### ROOM RATAPULT #############################

                                        if message == "!amarelo":
                                                if self.room.isRatapult:
                                                        if not self.istimeama:                                                        
                                                                furnonome = "ffd200"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
                                                                self.sendData("\x06"+"\x14",["<font color='#ffd200'>Nome amarelo ativado."])
                                                                self.movePlayer(str(self.username), int(60), int(350), False, 0, 0, False)																																
                                                        else:
                                                                        if self.istimeama:
                                                                                self.istimeama = False
                                                                                self.sendData("\x06"+"\x14",["<R>Você já entrou no time amarelo"])							

                                        if message == "!vermelho":												                                                
                                                if self.room.isRatapult:
                                                        if not self.istimever:
                                                                self.istimever = True                                                        
                                                                furnonome = "c16464"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
                                                                self.sendData("\x06"+"\x14",["<font color='#c16464'>Nome vermelho ativado."])
                                                                self.movePlayer(str(self.username), int(750), int(350), False, 0, 0, False)
                                                        else:
                                                                        if self.istimever:
                                                                                self.istimever = False
                                                                                self.sendData("\x06"+"\x14",["<R>Você já entrou no time vermelho"])							
													

                                                        ###### FIM RATAPULT ######

                                                        
														############## Music ################
                                        if message == "!stopmod":
                                                if self.room.isMusic:	
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:											
														for playerCode, client in self.room.clients.items():												
															client.isDead = True
															client.sendPlayerDied(self.playerCode, self.score)
															client.room.checkShouldChangeWorld()																												
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>parou as músicas brutalmente!"])
															client.sendData("\x1A" + "\x0C",["#"])
                                        elif message.startswith("!dj "):
                                                if self.room.isMusic:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:
                                                                if self.room.getPlayerCode(username)!=0:
                                                                        self.room.forceNextShaman = self.room.getPlayerCode(username)												  
                                        if message == "!list":														
                                                if self.room.isMusic:																														
														self.sendData("\x06"+"\x14",["<VP>Play Hard - <J>!music1"])	
														self.sendData("\x06"+"\x14",["<VP>McAnitta Show das poderosas - <J>!music2"])
														self.sendData("\x06"+"\x14",["<VP>Kill Everybody - <J>!music3"])	
														self.sendData("\x06"+"\x14",["<VP>Naldo Exagerado - <J>!music4"])	
														self.sendData("\x06"+"\x14",["<VP>Naldo Amor de chocolate - <J>!music5"])
														self.sendData("\x06"+"\x14",["<VP>Mc Federado AH LEK LEK LEK! - <J>!music6"])
														self.sendData("\x06"+"\x14",["<VP>Charlie Brown Céu Azul - <J>!music7"])
														self.sendData("\x06"+"\x14",["<VP>Harlem Shake - <J>!music8"])
														self.sendData("\x06"+"\x14",["<VP>Don't You Worry Child - <J>!music9"])
														self.sendData("\x06"+"\x14",["<VP>David Guetta Where Them Girls - <J>!music10"])
														self.sendData("\x06"+"\x14",["<VP>Florida I Cry - <J>!music11"])
														self.sendData("\x06"+"\x14",["<VP>Florida Whistle - <J>!music12"])														
														
                                        if message == "!stop":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["#"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>parou a execução de músicas!"])														
                                        if message == "!music1":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://tegos.ru/new/mp3_full/David_Guetta_feat_Ne-Yo_and_Akon_-_Play_Hard.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Play Hard!"])
                                        if message == "!music2":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://a.tumblr.com/tumblr_mm5bdbKwYM1qcuk4to1.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música McAnitta Show das poderosas!"])
                                        if message == "!music3":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://lsd-25.ru/uploads/Kill%20Everybody%20(DnB%20Drive).mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Kill Everybody!"])
                                        if message == "!music4":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://dc501.4shared.com/img/1620988368/bf499c27/dlink__2Fdownload_2F33EX8FcN_3Ftsid_3D20130604-20048-daa16040/preview.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Naldo - Exagerado!"])
                                        if message == "!music5":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://www2.metropolitanafm.com.br/wp-content/uploads/audios/Amor%20de%20chocolate%20-%20Mc%20Naldo.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Naldo - Amor de chocolate!"])
                                        if message == "!music6":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://www.ouvertronic.net/wp-content/uploads/2013/03/Mc-Federado-Aaahh-Le-Lek-Lek-Lek-Pankadaodjkilesse.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Mc Federado - AH LEK LEK LEK!"])
                                        if message == "!music7":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://dc299.4shared.com/img/1630568642/6f39abd4/dlink__2Fdownload_2FwUcbmq9Q_3Ftsid_3D20130604-14636-6ec43190/preview.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Charlie Brown - Céu Azul!"])
                                        if message == "!music8":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://mp3poolonline.com/files/private/mp32/Baauer%20-%20Harlem%20Shake.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Harlem Shake!"])
                                        if message == "!music9":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://a.tumblr.com/tumblr_mhi3r10lIo1s4jg52o1.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Swedish House Mafia ft. John Martin - Don't You Worry Child!"])
                                        if message == "!music10":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://lachibe1.free.fr/Guide%20de%20survie%20musical%20/01-david_guetta-where_them_girls_at_(ft._nicki_minaj_and_flo_rida).mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música David Guetta - Where Them Girls!"])
                                        if message == "!music11":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://djyellow.com/wp-content/uploads/2012/music/Florida_-_I_Cry.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Florida - I Cry!"])
                                        if message == "!music12":
                                                if self.room.isMusic:
                                                  if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():																												
															client.sendData("\x1A" + "\x0C",["http://o5wap.ru/content/mp3/full/8/8/a/Flo_Rida_-_Whistle.mp3"])
															client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>executou a música Florida - Whistle!"])
                                        elif message.startswith("!m "):	
                                                if self.room.isMusic:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#37BADE'><b>• [Moderador da sala "+self.username+"] "+message+"</b></font>"])															
															
														##########Room Shafly#########
                                                                                        
                                        if message in ("!cima", "!c"):
                                                if self.room.isTestingRoom:																								
														self.movePlayer(self.username, 0, 0, True, 0, -100, True)
                                        if message in ("!baixo", "!b"):
                                                if self.room.isTestingRoom:																								
														self.movePlayer(self.username, 0, 0, True, 0, 100, True)	
                                        if message in ("!direita", "!d"):
                                                if self.room.isTestingRoom:																								
														self.movePlayer(self.username, 100, 0, True, 0, 50, True)	
                                        if message in ("!esquerda", "!e"):
                                                if self.room.isTestingRoom:																								
														self.movePlayer(self.username, -100, 0, True, 0, 50, True)	
                                        if message in ("!she", "!se"):	
                                                if self.room.isTestingRoom:			#esquerda								
											if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:
														for playerCode, client in self.room.clients.items():
															client.room.sendAll("\x05"+"\x16", ["-10", "10"])
                                        if message in ("!shc", "!sc"):
                                                if self.room.isTestingRoom:			#cima								
											if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:
														for playerCode, client in self.room.clients.items():
															client.room.sendAll("\x05"+"\x16", ["0", "-10"])	
                                        if message in ("!shd", "!sd"):
                                                if self.room.isTestingRoom:			#direita								
											if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:
														for playerCode, client in self.room.clients.items():
															client.room.sendAll("\x05"+"\x16", ["10", "10"])	
                                        if message in ("!shb", "!sb"):
                                                if self.room.isTestingRoom:			#baixo								
											if self.isShaman or self.username in ["Hangover", "Dipper", "Karicom"]:
														for playerCode, client in self.room.clients.items():
															client.room.sendAll("\x05"+"\x16", ["0", "10"])															
														
														######### TESTING ########																												
                                        elif message.startswith("!m "):	
                                                if self.room.isTestingRoom:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#37BADE'><b>• [Moderador da sala "+self.username+"] "+message+"</b></font>"])		
                                        elif message.startswith("!kill "):
                                                if self.room.isTestingRoom:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                        for room in self.server.rooms.values():
                                                                for playerCode, client in room.clients.items():
                                                                                codingz = client.playerCode
                                                        resetpscore = 0
                                                        self.sendPlayerDied(codingz, resetpscore)
														# Habbit
                                        elif message.startswith("!m "):	
                                                if self.room.isHabbit:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#37BADE'><b>• [Moderador da sala "+self.username+"] "+message+"</b></font>"])														

                                        if message == "!fly":
                                                if self.room.isHabbit:										
                                                        if self.speeding:
                                                                self.speeding = False
                                                                self.disableKey(32)
                                                                self.sendData("\x06\x14", ["Desativado."])
                                                        else:
                                                                self.speeding = True
                                                                self.enableKey(32)
                                                                self.sendData("\x06\x14", ["Ativado."])
                                                                           
                                        if message == "!habbit":
                                                if self.room.isHabbit:
                                                        self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
                                                        self.sendData("\x06" + "\x14", ["<CH>Habbit Ativado!"]) 
                                        if message == "!hack":
                                                if self.room.isHabbit:
                                                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 100))
                                                        self.sendData("\x06" + "\x14", ["<CH>Hacker Ativado!"])														
                                        if message == "!hallbit":
                                                if self.room.isHabbit:
                                                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 50))
                                                        self.sendData("\x06" + "\x14", ["<CH>Hallbit Ativado!"])
                                        if message == "!active":
                                                if self.room.isHabbit:														
														self.vel = 100
														self.setNameColor(self.playerCode, "010101")
														self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
														self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", self.vel))
														self.sendData("\x06" + "\x14", ["<CH>Super active!"])
                                        if message == "!mort":
                                                if self.room.isHabbit:		
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:												
													for playerCode, client in self.room.clients.items():												
														client.isDead = True
														client.sendPlayerDied(self.playerCode, self.score)
														client.room.checkShouldChangeWorld()																												
														client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>matou todos!"])
                                        elif message.startswith("!s "):
                                                if self.room.isHabbit:														
															site = event_raw.split(" ", 1)[1]
															self.setNameColor(self.playerCode, "010101")
															self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
															self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", site))														
                                        if message == "!fly":
                                                if self.room.isHabbit:										
                                                        if self.voar:
                                                                self.voar = False
                                                                self.disableKey(32)
                                                                self.sendData("\x06\x14", ["Modo voo: Desativado."])
                                                        else:
                                                                self.voar = True
                                                                self.enableKey(32)
                                                                self.sendData("\x06\x14", ["Modo voo: Ativado."])														
																	#Habbit Fim
                                        if message == "!flyvamp":
                                                if self.room.isHabbit:										
                                                        if self.voar:
                                                                self.voar = False
                                                                self.disableKey(32)
                                                                self.sendData("\x06\x14", ["Modo voo: Desativado."])
                                                                self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))																
                                                        else:
                                                                self.voar = True
                                                                self.enableKey(32)
                                                                self.sendData("\x06\x14", ["Modo voo: Ativado."])
                                                                self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))															
																	#Habbit Fim																	
														
                                                        
                                        if message == "!vampire":
                                                if self.room.isTestingRoom:	
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                                for playerCode, client in self.room.clients.items():												
                                                                    client.room.sendAllBin("\x08\x42", struct.pack("!l", int(client.playerCode)))	
                                        if message == "!meep":
                                                if self.room.isTestingRoom:	
												        if self.username in ["Hangover", "Dipper", "Karicom"]:
															self.canMeep = True
															self.sendData("\x08\x27", None, True)																	
                                        if message == "!meepmode":
                                                if self.room.isTestingRoom:		
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:													
                                                        self.room.sendAllBin("\x08\x27")
                                                        for room in self.server.rooms.values():
                                                                for playerCode, client in room.clients.items():
                                                                        client.canMeep = True	
                                        if message == "!np":
                                                if self.room.isTestingRoom:	
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:												
													for playerCode, client in self.room.clients.items():												
														client.isDead = True
														client.sendPlayerDied(self.playerCode, self.score)
														client.room.checkShouldChangeWorld()																												
														client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>usou o NP"])																		  
                                        if message == "!mort":
                                                if self.room.isTestingRoom:		
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:												
													for playerCode, client in self.room.clients.items():												
														client.isDead = True
														client.sendPlayerDied(self.playerCode, self.score)
														client.room.checkShouldChangeWorld()																												
														client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>matou todos!"])										
                                        if message == "!suicide":														
                                                if self.room.isTestingRoom:		
														self.isDead = True
														self.sendPlayerDied(self.playerCode, self.score)
														self.room.checkShouldChangeWorld()																												
														self.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>Você se suicidou!"])	
                                        if message == "!voar":
                                                if self.room.isTestingRoom:											
														self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))													
														self.movePlayer(self.username, 0, 0, True, 0, -100, True)													
                                        if message == "!vamp":
                                                if self.room.isTestingRoom:										
												   self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))										
                                        if message == "!color":											
                                                if self.room.isTestingRoom:
                                                  if self.username in ["Hangover", "Dipper", "Karicom"]:												
                                                    for playerCode, client in self.room.clients.items():												
                                                      if not client.isCornonome2:														
                                                              client.isCornonome2 = True
                                                              furnonome = "1BE378"																
                                                              hexcolor = struct.pack('!i', int(furnonome, 16))
                                                              client.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                              client.sendData("\x06"+"\x14",["<ROSE>Seu Nome Está Rosa."])
                                                      else:																
                                                              if self.isCornonome:
                                                                      client.isCornonome = False																
                                                                      client.sendData("\x06"+"\x14",["<R>Desativado"])														
										##### TRIBEWAROOM ##########
                                        if message == "!nextpart":
                                                if self.room.isTribewarRoom:
                                                    if self.username in ["Hangover", "Dipper", "Karicom"]:                                                     
                                                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(5)))
                                                                self.room.sendAll("\x1A" + "\x04", ["<J>• Nova partida iniciada por:<VP> "] + [self.username])                                                                    
                                        if message == "!np":
                                                if self.room.isTribewarRoom:	
                                                    if int(self.TribeRank) >= 8:											
													for playerCode, client in self.room.clients.items():												
														client.isDead = True
														client.sendPlayerDied(self.playerCode, self.score)
														client.room.checkShouldChangeWorld()																												
														client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>usou o NP"])																		  
                                        if message == "!mort":
                                                if self.room.isTribewarRoom:	
                                                    if int(self.TribeRank) >= 8:												
													for playerCode, client in self.room.clients.items():												
														client.isDead = True
														client.sendPlayerDied(self.playerCode, self.score)
														client.room.checkShouldChangeWorld()																												
														client.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>matou todos!"])	
                                        elif message.startswith("!m "):	
                                                if self.room.isTribewarRoom:	
                                                    if int(self.TribeRank) >= 8:										
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#37BADE'><b>• [Shaman da tribo "+self.username+"] "+message+"</b></font>"])
                 
									#COMANDOS EM LUA# FIM
										#####		Halloween - @1036
                                                                                        
                                        if message == "bonbon":
                                                if str(self.room.ISCM) == "1036":
                                                        self.titleList = self.titleList+["287"]
                                                        self.sendUnlockedTitle(self.playerCode, "287") 														
                                        if message!="":
                                                self.lastmessage=message.strip()
                                                playerCode=struct.pack("%sL" % "!", int(self.playerCode))
                                                username=struct.pack('!h', len(self.username))+self.username
                                                #sendMessage=struct.pack('!h', len(message))+message
                                                if not self.mumute:
                                                        if not self.privilegeLevel==0:
                                                                if self.modmute:
                                                                        timee=int(self.timestampCalc(self.server.getModMuteInfo(self.username)[1])[2])
                                                                        if timee<=0:
                                                                                self.modmute=False
                                                                                self.server.removeModMute(self.username)
                                                                                self.room.sendAllChat(playerCode, username, message)
                                                                        else:
                                                                                self.sendModMute(self.username, timee, self.server.getModMuteInfo(self.username)[2])
                                                                else:
                                                                        if not self.chatcolored:
                                                                                self.room.sendAllChat(playerCode, username, message)
                                                                        else:
                                                                                self.room.sendAllChatColored(playerCode, username, message)
                                                else:
                                                        if not self.chatcolored:
                                                                self.room.sendAllChatF(playerCode, username, message, self)
                                                        else:
                                                                self.room.sendAllChatFColored(playerCode, username, message)
                                elif eventToken2 == "h":
								#Whisper
                                        nameLength=struct.unpack('!h', data[:2])[0]
                                        username=data[2:nameLength+2]
                                        if not username.startswith("*"):
                                                username=username.lower()
                                                username=username.capitalize()
                                        data=data[nameLength+2:]
                                        messageLength=struct.unpack('!h', data[:2])[0]
                                        message=data[2:messageLength+2]
                                        message=message.replace("<","&lt;").replace("&#","&amp;#")
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                dv = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" Enviando Múltiplas da Mesma Mensagens de Bate-Papo.")
                                                #Verificar divulgação...
                                                messagex = message.replace(" ", "")
                                                for site in self.server.blacklist:
                                                        if re.search(site, messagex.lower()):
                                                                dv = True
                                                if dv:
                                                        self.enterRoom("*bad girls")
                                                        if self.server.banPlayer(self.username, "0", "Divulgação", "Servidor"):
                                                                self.server.sendModChat(self, "\x06\x14", ["<BL>O Servidor baniu <VP>"+self.username+" <BL>por 0 horas. Razão: Divulgação Link: <VP>["+message+"]"], False)
                                                        else:
                                                                pass
                                                        message=""
                                                #Verificar divulgação...
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                dv2 = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" sent multiple of the same chat message.")												
                                                messagex = message.replace(" ", "")
                                                if re.search("http://www.", message.lower()):
                                                        dv2 = True
                                                elif re.search(".xpg", message.lower()):
                                                        dv2 = True
                                                elif re.search("www.", message.lower()):
                                                        dv2 = True                                                         
                                                elif re.search(".com.br", message.lower()):
                                                        dv2 = True
                                                        if re.search(site, messagex.lower()):
                                                                dv2 = True																
                                                if dv2:
                                                        if self.server.sendModChat(self, "\x06\x14", ["<BL>Usuário <VP>"+self.username+" <BL>fez uma divulgação de link, se o link estiver relacionado a outros servidores digite: /ablack <VP>"+message+""], False) or self.sendData("\x06" + "\x14",["Woooohoooo! <ROSE>"+self.username+" <BL>é proibido divulgar links em nosso servidor :( Se o link em questão for de algum servidor será adicionado na blacklist.<BR><ROSE>["+message+"]"]):	
                                                                self.sendData("\x06" + "\x14",["Divulgação"])																
                                                        else:
                                                                pass
                                                        message=""														
									                                                        
                                        if message!="":
                                                pass 
                                                print str(datetime.today())+" "+"(%s) [c] %s: %r" % (self.room.name, self.username, "c "+username+" "+message)
                                        if not self.mumute:
                                                if not self.privilegeLevel==0:
                                                        if self.modmute:
                                                                timee=int(self.timestampCalc(self.server.getModMuteInfo(self.username)[1])[2])
                                                                if timee<=0:
                                                                        self.modmute=False
                                                                        self.server.removeModMute(self.username)
                                                                        if self.silence:
                                                                                self.sendDisableWhispers()
                                                                        else:
                                                                                if not self.server.sendPrivMsg(self, self.username, username, message):
                                                                                        self.sendPlayerNotFound()
                                                                                else:
                                                                                        pass
                                                                else:
                                                                        self.sendModMute(self.username, timee, self.server.getModMuteInfo(self.username)[2])
                                                        else:
                                                                if self.silence:
                                                                        self.sendDisableWhispers()
                                                                else:
                                                                        if not self.server.sendPrivMsg(self, self.username, username, message):
                                                                                self.sendPlayerNotFound()
                                                                        else:
                                                                                pass
                                        else:
                                                if not self.server.sendPrivMsgF(self, self.username, username, message):
                                                        self.sendPlayerNotFound()
                                elif eventToken2 == "V":
                                        # Tribe message
                                        messageLength=struct.unpack('!h', data[:2])[0]
                                        message=data[2:messageLength+2]
                                        message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        username=struct.pack('!h', len(self.username))+self.username
                                        sendMessage=struct.pack('!h', len(message))+message
                                        if self.isInTribe:
                                                self.server.sendWholeTribe(self, "\x06\x08", sendMessage+username, True)
										#Tribe message
                                        #Mensagem da Tribo
                                        messageLength=struct.unpack('!h', data[:2])[0]
                                        message=data[2:messageLength+2]
                                        message=message.replace("<","&lt;").replace("&#","&amp;#")
                                        username=struct.pack('!h', len(self.username))+self.username
                                        sendMessage=struct.pack('!h', len(message))+message
                                        message = message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                dv = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" sent multiple of the same chat message.")
                                                #Verificar divulgação...
                                                elif re.search("kaosmice.tk", message.lower()):
                                                        dv = True
                                                elif re.search("transforll.com", message.lower()):
                                                        dv = True
                                                elif re.search("transfor-next.com", message.lower()):
                                                        dv = True
                                                elif re.search("room32.dyndns.org", message.lower()):
                                                        dv = True
                                                elif re.search("transfor-next.com", message.lower()):
                                                        dv = True
                                                elif re.search("transformice-hole.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("transformine.com", message.lower()):
                                                        dv = True
                                                elif re.search("mitomice.com", message.lower()):
                                                        dv = True
                                                elif re.search("onmachine.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("thtmice.xpg.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("transforac.org", message.lower()):
                                                        dv = True
                                                elif re.search("mitomice.com", message.lower()):
                                                        dv = True
                                                elif re.search("micemania.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("xtransformice.com", message.lower()):
                                                        dv = True
                                                elif re.search("crazzymice.com", message.lower()):
                                                        dv = True
                                                elif re.search("transforsc.de.nu", message.lower()):
                                                        dv = True
                                                elif re.search("ultimice.com", message.lower()):
                                                        dv = True
                                                elif re.search("transformito.com", message.lower()):
                                                        dv = True
                                                elif re.search("waremice.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("transforcheese.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("transforxild.tz.to", message.lower()):
                                                        dv = True
                                                elif re.search("transforgalaxy.com", message.lower()):
                                                        dv = True
                                                elif re.search("thundermices.xpg.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("micedown.de.nu", message.lower()):
                                                        dv = True
                                                elif re.search("viciousmice.de.nu", message.lower()):
                                                        dv = True
                                                elif re.search("fazendomice.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("fazendomice.de.nu", message.lower()):
                                                        dv = True
                                                elif re.search("aulamice.de.nu", message.lower()):
                                                        dv = True
                                                elif re.search("aulamice.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("createdmice.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("blogspot.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("Transforcoca", message.lower()):
                                                        dv = True
                                                elif re.search("www.micemaniacos.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("xpg.com.br", message.lower()):
                                                        dv = True
                                                elif re.search("transfornike", message.lower()):
                                                        dv = True
                                                elif re.search("w w w . h o l l y m i c e . c o m . b r . m s", message.lower()):
                                                        dv = True
                                                elif re.search("hollymice", message.lower()):
                                                        dv = True
                                                elif re.search("micetop.com.br", message.lower()):
                                                        dv = True
                                                elif re.search(".de.nu .de.vc .com.br.ms", message.lower()):
                                                        dv = True
                                                elif re.search("www.micemaniacos.com.br", message.lower()):
                                                        dv = True        
                                                if dv:
                                                        if self.server.sendModKick(self.username, 1, "Flood", "bot"):
                                                                self.server.sendModChat(self, "\x06\x14", ["botKicked calou "+self.username+" por 1 Hora : Flood"], False)                                                
                                elif eventToken2 == "\x05":
                                        # Sent Silence Command
                                        self.silenceData = "%s" % data
                                        if self.silence:
                                                self.silence = False
                                                self.sendEnableWhispers()
                                        else:
                                                self.silence = True
                                                self.sendDisableWhispers()
                                elif eventToken2 == "b":
                                        # Sent command
                                        command=struct.unpack("!b", data[:1])[0]
                                        commandValues=data[1:]
                                        utflength=struct.unpack('!h', commandValues[:2])[0]
                                        message = commandValues[2:utflength+2]
                                        
                                        message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")

                                        if command==0:
                                                message = message.replace("&lt;","<")
                                                logcommand="ms "+message
                                        elif command==1:
                                                logcommand="mss "+message
                                        elif command==2:
                                                logcommand="a "+message
                                        elif command==3:
                                                logcommand="m "+message
                                        elif command==4:
                                                logcommand="m* "+message
                                        elif command==5:
                                                logcommand="a* "+message
                                        elif command==6:
                                                logcommand="dm "+message
                                        elif command==7:
                                                logcommand="h "+message
					else:
                                                pass
                                        #logging.info("(%s) [c] %s: %s" % (self.room.name, self.username, logcommand))
                                        #print str(datetime.today())+" "+"(%s) [c] %s: %r" % (self.room.name, self.username, logcommand)

                                        if command==0: #ms
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendModMessage(0, message)
                                        elif command==1: #mss
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6:
                                                        self.sendServerMessage(message)
                                        elif command==2: #a
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==4 or self.privilegeLevel==3:
                                                        self.sendArbMessageChannel(self.username, message)
                                        elif command==3: #m
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendModMessageChannel(self.username, message)
                                        elif command==4: #m*
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendModMessageChannel2(self.username, message)
                                        elif command==5: #a*
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==4 or self.privilegeLevel==3:
                                                        self.sendArbMessageChannel2(self.username, message)
                                        elif command==6: #dm
                                                if self.privilegeLevel==10:
                                                        self.sendModServerMessageChannel(self.username, message)
                                        elif command==7: #h
                                                if  self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==4:
                                                        self.sendMapCrewMessageChannel(self.username, message)
					else:
                                                pass
                                else:
                                        #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Erro Implementado: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == "V":
                                if eventToken2 == "\x1f":
                                        # Send Report
                                        if self.cheesecount >= 5:
                                                namelen = struct.unpack("!h", data[:2])[0]
                                                name = data[2:namelen+2]
                                                data = data[namelen+2:]
                                                motive = struct.unpack("!b", data[:1])[0]
                                                data = data[1:]
                                                motivelen = struct.unpack("!h", data[:2])[0]
                                                comm = data[2:motivelen+2]
                                                if motive == 0:
                                                        motive = "Hack"
                                                elif motive == 1:
                                                        motive = "Spam / Flood"
                                                elif motive == 2:
                                                        motive = "Insultos"
                                                elif motive == 3:
                                                        motive = "Phishing"
                                                elif motive == 4:
                                                        motive = "Outros"
                                                if comm == "":
                                                        comm = "Sem Comentários."
                                                self.server.reportado.append("<BL>Report: <VP>Jogador: "+name+" <R>Foi reportado por: "+self.username+" <J>Motivo: "+str(motive)+" <CH>Comentario: "+comm+"")														
                                                self.server.sendModChat(self, "\x06\x14", ['<N>O seguinte jogador "<ROSE>'+self.username+'<N>" que está na sala "<ROSE>'+self.room.name+'<N>" está reportado o jogador "<ROSE>'+name+'<N>" por <ROSE>'+str(motive)+' <N>("<V>'+comm+'<N>")'])
                                                self.sendData("\x1A" + "\x09",["1"])
																																																
                                        else:
                                                pass
                                elif eventToken2 == "I":
                                        day = datetime.today()
                                        dayNow = str(day)[8:-16]
                
                                        if int(dayNow) == 1:
                                                self.shopcheese += 40;self.sendData("\x06\x14", ["Você Recebeu <J>40 <BL>Queijos"])

                                        elif int(dayNow) == 2:
                                                self.shopfraises += 60;self.sendData("\x06\x14", ["Você Recebeu <J>60 <BL>Morangos"])
												
                                        elif int(dayNow) == 3:
                                                self.sendUnlockItemNatal(3,25,325)

                                        elif int(dayNow) == 4:
                                                self.shopfraises += 10;self.sendData("\x06\x14", ["Você Recebeu <J>10 <BL>Morangos"])

                                        elif int(dayNow) == 5:
                                                self.sendUnlockItemNatal(4,15,415)

                                        elif int(dayNow) == 6:
                                                self.shopfraises += 10;self.sendData("\x06\x14", ["Você Recebeu <J>10 <BL>Morangos"])

                                        elif int(dayNow) == 7:
                                                self.shopcheese += 40;self.sendData("\x06\x14", ["Você Recebeu <J>40 <BL>Queijos"])

                                        elif int(dayNow) == 8:
                                                self.sendUnlockItemNatal(2,23,223)
												
                                        elif int(dayNow) == 9:
                                                self.shopfraises += 10;self.sendData("\x06\x14", ["Você Recebeu <J>10 <BL>Morangos"])

                                        elif int(dayNow) == 10:
                                                self.sendUnlockItemNatal(3,26,326)

                                        elif int(dayNow) == 11:
                                                self.shopcheese += 40;self.sendData("\x06\x14", ["Você Recebeu <J>40 <BL>Queijos"])
												
                                        elif int(dayNow) == 12:
                                                self.sendUnlockItemNatal(2,3,203)
												
                                        elif int(dayNow) == 13:
                                                self.sendUnlockItemNatal(4,3,403)
												
                                        elif int(dayNow) == 14:
                                                self.sendUnlockItemNatal(3,16,316)
												
                                        elif int(dayNow) == 15:
                                                self.sendUnlockItemNatal(2,12,212)
												
                                        elif int(dayNow) == 16:
                                                self.sendUnlockItemNatal(2,11,211)
												
                                        elif int(dayNow) == 18:
                                                self.sendUnlockItemNatal(0,85,85)
												
                                        elif int(dayNow) == 19:
                                                self.sendUnlockItemNatal(0,42,42)
												
                                        elif int(dayNow) == 20:
                                                self.sendUnlockItemNatal(0,92,92)
												
                                        elif int(dayNow) == 21:
                                                self.sendUnlockItemNatal(5,5,505)
												
                                        elif int(dayNow) == 22:
                                                self.sendUnlockItemNatal(0,94,94)
												
                                        elif int(dayNow) == 23:
                                                self.sendUnlockItemNatal(0,104,10104)
												
                                        elif int(dayNow) == 24:
                                                self.sendUnlockItemNatal(6,2,602)
												
                                        elif int(dayNow) == 25:
                                                self.sendUnlockItemNatal(0,85,85)											
												
                                elif eventToken2 == "l":
                                        # Select Idioma
                                        Langue = data
                                        self.updateLanguageUsuario(self.username, Langue)
                                elif eventToken2 == "\x01":
                                        #Retribuir Queijos #Habi
                                        if not self.becerilerim == "" or self.becerilerim == 0 or self.becerilerim == None or self.becerilerim == "0":
                                                lev = self.levelcount.split('/')
                                                level = lev[0]
                                                peynir = int(level)-1
                                                self.shopcheese -= int(peynir)
                                                self.becerilerim = 0
                                                self.becericount = 0
                                                dbcur.execute('UPDATE users SET becericount = ? WHERE name = ?', [self.becericount, self.username])
                                                dbcur.execute('UPDATE users SET becerilerim = ? WHERE name = ?', [self.becerilerim, self.username])
                                                self.sendData("\x08\x16\x00", [], True)
                                elif eventToken2 == "\x0b":
                                        # Puan #Habi #Comprar Habi
                                        datas = struct.unpack("!b",data[:1]) [0]
                                        self.sendShamanSkills(datas)
                                elif eventToken2 == "\r":
                                        # Player emote
                                        emote = struct.unpack("!b",data[:1])[0]
                                        self.sendPlayerEmote(self.playerCode,emote)
                                elif eventToken2 == "\x06":
                                        # Zombie Transformation
                                        #self.sendZombieMode()
                                        pass

                                elif eventToken2 == "\x04":
                                        #ping
                                        pass

                                elif eventToken2 == "&":
                                        # Meep
                                        meepx, meepy = struct.unpack('!hh', data[:4])
                                        if self.canMeep:
                                                if self.isShaman:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 10))
                                                else:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 5))
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 50))
                                                if self.room.isRalute:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 30))														
                                        else:
                                                print "hax?"
                                elif eventToken2 == "8":
                                        # Send Cheese, Heart and Fraise Count
                                        self.sendData("\x14\x0F", struct.pack('!iii', self.shopcheese, self.shopfraises, self.shopcoins), True)	
                                elif eventToken2 == "`":
                                        # Shop List
                                        self.sendShopList()                                       
                                elif eventToken2 == "R":
                                        # Souris Rose
                                        self.room.sendAllBin("\x08\x29", data + struct.pack("!i", int(self.playerCode)))
                                else:
                                        #logging.warning("# Open Shop & Player types - Unimplemented Binary %r" % eventTokens)
                                        print "Unimplemented Error: Souris Rose-"+repr(eventTokens)+"-DATA:"+repr(data)
					
                        elif eventToken1 == "\x1b":
                                if eventToken2 == "\r":
                                        # Enter Tribehouse
                                        self.enterRoom("*\x03"+self.tribe)
                                elif eventToken2 == "l":
                                        # Set Tribehouse Code
                                        tribehousecode = str(struct.unpack('!i', data[:4])[0])
                                        dbcur.execute('select * from mapeditor where code = ?', [str(tribehousecode)])
                                        rrf = dbcur.fetchone()
                                        if rrf is None:
                                                self.sendData("\x10" + "\x04",["16"])
                                        else:
                                                self.TribeHouse = tribehousecode
                                                dbcur.execute('UPDATE Tribu SET House = ? WHERE Code = ?', [self.TribeHouse, self.TribeCode])
                                                self.sendData("\x10\x02", struct.pack('!i', int(self.TribeHouse)), True)
                                                self.sendTribeGreeting()
                                else:
                                        #logging.warning("# Tribe - Unimplemented Binary %r" % eventTokens)
                                        print "# Tribe - Unimplemented Error: Tribehouse Code-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == "\x07":
                                if eventToken2 == "b":
                                        #Fraises
                                        if self.Langue == "br":
                                                self.sendData("\x1A" + "\x1A",["Voce pode adequerir queijos ou morangos firstando,Caso queira comprar VIP Contate a um administrador !"])
                                        elif self.Langue == "en":
                                                self.sendData("\x06" + "\x14",["Got cheese into hole in rooms with at least 5 players."])
                                        elif self.Langue == "es":
                                                self.sendData("\x06" + "\x14",["Entre en lo agujero en habitaciones con un mínimo de 5 jugadores."])
                                else:
                                        #logging.warning("# Buy Fraises - Unimplemented Binary %r" % eventTokens)
                                        print "# Buy Fraises - Unimplemented Error: Fraises-"+repr(eventTokens)+"-DATA:"+repr(data)

                        elif eventToken1 == "`":# `
                                if eventToken2 == "\x06":
                                        ## Shop Open
                                        self.sendShopList()
                                        #pass
                                        
                                elif eventToken2 == "\x0b":
                                        # Item Customization
                                        itemm, length = struct.unpack('!hb', data[:3])
                                        data = data[3:]
                                        customizations = []
                                        x = 0
                                        if int(x) == 2233232:
                                                pass
                                        else:
                                                while x < length:
                                                        if data[:4] == "":
                                                                break
                                                        else:
                                                                customizations.append(struct.unpack('!i', data[:4])[0])
                                                                data = data[4:]
                                                
                                                SplitList = self.shopitems.split(",")
                                                for Value in SplitList:
                                                        if "_" in Value:
                                                                theitem, custom = Value.split("_", 1)
                                                        else:
                                                                theitem = Value
                                                                custom = ""
                                                        if int(theitem) == int(itemm):
                                                                SplitList[SplitList.index(Value)] = theitem + "_" + "+".join(map(lambda x: ("%x" % ((x>>16)&0xFF)).rjust(2, "0") + ("%x" % ((x>>8)&0xFF)).rjust(2, "0") + ("%x" % (x&0xFF)).rjust(2, "0"), customizations))
                                                                self.shopitems = ",".join(SplitList)
                                                                
                                                                item = itemm
                                                                fullitem = str(item)
                                                                if int(item)>=100 and int(item) <=199:
                                                                        itemcategory=1
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=200 and int(item) <=299:
                                                                        itemcategory=2
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=300 and int(item) <=399:
                                                                        itemcategory=3
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=400 and int(item) <=499:
                                                                        itemcategory=4
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=500 and int(item) <=599:
                                                                        itemcategory=5
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=600 and int(item) <=699:
                                                                        itemcategory=6
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=700 and int(item) <=799:
                                                                        itemcategory=7
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=800 and int(item) <=899:
                                                                        itemcategory=8
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=900 and int(item) <=999:
                                                                        itemcategory=9
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=2100 and int(item) <=2199:
                                                                        itemcategory=21
                                                                        item=str(int(fullitem[2:]))
                                                                elif int(item)>=2200 and int(item) <=2299:
                                                                        itemcategory=22
                                                                        item=str(int(fullitem[2:]))
                                                                elif int(item)>=10101 and int(item) <=10199:
                                                                        itemcategory=0
                                                                        item=str(int(fullitem[1:]))
                                                                else:
                                                                        itemcategory=0
                                                                        item=item
                                                                itemo = item
                                                                item = str(item) + self.getItemCustomization(fullitem)
                                                                looktoplist = self.look.split(";")
                                                                looklist = looktoplist[1].split(",")
                                                                looklist2 = map(lambda i: i.split("_")[0] if "_" in str(i) else str(i), looklist)
                                                                if itemcategory==0:
                                                                        if "_" in looklist[0]:
                                                                                if looklist[0].split("_")[0] == str(itemo):
                                                                                        looklist[0]=str(item)
                                                                        elif looklist[0] == str(item):
                                                                                looklist[0]=str(item)
                                                                elif itemcategory==1:
                                                                        if "_" in looklist[1]:
                                                                                if looklist[1].split("_")[0] == str(itemo):
                                                                                        looklist[1]=str(item)
                                                                        elif looklist[1] == str(itemo):
                                                                                looklist[1]=str(item)
                                                                elif itemcategory==2:
                                                                        if "_" in looklist[2]:
                                                                                if looklist[2].split("_")[0] == str(itemo):
                                                                                        looklist[2]=str(item)
                                                                        elif looklist[2] == str(itemo):
                                                                                looklist[2]=str(item)
                                                                elif itemcategory==3:
                                                                        if "_" in looklist[3]:
                                                                                if looklist[3].split("_")[0] == str(itemo):
                                                                                        looklist[3]=str(item)
                                                                        elif looklist[3] == str(itemo):
                                                                                looklist[3]=str(item)
                                                                elif itemcategory==4:
                                                                        if "_" in looklist[4]:
                                                                                if looklist[4].split("_")[0] == str(itemo):
                                                                                        looklist[4]=str(item)
                                                                        elif looklist[4] == str(itemo):
                                                                                looklist[4]=str(item)
                                                                elif itemcategory==5:
                                                                        if "_" in looklist[5]:
                                                                                if looklist[5].split("_")[0] == str(itemo):
                                                                                        looklist[5]=str(item)
                                                                        elif looklist[5] == str(itemo):
                                                                                looklist[5]=str(item)
                                                                elif itemcategory==6:
                                                                        if "_" in looklist[6]:
                                                                                if looklist[6].split("_")[0] == str(itemo):
                                                                                        looklist[6]=str(item)
                                                                        elif looklist[6] == str(itemo):
                                                                                looklist[6]=str(item)
                                                                elif itemcategory==7:
                                                                        if "_" in looklist[7]:
                                                                                if looklist[7].split("_")[0] == str(itemo):
                                                                                        looklist[7]=str(item)
                                                                        elif looklist[7] == str(itemo):
                                                                                looklist[7]=str(item)
                                                                elif itemcategory==8:
                                                                        if "_" in looklist[8]:
                                                                                if looklist[8].split("_")[0] == str(itemo):
                                                                                        looklist[8]=str(item)
                                                                        elif looklist[8] == str(itemo):
                                                                                looklist[8]=str(item)
                                                                elif itemcategory==9:
                                                                        if "_" in looklist[9]:
                                                                                if looklist[9].split("_")[0] == str(itemo):
                                                                                        looklist[9]=str(item)
                                                                        elif looklist[9] == str(itemo):
                                                                                looklist[9]=str(item)
                                                                elif itemcategory==21:
                                                                        pass
                                                                elif itemcategory==22:
                                                                        pass
                                                                else:
                                                                        pass
                                                                
                                                                looktoplist[1] = json.dumps(looklist)
                                                                looktoplist[1] = looktoplist[1].strip('[]')
                                                                looktoplist[1] = looktoplist[1].replace("\"","")
                                                                looktoplist[1] = looktoplist[1].replace(" ","")
                                                                self.look = ";".join(map(str, looktoplist))
                                                                self.look = self.look.replace(" ","")
                                                                self.sendShopList()
                                                                self.sendLookChange()							

                                elif eventToken2 == "f":
                                        #equip item
                                        item = struct.unpack("!i", data[:6])[0]
                                        if self.checkInShop(item):
                                                fullitem = str(item)
                                                if int(item)>=100 and int(item) <=199:
                                                        itemcategory=1
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=200 and int(item) <=299:
                                                        itemcategory=2
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=300 and int(item) <=399:
                                                        itemcategory=3
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=400 and int(item) <=499:
                                                        itemcategory=4
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=500 and int(item) <=599:
                                                        itemcategory=5
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=600 and int(item) <=699:
                                                        itemcategory=6
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=2100 and int(item) <=2199:
                                                        itemcategory=21
                                                        item=str(int(fullitem[2:]))
                                                elif int(item)>=2200 and int(item) <=2299:
                                                        itemcategory=22
                                                        item=str(int(fullitem[2:]))
                                                elif int(item)>=10101 and int(item) <=10199:
                                                        itemcategory=0
                                                        item=str(int(fullitem[1:]))
                                                else:
                                                        itemcategory=0
                                                        item=item
                                                itemo = str(item)
                                                item = str(item) + self.getItemCustomization(fullitem)
                                                looktoplist = self.look.split(";")
                                                looklist = looktoplist[1].split(",")
                                                looklist2 = map(lambda i: i.split("_")[0] if "_" in str(i) else str(i), looklist)
                                                if itemcategory==0:
                                                        if looklist2[0]==str(itemo):
                                                                looklist[0]=0
                                                        else:
                                                                looklist[0]=str(item)
                                                elif itemcategory==1:
                                                        if looklist2[1]==str(itemo):
                                                                looklist[1]=0
                                                        else:
                                                                looklist[1]=str(item)
                                                elif itemcategory==2:
                                                        if looklist2[2]==str(itemo):
                                                                looklist[2]=0
                                                        else:
                                                                looklist[2]=str(item)
                                                elif itemcategory==3:
                                                        if looklist2[3]==str(itemo):
                                                                looklist[3]=0
                                                        else:
                                                                looklist[3]=str(item)
                                                elif itemcategory==4:
                                                        if looklist2[4]==str(itemo):
                                                                looklist[4]=0
                                                        else:
                                                                looklist[4]=str(item)
                                                elif itemcategory==5:
                                                        if looklist2[5]==str(itemo):
                                                                looklist[5]=0
                                                        else:
                                                                looklist[5]=str(item)
                                                elif itemcategory==6:
                                                        if looklist2[6]==str(itemo):
                                                                looklist[6]=0
                                                        else:
                                                                looklist[6]=str(item)
                                                elif itemcategory==21:
                                                        looktoplist[0] = 1
                                                        infos = self.server.mouseColorInfo(True, self.username, "")
                                                        if infos != []:
                                                                color1, color2 = infos
                                                                color = int(item)
                                                                newcolor = "78583a"
                                                                if color == 0 and color1 != "bd9067":
                                                                        newcolor = "bd9067"
                                                                elif color == 1 and color1 != "593618":
                                                                        newcolor = "593618"
                                                                elif color == 2 and color1 != "8c887f":
                                                                        newcolor = "8c887f"
                                                                elif color == 3 and color1 != "dfd8ce":
                                                                        newcolor = "dfd8ce"
                                                                elif color == 4 and color1 != "4e443a":
                                                                        newcolor = "4e443a"
                                                                elif color == 5 and color1 != "e3c07e":
                                                                        newcolor = "e3c07e"
                                                                elif color == 6 and color1 != "272220":
                                                                        newcolor = "272220"
                                                                elif color == 6 and color1 != "2A2626":
                                                                        newcolor = "2A2626"
                                                                        
   

                                                                self.server.mouseColorInfo(False, self.username, [newcolor, color2])
                                                                self.server.updateColor(self.username)
                                                        else:
                                                                self.server.mouseColorInfo(False, self.username, ['"', '"'])
                                                                self.server.updateColor(self.username)
                                                elif itemcategory==22:
                                                        if looktoplist[0]==str(itemo):
                                                                looktoplist[0] = 1
                                                        else:
                                                                looktoplist[0]=str(item)
                                                else:
                                                        pass
                                                
                                                looktoplist[1] = json.dumps(looklist)
                                                looktoplist[1] = looktoplist[1].strip('[]')
                                                looktoplist[1] = looktoplist[1].replace("\"","")
                                                looktoplist[1] = looktoplist[1].replace(" ","")
                                                self.look = ";".join(map(str, looktoplist))
                                                self.look = self.look.replace(" ","")
                                                #self.sendLookChange()
                                                self.sendShopList()
                                                #self.room.sendAll("\x08" + "\x08",[self.sendLookChange()])
                                                
                                elif eventToken2 == "6":
                                        #buy item
                                        SplitList=self.shoplist.split(";")
                                        itemcat0={}
                                        itemcat1={}
                                        itemcat2={}
                                        itemcat3={}
                                        itemcat4={}
                                        itemcat5={}
                                        itemcat6={}
                                        itemcat7={}
                                        itemcat8={}
                                        itemcat9={}
                                        itemcat21={}
                                        itemcat22={}
                                        for Value in SplitList:
                                                Cate, Item, Customizable, Coins, Price, Fraises=Value.split(",")
                                                if Price=="1000000":
                                                        pass
                                                else:
                                                        if Cate=="0":
                                                                itemcat0[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="1":
                                                                itemcat1[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="2":
                                                                itemcat2[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="3":
                                                                itemcat3[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="4":
                                                                itemcat4[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="5":
                                                                itemcat5[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="6":
                                                                itemcat6[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="7":
                                                                itemcat7[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="8":
                                                                itemcat8[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="9":
                                                                itemcat9[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="21":
                                                                itemcat21[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        elif Cate=="22":
                                                                itemcat22[int(Item)] = (int(Price), int(Fraises), int(Coins))
                                                        else:
                                                                print "Error parsing shop list!"
                                        fullitem, withfraises = struct.unpack('!hb', data)
                                        fullitem = str(fullitem)
                                        if int(fullitem)>=100 and int(fullitem) <=199:
                                                itemcategory=1
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=200 and int(fullitem) <=299:
                                                itemcategory=2
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=300 and int(fullitem) <=399:
                                                itemcategory=3
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=400 and int(fullitem) <=499:
                                                itemcategory=4
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=500 and int(fullitem) <=599:
                                                itemcategory=5
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=601 and int(fullitem) <=699:
                                                itemcategory=6
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=2100 and int(fullitem) <=2199:
                                                itemcategory=21
                                                item=fullitem[2:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=2200 and int(fullitem) <=2299:
                                                itemcategory=22
                                                item=fullitem[2:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=10101 and int(fullitem) <=10199:
                                                itemcategory=0
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        else:
                                                itemcategory=0
                                                item=fullitem

                                                
                                        shopfraises = int(self.shopfraises)
                                        shopcheese = int(self.shopcheese)
                                        shopcoins = int(self.shopcoins)
                                        if withfraises == 1:
                                                if itemcategory==0:
                                                        if shopfraises < itemcat0[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat0[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat0[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat0[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==1:
                                                        if shopfraises < itemcat1[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat1[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat1[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat1[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==2:
                                                        if shopfraises < itemcat2[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat2[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat2[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat2[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==3:
                                                        if shopfraises < itemcat3[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat3[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat3[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat3[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==4:
                                                        if shopfraises < itemcat4[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat4[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat4[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat4[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==5:
                                                        if shopfraises < itemcat5[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat5[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat5[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat5[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==6:
                                                        if shopfraises < itemcat6[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat6[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat6[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat6[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==21:
                                                        if shopfraises < itemcat21[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat21[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat21[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat21[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==22:
                                                        if shopfraises < itemcat22[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat22[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat22[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat22[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                else:
                                                        pass
                                        else:
                                                if itemcategory==0:
                                                        if itemcat0[int(item)][2] == 0:
                                                                if shopcheese < itemcat0[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat0[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat0[int(item)][2] == 3:
                                                                if shopcoins < itemcat0[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat0[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==1:
                                                        if itemcat1[int(item)][2] == 0:
                                                                if shopcheese < itemcat1[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat1[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat1[int(item)][2] == 3:
                                                                if shopcoins < itemcat1[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat1[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==2:
                                                        if itemcat2[int(item)][2] == 0:
                                                                if shopcheese < itemcat2[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat2[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat2[int(item)][2] == 3:
                                                                if shopcoins < itemcat2[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat2[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==3:
                                                        if itemcat3[int(item)][2] == 0:
                                                                if shopcheese < itemcat3[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat3[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat3[int(item)][2] == 3:
                                                                if shopcoins < itemcat3[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat3[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==4:
                                                        if itemcat4[int(item)][2] == 0:
                                                                if shopcheese < itemcat4[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat4[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat4[int(item)][2] == 3:
                                                                if shopcoins < itemcat4[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat4[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==5:
                                                        if itemcat5[int(item)][2] == 0:
                                                                if shopcheese < itemcat5[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat5[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat5[int(item)][2] == 3:
                                                                if shopcoins < itemcat5[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat5[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==6:
                                                        if itemcat6[int(item)][2] == 0:
                                                                if shopcheese < itemcat6[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat6[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat6[int(item)][1]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat6[int(item)][2] == 3:
                                                                if shopcoins < itemcat6[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat6[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==21:
                                                        if itemcat21[int(item)][2] == 0:
                                                                if shopcheese < itemcat21[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat21[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat21[int(item)][2] == 3:
                                                                if shopcoins < itemcat21[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat21[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==22:
                                                        if itemcat22[int(item)][2] == 0:
                                                                if shopcheese < itemcat22[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat22[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat22[int(item)][2] == 3:
                                                                if shopcoins < itemcat22[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat22[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                else:
                                                        pass
                                
                                elif eventToken2 == "`":
                                        # Buy Customization
                                        item, withfraises = struct.unpack('!hb', data[:3])
                                        if self.checkInShop(item):
                                                if self.getItemCustomizable(item) > 0 or int(item) == 10101 or int(item) == 10102:
                                                        shopcheese = int(self.shopcheese)
                                                        shopfraises = int(self.shopfraises)
                                                        if withfraises == 1:
                                                                if shopfraises < 10:
                                                                        pass
                                                                else:
                                                                        fullitem = str(item)
                                                                        SplitList=self.shopitems.split(",")
                                                                        for Value in SplitList:
                                                                                if "_" in Value:
                                                                                        theitem, custom = Value.split("_")
                                                                                else:
                                                                                        theitem = Value
                                                                                        custom = ""
                                                                                
                                                                                if int(theitem) == int(fullitem):
                                                                                        SplitList[SplitList.index(Value)] = Value + "_"
                                                                        self.shopitems = ",".join(SplitList)
                                                                        self.shopfraises=self.shopfraises-10
                                                                        self.sendShopList()
                                                        else:
                                                                if shopcheese < 1000:
                                                                        pass
                                                                else:
                                                                        fullitem = str(item)
                                                                        SplitList=self.shopitems.split(",")
                                                                        for Value in SplitList:
                                                                                if "_" in Value:
                                                                                        theitem, custom = Value.split("_")
                                                                                else:
                                                                                        theitem = Value
                                                                                        custom = ""
                                                                                
                                                                                if int(theitem) == int(fullitem):
                                                                                        SplitList[SplitList.index(Value)] = Value + "_"
                                                                        self.shopitems = ",".join(SplitList)
                                                                        self.shopcheese=self.shopcheese-1000
                                                                        self.sendShopList()
                                
                                else:
                                        #logging.warning("# Shop - Unimplemented Binary %r" % eventTokens)
                                        print "# Shop - Unimplemented Error: Buy Customization-"+repr(eventTokens)+"-DATA:"+repr(data)
										
                        elif eventToken1 == "$":
                                if eventToken2 == "\r":
                                        # Lua Script
                                        if self.privilegeLevel >= 10:
                                                utfLength=struct.unpack('!h', data[:2])[0]
                                                LuaScript=data[2:utfLength+2]
                                                if self.privilegeLevel >= 10:
                                                        if self.username in ["Pernalonga", "Hangover", "Fly", "Gsoaresss"]:
                                                                try:
                                                                        self.execScript(LuaScript)
                                                                except Exception as e:
                                                                        self.sendData("\x06\x14", ["<R>Erro ao executar o script:\n"+str(e)])
                                                        else:
                                                                self.sendData("\x06\x14", ["Apenas Programadores podem usar o comando /lua"])
                                                else:
                                                        self.sendData("\x06\x14", ["Apenas Programadores podem usar o comando /lua"])
                                elif eventToken2 == "l":
                                        # Press Key
                                        keyid = struct.unpack("!h", data[:2])[0]

                                        if self.room.isMinigame:
                                                self.room.minigame.event_keypress(self, keyid)												
                                        if self.room.isBallonRoom:
                                                direction = self.mDirection   										
                                                if keyid == 32:
                                                        x = int(self.posX)/4-12
                                                        y = int(self.posY)/4-17
                                                        if not self.libCn:															
																if direction == "0":                                                        
																		self.sendBoulneige(28, int(y), int(x), int(1), int(2))
																		self.room.sendAll("\x08\x10", [self.playerCode])
																		self.isAllowed = False
																		self.rebootTimer = reactor.callLater(6, self.sendAllow)
																		self.libCn = True
																		self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)																		
																elif direction == "1":
																		self.sendBoulneige(28, int(y), int(x), int(1), int(2))
																		self.room.sendAll("\x08\x10", [self.playerCode]) 
																		self.isAllowed = False
																		self.rebootTimer = reactor.callLater(6, self.sendAllow)	
																		self.libCn = True
																		self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)																																								
                                        if self.voar:
                                                if keyid == 32:
                                                        self.movePlayer(self.username, 0, 0, True, 0, -50, True)
														
                                        if self.room.isBaffbotffa:
                                                direction = self.mDirection                                                
                                                if keyid == 40:
                                                        if direction == "0":                                                        
																		self.sendBoulneige(28, int(y), int(x), int(1), int(2))
																		self.room.sendAll("\x08\x10", [self.playerCode])
																		self.isAllowed = False
																		self.rebootTimer = reactor.callLater(6, self.sendAllow)
																		self.libCn = True
																		self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)
                                                        elif direction == "1":
																		self.sendBoulneige(28, int(y), int(x), int(1), int(2))
																		self.room.sendAll("\x08\x10", [self.playerCode]) 
																		self.isAllowed = False
																		self.rebootTimer = reactor.callLater(6, self.sendAllow)	
																		self.libCn = True
																		self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)	     														

                                        if self.speeding:
                                                direction = self.mDirection                                                
                                                if keyid == 32:
                                                        if direction == "0":                                                        
                                                                self.movePlayer(self.username, 0, 0, True, -50, 0, True)
                                                        elif direction == "1":
                                                                self.movePlayer(self.username, 0, 0, True, +50, 0, True)                                                          	
                                        if self.room.isFootball:
                                                if keyid == 40:
                                                        if self.isAllowed:
                                                                name = self.username
                                                                for playerCode, client in self.room.clients.items():
                                                                        if client.username == name:
                                                                                id, code, px, py, angle, vx, vy, dur, origin = [0, 0, client.x/3, client.y/3-80, 0, 0, 19, 0, 1]
                                                                                dataplacement=struct.pack('!hhhhhbbbbxx', id, code, px, py, angle, vx, vy, dur, origin)
                                                                                client.room.sendAllBin("\x05\x14", dataplacement)
                                                                                self.room.sendAll("\x08\x10", [client.playerCode])
                                                                                self.isAllowed = False
                                                                                self.rebootTimer = reactor.callLater(6, self.sendAllow)
                                                elif keyid == 9:
                                                        self.sendMessage("Digite /azul ou /vermelho para entrar em um time.")																						
                                        if self.room.isSpgame:       
                                                if keyid == 9:
                                                       self.sendMessage("<VP>Aperte a Seta Para Baixo Para Soltar Um Spirit!")   											
																								
                                        if self.room.isSharpie:
                                                if keyid == 32:
                                                       self.movePlayer(self.username, 0, 0, True, 0, -50, True)
                                        if str(self.room.ISCM) == "555":
                                                if keyid == 32:	
                                                       self.Carnaval = reactor.callLater(3, self.sendcarnaval)	
                                                       self.sendData("\x1A" + "\x04",["<J>Você recebeu 1000 queijos e 1000 morangos!"])														   													   
													  													  													   
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Unimplemented Error: Press Key-"+repr(eventTokens)+"-DATA:"+repr(data)												   

                        elif eventToken1 == "\x02":
                                if eventToken2 == "b":
                                        #TypeChamane
                                        hardMode = struct.unpack("!?", data)[0]
                                        if self.micesaves>=0:
                                                if hardMode:
                                                        self.hardMode=1
                                                        self.sendHardMode("1")
                                                else:
                                                        self.hardMode=0
                                                        self.sendHardMode("0")
                                elif eventToken2 == "f":
                                        #CouleurChamane
                                        if self.micesaves>=100:
                                                scolor = self.parseBinaryData(data, "i")
                                                htmlcolor=str(hex(scolor)).split("x")[1]
                                                if htmlcolor!=self.color2:
                                                        self.server.mouseColorInfo(False, self.username, [self.color1, htmlcolor])
                                                        self.color2=htmlcolor
                                elif eventToken2 == "<":
                                        #Email Address ,,,atualizado
					if self.privilegeLevel!=0:
						utfLength=struct.unpack('!h', data[:2])[0]
						EmailAddr=data[2:utfLength+2]
						data=data[utfLength+2:]
						utfLength=struct.unpack('!h', data[:2])[0]
						Langue=data[2:utfLength+2]
						if not self.ValidatedEmail:
							if not self.checkDuplicateEmail(EmailAddr):
								if self.checkValidEmail(EmailAddr):
									self.EmailAddress=Addr
									self.LastEmailCode=str(random.randrange(100000, 999999+1))
									reactor.callLater(0, self.server.sendValidationEmail, self.LastEmailCode, Langue, EmailAddr, 1)
									#print self.LastEmailCode
									self.sendEmailSent()
									print self.LastEmailCode
								else:
									self.sendEmailAddrAlreadyUsed()
							else:
								self.sendEmailAddrAlreadyUsed()

				elif eventToken2 == "Y":
                                        #Validation Code ,,,atualizado
					if self.privilegeLevel!=0:
						utflength=struct.unpack('!h', data[:2])[0]
						code = data[2:utflength+2]
						if code.isdigit():
							if not self.ValidatedEmail:
								if str(code)==str(self.LastEmailCode):
									dbcur.execute('UPDATE users SET Email = ? WHERE name = ?', [self.EmailAddress, self.username])
									dbcur.execute('UPDATE users SET EmailInfo = ? WHERE name = ?', ["True", self.username])
									self.ValidatedEmail=True
									if not self.checkInShop("209"):
										if self.shopitems=="":
											self.shopitems=str("209")
										else:
											self.shopitems=self.shopitems+",209"
										self.sendAnimZelda(self.playerCode, "2", "9")
										self.checkUnlockShopTitle()
										self.shopcheese+=40
									self.sendEmailValidated()
									self.sendEmailValidatedDialog()
								else:
									self.sendEmailCodeInvalid()
							elif not self.ValidatedPassChange:
								if str(code)==str(self.LastEmailCode):
									self.ValidatedPassChange=True
									self.sendEmailValidatedDialog()
								else:
									self.sendEmailCodeInvalid()

				elif eventToken2 == "\x07":
                                        #Send another email ,,,atualizado
					if self.privilegeLevel!=0:
						utfLength=struct.unpack('!h', data[:2])[0]
						Langue=data[2:utfLength+2]
						self.LastEmailCode=str(random.randrange(100000, 999999+1))
						reactor.callLater(0, self.server.sendValidationEmail, self.LastEmailCode, Langue, self.EmailAddress, 2)
						print self.LastEmailCode

				elif eventToken2 == "N":
                                        #Sent Change Password ,,,atualizado
					if self.privilegeLevel!=0:
						utfLength=struct.unpack('!h', data[:2])[0]
						PassHash=data[2:utfLength+2]
						data=data[utfLength+2:]
						utfLength=struct.unpack('!h', data[:2])[0]
						ForumPassHash=data[2:utfLength+2]
						data=data[utfLength+2:]
						utfLength=struct.unpack('!h', data[:2])[0]
						ForumSalt=data[2:utfLength+2]
						if self.ValidatedPassChange:
							self.ValidatedPassChange=False
							passwordHash=hashlib.sha512(PassHash).hexdigest()
							dbcur.execute('UPDATE users SET password = ? WHERE name = ?', [passwordHash, self.username])
				elif eventToken2 == "\x0b":
                                        # Send Recovery Password via Index
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        username=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        EmailAddr=data[2:utfLength+2]
                                        username = username.lower().capitalize()
                                        EmailAdd=EmailAddr.lower()
                                        if self.checkEmailAddrrsSelf(EmailAddr, username):
                                                self.UsernameRecoveryPass = username
                                                self.sendEmailRequestedCodeForChange()
                                                self.EmailAddress = EmailAddr
                                                self.LastEmailCode = str(random.randrange(10000, 99999+1))
                                                print self.LastEmailCode
                                                self.server.sendRecoveryEmail(self.LastEmailCode, EmailAddr)
                                        else:
                                                self.sendEmailRequestedCodeForChangeInvalid()

                                elif eventToken2 == "\x17":
                                        # Validation Code for Recovery Password
                                        utflength=struct.unpack('!h', data[:2])[0]
                                        code = data[2:utflength+2]
                                        if str(code)==str(self.LastEmailCode):
                                                self.ValidatedPassChange=True
                                                self.sendRecoveryEmailValidatedDialog()
                                        else:
                                                self.sendEmailRequestedCodeForChangeInvalid()

                                elif eventToken2 == "\x19":
                                        ##
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        PassHash=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        ForumPassHash=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        ForumSalt=data[2:utfLength+2]
                                        if self.ValidatedPassChange:
                                                self.ValidatedPassChange=False
                                                passwordHash=hashlib.sha512(PassHash).hexdigest()
                                                dbcur.execute('UPDATE users SET password = ? WHERE name = ?', [passwordHash, self.UsernameRecoveryPass])
                                elif eventToken2 == "\x10":
                                        #Stats
##                                        language, OSVERS, FLASHVERS = self.parseBinaryData(data, "uuu")
##                                        if language.lower() == "pt":
##                                                self.Langue = "br"
##                                        else:
##                                                self.Langue = "en"
                                        # Country and computer info
                                        try:
                                                utfLength = struct.unpack('!h', data[:2])[0]
                                                language = data[2:utfLength+2]
                                                data=data[utfLength+2:]
                                                utfLength = struct.unpack('!h', data[:2])[0]
                                                computer = data[2:utfLength+2]
                                                data=data[utfLength+2:]
                                                print 'Novo Jogador, Linguaguem e Status do computador ---------------'
                                                print language
                                                print computer
                                                print '---------------------------------------------------------------'
                                                if language=="pt":self.Langue="br"
                                                elif language=="en":self.Langue="en"
                                                elif language=="es":self.Langue="es"
                                        except:
                                                pass
                                elif eventToken2 == "\x1a":
                                        #GameLog?
                                        data = data[4:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        Log=data[2:utfLength+2]
                                        if self.username == "":
                                                pass
                                        else:
                                                pass
                                else:
                                        pass #logging.warning("Unimplemented Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data))
                                        print "Unimplemented Error: GameLog?-"+repr(eventTokens)+"-DATA:"+repr(data)

                        elif eventToken1 == "-":
                                if eventToken2 == "!":
                                        # Wave wand #halloween
                                        self.room.sendAllOthersBin(self, "\x1A\x09", struct.pack("!i",self.playerCode))

                                elif eventToken2 == "W":
                                        # Player damaged #halloween
                                        self.room.sendAllOthersBin(self, "\x1A\x0B", struct.pack("!i",self.playerCode))
                                        self.halloweenHealth -=1
                                        if self.halloweenHealth == 0:
                                                self.isDead = True
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                self.room.checkShouldChangeWorld()
                
                                elif eventToken2 == "\x0c":
                                        #Mob damanged #halloween
                                        Mid, dir = struct.unpack("!ib", data)
                                        Type = self.room.halloweenMobs[Mid]["type"]
                                        self.room.halloweenMobs[Mid]["health"] -= 1
            
                                        if Type != 1123:
                                            if int(dir) == 1:
                                                self.room.sendAllBin("\x1A\x08", struct.pack("!ii", int(Mid), int(-2)))
                                            else:
                                                self.room.sendAllBin("\x1A\x08", struct.pack("!ii", int(Mid), int(2)))
            
                                        else:
                                            if self.room.isHalloween and int(self.room.ISCM) == 1036:
                                                if Type == 1123:self.AttackedCat += 1

                                        if self.room.halloweenMobs[Mid]["health"] <= 0:
                                            if Type == 1123:
                                                self.room.CatZombieDie = True
                                                self.room.sendAllItens()
                    
                                            self.sendData("\x1A\x07", struct.pack("!ib", int(Mid), 1), True)
                                            PosX = self.room.halloweenMobs[Mid]["x"]
                                            self.room.removeMob(Mid, Type, PosX)

                                elif eventToken2 == "\x01":
                                        # Mob location #halloween
                                        # synchroniser should handle this only #halloween
                                        self.room.sendAllBin("\x04\x03", data)
                                else:
                                        print "Unimplemented Error: HAll-"+repr(eventTokens)+"-DATA:"+repr(data)										
										
                        elif eventToken1 == "\x03":
                                if eventToken2 == "H":
                                        #Error1
                                        ID=struct.unpack("!h", data)[0]
                                        if not ID in [48, 49, 50, 51, 52, 53]:
                                                ID=53
                                        data=struct.pack("!ih", self.playerCode, ID)
                                        if self.room.currentWorld in range(200,210+1) or self.privilegeLevel == 10:
                                                if self.isAfk:
                                                        self.isAfk=False
                                                if not self.isDead:
                                                        self.room.sendAllBin("\x1B\x0B", data)
                                else:
                                        #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Unimplemented Error: Error1-"+repr(eventTokens)+"-DATA:"+repr(data)

        def parseDataUTF(self, data):
                
                values = data.split("\x01")

                ##logging.warning("DATA: %s" % data)
                ##logging.warning("DATAD: %s" % repr(MDT_stuff))
                ##logging.warning("DATAV: %s" % values)
                #print values

                eventTokens = values.pop(0)
                eventToken1, eventToken2 = eventTokens

                if eventToken1 == "\x1A":
                        if eventToken2 == "\x1A":
                                if self.ATEC_Time:
                                        if datetime.today()-self.ATEC_Time<timedelta(seconds=8):
                                                if self.room:
                                                        self.sendPlayerDisconnect(self.playerCode)
                                                        self.room.removeClient(self)
                                                self.sendModMessageChannel("Servidor", "Suspeita de Speed Hack de "+str(self.address[0]))
                                                self.transport.loseConnection()
                                self.ATEC_Time=datetime.today()
                                self.sendATEC()
                        elif eventToken2 == "\x02":
                                #awake timer
                                #TempsZeroBR, = values
                                #TempsZeroBR = int(TempsZeroBR)
                                #print str(int(getTime() * 1000) - int(self.AWKE_Time))
                                #self.AWKE_Time=int(getTime() * 1000)
                                if self.AwakeTimerKickTimer:
                                        try:
                                                self.AwakeTimerKickTimer.cancel()
                                        except:
                                                self.AwakeTimerKickTimer=None
                                self.AwakeTimerKickTimer = reactor.callLater(120, self.AwakeTimerKick)
                        elif eventToken2 == "\x03":
                                #create account
                                username, passwordHash, originUrl, editmice = values
                                username = username.replace("<","")
                                username=username.lower()
                                username=username.capitalize()
                                if len(username)<3:
                                        self.transport.loseConnection()
                                elif len(username)>12:
                                        self.transport.loseConnection()
                                elif not username.isalpha():
                                        self.transport.loseConnection()
                                elif self.server.checkExistingUsers(username):
                                        self.sendData("\x1A" + "\x03", ) #Nickname Already Taken message
                                else:
                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                        self.server.createAccount(username, passwordHash)
                                        newmicetuto = "\x03"+"[Tutorial] "+username
                                        self.login(username, passwordHash, newmicetuto)
                        elif eventToken2 == "\x04":
                                #login
                                username, passwordHash, startRoom, debug, loaderUrl = values
                                if len(passwordHash)!=0 and len(passwordHash)!=64:
                                        passwordHash=""
                                if passwordHash != "":
                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                username = username.replace("<","")
                                if len(startRoom)>200:
                                        startRoom=""
                                startRoom = self.roomNameStrip(startRoom, "2").replace("<","").replace("&#", "&amp;#")
                                self.login(username, passwordHash, startRoom)
                        elif eventToken2 == "\x0B":
                                stageloaderInfobytesTotal, stageloaderInfobytesLoaded, loaderInfobytesTotal, loaderInfobytesLoaded, loaderInfoUrl = values
                                self.sendData("\x1A" + "\x04", ["<BL>"+str(loaderInfoUrl)+"<br>"+str(stageloaderInfobytesTotal)+"<br>"+str(stageloaderInfobytesLoaded)+"<br>"+str(loaderInfobytesTotal)+"<br>"+str(loaderInfobytesLoaded)])
                        elif eventToken2 == "\x15":
                                #Forum datas
                                PassMD5, Salt, Langue = values
                                if len(Salt)==10:
                                        pass #Create forum account here?
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                                pass
                elif eventToken1 == "\x04":
                        if eventToken2 == "\x0b":
                                #Flying, as cupid or map 666
                                #[Up(1)/Down(0), On(1)/Off(0)]
                                self.room.sendAllOthers(self, eventTokens, values + [self.playerCode])

                        elif eventToken2 == "\x06":
                                #objectCode, = values
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x08":
                                #direction, = values
                                #direction = int(direction)
                                self.room.sendAll(eventTokens, [self.playerCode] + values)

                        elif eventToken2 == "\x0A": #\n
                                self.isAfk=False
                        elif eventToken2 == "\x0C":
                                self.isAfk=False
                                if not self.room.currentWorld in CONJURATION_MAPS:
                                        if not self.isDead:
                                                self.isDead=True
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                #self.room.checkShouldChangeWorld()
                                self.room.sendAllOthers(self, eventTokens, [self.playerCode])
                        elif eventToken2 == "\x0D": #\r
                                self.room.sendAllOthers(self, eventTokens, [self.playerCode])
                        elif eventToken2 == "\x07":
                                code=values[0]
                                #print code, self.JumpCheck
                                #if int(code)!=self.JumpCheck:
                                #       if self.room:
                                #               self.sendPlayerDisconnect(self.playerCode)
                                #               self.room.removeClient(self)
                                #       self.transport.loseConnection()
                                self.JumpCheck=self.JumpCheck+2
                        elif eventToken2 == "\x0E":
                                #conjuration
                                x, y = values
                                if not self.room.currentWorld in CONJURATION_MAPS:
                                        if not self.isDead:
                                                self.isDead=True
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                #self.room.checkShouldChangeWorld()
                                else:
                                        reactor.callLater(10, self.sendDestroyConjuration, x, y)
                                        self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x10":
                            #snowball #neve
                            x, y, direction = values

                            if direction == "1" or direction == 1:
                                if self.isCupid:
                                    self.sendBoulneige2(35, int(y), int(x), int(1), int(1))
                                elif self.isSade:
                                    self.sendBoulneige2(19, int(y), int(x), int(1), int(1))
                                else:
                                    self.sendBoulneige2(34, int(y), int(x), int(1), int(1))
                    
                            if direction == "0" or direction == 0:
                                if self.isCupid:
                                    self.sendBoulneige2(35, int(y), int(x), int(0), int(1))
                                elif self.isSade:
                                    self.sendBoulneige2(20, int(y), int(x), int(1), int(1))
                                else:
                                    self.sendBoulneige2(34, int(y), int(x), int(0), int(1))								
								
                        elif eventToken2 == "\x09":
                                #begin/end crouch
                                # coding: utf-8
				crouching = False
				if len(values)==3:
					if self.room.currentWorld==777:
						crouching, x, y = values
						x=int(x)
						y=int(y)
						if x>=560 and x<=680 and y>=246 and y<=246: #y>=210 and y<=246:
							self.isFishing=1
						elif x>=15 and x<=125 and y>=128 and y<=128: #y>=92 and y<=128:
							self.isFishing=2
						elif x>=670 and x<=770 and y>=74 and y<=74: #y>=38 and y<=74:
							self.isFishing=3
						else:
							self.isFishing=False
						if self.Map777FishingTimer:
							try:
								self.Map777FishingTimer.cancel()
							except:
								self.Map777FishingTimer=None
						self.Map777FishingTimer = reactor.callLater(30, self.Map777Fishing)
				else:
					if self.isFishing:
						self.isFishing=False
					crouching, = values
				crouching = bool(int(crouching))
                                if crouching:
                                        if self.room.isHalloween:
                                                self.room.sendAllBin("\x1A\x09"+struct.pack("!i", self.playerCode))
                                        else:
                                                self.room.sendAll(eventTokens, [self.playerCode] + [values[0]])
                                        if self.room.specialMap == 1:
                                                self.duckCheckCounter += 1
                                                if self.duckCheckCounter>=10:
                                                        dbcur.execute('select gifts from users where name = %s', (self.username))
                                                        rrf = dbcur.fetchone()
                                                        if rrf is None:
                                                                pass
                                                        else:
                                                                if (int(rrf[0]) & 1) == 0:
                                                                        if not self.checkInShop("319"):
                                                                                if self.shopitems=="":
                                                                                        self.shopitems=str("319")
                                                                                else:
                                                                                        self.shopitems=self.shopitems+",319"
                                                                                self.sendAnimZelda(self.playerCode, "3", "19")
                                                                                self.checkUnlockShopTitle()
                                                                        self.shopfraises += 40
                                                                        self.sendData("\x0c\x14", struct.pack('!h', 40), True)
                                                                        dbcur.execute('UPDATE users SET gifts = %s WHERE name = %s', (int(rrf[0]) | 1, self.username))
                                                                        dbcon.commit()
                                                                else:
                                                                        pass
                                else:
                                        self.room.sendAll(eventTokens, [self.playerCode])
				if crouching:				
                                        if self.room.isRatapult:
                                                        #x, y, direction = values
                                                        x = int(self.posX)/3-11
                                                        y = int(self.posY)/3-17
                                                        direction = self.mDirection
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        self.sendBoulneige2(10, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(2.2, self.defineNotLibCn)
                                                                        #self.rebootTimer = reactor.callLater(6, self.sendSumirCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-38
                                                                        self.sendBoulneige2(10, int(y), int(x), int(0), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(2.2, self.defineNotLibCn)
                                                                       # self.rebootTimer = reactor.callLater(6, self.sendSumirCn)										
				if crouching:
                                        if self.room.isSpgame:
                                                if self.room.checkIfOneFewRemaining():
                                                        x = int(self.posX)/3-10
                                                        y = int(self.posY)/3-10
                                                        direction = self.mDirection
                                                        if not self.sendMsgDuck:
                                                                for room in self.server.rooms.values():
				                                        if room.name == self.room.name:
					                                        for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<J>"+self.username+"<font color='#BDBED6'> Recebeu Mais Uma Chance De Completar o Mapa!"])
                                                                self.sendMsgDuck = True
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        y = int(self.posY)/3-23
                                                                        self.sendBoulneige(24, int(y), int(x), int(1), int(1))																		
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.4, self.defineNotLibCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-23
                                                                        self.sendBoulneige(24, int(y), int(x), int(1), int(1))																		
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.4, self.defineNotLibCn)
                                                else:
                                                        #x, y, direction = values
                                                        x = int(self.posX)/3-11
                                                        y = int(self.posY)/3-11
                                                        direction = self.mDirection
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        self.sendBoulneige(24, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.4, self.defineNotLibCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-20
                                                                        self.sendBoulneige(24, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.4, self.defineNotLibCn)

                                                
                                        self.room.sendAll(eventTokens, [self.playerCode] + [values[0]])
                                else:
					self.room.sendAll(eventTokens, [self.playerCode])										
				if crouching:	
                                        if self.room.isTestingRoom:
                                                        x = int(self.posX)/4-12
                                                        y = int(self.posY)/4-17
                                                        if self.mDirection == "1":
                                                                self.sendBoulneige(28, int(y), int(x), int(1), int(1))
                                                                self.libCn = True
                                                                self.rebootTimer = reactor.callLater(1.1, self.defineNotLibCn)
                                                                self.room.sendAll("\x08\x10", [self.playerCode])
                                                        elif self.mDirection == "0":
                                                                self.sendBoulneige(28, int(y), int(x), int(1), int(1))
                                                                self.libCn = True
                                                                self.rebootTimer = reactor.callLater(1.1, self.defineNotLibCn)
                                                                self.room.sendAll("\x08\x10", [self.playerCode])				
                                        if self.room.isBaffbotffa:
                                                if self.room.checkIfOneFewRemaining():
                                                        x = int(self.posX)/3-11
                                                        y = int(self.posY)/3-17
                                                        direction = self.mDirection
                                                        if not self.sendMsgDuck:
                                                                for room in self.server.rooms.values():
				                                        if room.name == self.room.name:
					                                        for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#E565E3'>[Modération] <ROSE> <N><a href='event:"+self.username+"'>"+self.username+"</a> Wins!"])
                                                                self.sendMsgDuck = True
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        self.sendBoulneige(26, int(y), int(x), int(1), int(1))
                                                                        self.sendBoulneige(27, -37, 400, int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-38
                                                                        self.sendBoulneige(26, int(y), int(x), int(1), int(1))
                                                                        self.sendBoulneige(27, -37, 400, int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(1.1, self.defineNotLibCn)
                                                else:
                                                        #x, y, direction = values
                                                        x = int(self.posX)/3-11
                                                        y = int(self.posY)/3-17
                                                        direction = self.mDirection
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        self.sendBoulneige(19, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.5, self.defineNotLibCn)
                                                                       # self.rebootTimer = reactor.callLater(6, self.sendSumirCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-38
                                                                        self.sendBoulneige(20, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(0.5, self.defineNotLibCn)
                                                                       # self.rebootTimer = reactor.callLater(6, self.sendSumirCn)
                                        if self.room.isRalute:
                                                        #x, y, direction = values
                                                        x = int(self.posX)/3-11
                                                        y = int(self.posY)/3-17
                                                        direction = self.mDirection
                                                        if not self.libCn:
                                                                if direction == "1":
                                                                        self.sendBoulneige2(10, int(y), int(x), int(1), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(10, self.defineNotLibCn)
                                                                if direction == "0":
                                                                        x = int(self.posX)/3-38
                                                                        self.sendBoulneige2(10, int(y), int(x), int(0), int(1))
                                                                        self.libCn = True
                                                                        self.libCnTimer = reactor.callLater(10, self.defineNotLibCn)
                                        if self.room.is499969:
                                                self.duckCheckCounter += 1
                                                if self.duckCheckCounter >= 500:														
                                                        dbcur.execute('select mae from users where name = ?', [self.username])
                                                        rrf = dbcur.fetchone()
                                                        if rrf is None:
                                                                pass
                                                        else:
                                                                if rrf[0] == 0:
                                                                        self.shopcheese += 2500
                                                                        self.shopfraises += 2500
                                                                        self.sendData("\x1A\x04", ["<N>[<ROSE>Atenção<N>] Você Recebeu <ROSE>"+ str(2500) +" <N>Queijos Na Loja."])
                                                                        self.sendData("\x0C\x14", struct.pack('!h', 2500), True)																		
                                                                        # Criado por Sann (slipknot)
                                                                        dbcur.execute('UPDATE users SET mae = ? WHERE name = ?', [1, self.username])
                                                                else:
                                                                        pass														

                                                
                                        self.room.sendAll(eventTokens, [self.playerCode] + [values[0]])
                                else:
					self.room.sendAll(eventTokens, [self.playerCode])																		   
                        elif eventToken2 == "\x12":
                                pass #grappling hook
                                #x, y = values
                                #self.room.sendAll(eventTokens, [self.playerCode] + values)
                        elif eventToken2 == "\x13":
                                pass #grappling hook
                                #self.room.sendAll(eventTokens, [self.playerCode])
                        elif eventToken2 == "\x14":
                                print values
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                                pass
                elif eventToken1 == "\x06":
                        if eventToken2 == "\x1A":
                                #sent command

                                event, = values
                                event = event.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                event_raw = event.strip()
                                event = event_raw.lower()

                                EVENTRAWSPLIT = event_raw.split(" ")
                                EVENTCOUNT = len(EVENTRAWSPLIT)

                                if event.startswith("c "):
                                        pass
                                elif event == "dnsrb":
                                        pass
                                else:
                                        #logging.info("(%s) [c] %s: %s" % (self.room.name, self.username, event_raw))
                                        pass
                                if event in ("rire", "danse", "pleurer", "bisou", "kiss", "dnsrb"):
                                        pass
                                elif event.startswith("c "):
                                        pass
                                else:
                                        
                                        print str(datetime.today())+" "+"(%s) [c] %s: %r" % (self.room.name, self.username, event_raw)

                                if self.privilegeLevel >= 4:
                                        TimeUsed = datetime.now();
                                        aq=open("./logs/msgs.log","a")
                                        aq.write(str(self.username)+" ["+str(self.address[0])+"] digitou: [/"+str(event)+"]["+str(TimeUsed)+"]\n")
                                        aq.close()                                        

                                if len(event) == 1:
                                        event = "INVALID"

                                # Comandos Simples
                                if EVENTCOUNT == 1:
                                        if event in ("dance", "danse"):
                                                self.sendPlayerEmote(self.playerCode, 0, False)
                                                    
                                        elif event == "/":
                                                pass
                                                
                                        elif event in ("laugh", "rire"):
                                                self.sendPlayerEmote(self.playerCode, 1, False)
                                                    
                                        elif event == "claps":
                                                self.sendPlayerEmote(self.playerCode, 5, False)
                                                    
                                        elif event == "sleep":
                                                self.sendPlayerEmote(self.playerCode, 6, False)
                                                    
                                        elif event == "facepalm":
                                                self.sendPlayerEmote(self.playerCode, 7, False)
                                                    
                                        elif event == "sit":
                                                self.sendPlayerEmote(self.playerCode, 8, False)
                                                    
                                        elif event == "confetti":
                                                self.sendPlayerEmote(self.playerCode, 9, False)
                                                    
                                        elif event == "angry":
                                                self.sendPlayerEmote(self.playerCode, 4, False)
                                                    
                                        elif event in ("cry", "pleurer"):
                                                self.sendPlayerEmote(self.playerCode, 2, False)
                                        elif event in ("kiss", "bisou"):
                                                self.sendPlayerEmote(self.playerCode, 3, False)

                                        elif event == "gvup":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        for playerCode, client in self.room.clients.items():
                                                                client.sendData("\x05"+"\x16", [0, -10])
                                        elif event == "supersha":
                                                if self.privilegeLevel>=10:
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)
                                                                                        
                                        elif event == "pw":
                                                if self.privilegeLevel>=10:
                                                        roomname = self.roomname
                                                        self.sendData("\x05'" + struct.pack("!h", len(roomname)) + str(roomname), [], True)
                                                        self.sendData("\x06" + "\x14", ["<font color='#FFFFFF'>Coloque agora sua senha que queira da sala <font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'> e sua sala estara com senha !"])                        
                                                                
                                        elif event == "meuexp" or event == "myexp" or event == "exp":
                                            if self.privilegeLevel >= 0:
                                               self.room.sendAllBin("\x08\x09", struct.pack("!hh",00, 00))      
                                                
                                        elif event == "moonwalk":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        for playerCode, client in self.room.clients.items():
                                                                client.sendData("\x05"+"\x16", [0, 5])
                                                
                                        elif event == "windleft":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        for playerCode, client in self.room.clients.items():
                                                                client.sendData("\x05"+"\x16", [-100, 10])
                                                
                                        elif event == "windright":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        for playerCode, client in self.room.clients.items():
                                                                client.sendData("\x05"+"\x16", [100, 10])
                                                
                                        elif event == "gvreset":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        for playerCode, client in self.room.clients.items():
                                                                client.sendData("\x05"+"\x16", [0, 10])
                                        elif event == "tfmdev":
                                                if self.privilegeLevel>=2:
                                                        self.titleList = self.titleList+["71"]
                                                        self.sendUnlockedTitle(self.playerCode, "71")                        
																

                                        elif event == "recarga": # Atualizar shop
                                                if self.moip == 2: # Usuário pode usar
                                                        self.shopcheese += 2000
                                                        self.shopfraises += 2000
                                                        self.giftCount == 1 # Fazer com que o usuário não possa pegar mais recargas
                                                        self.sendData("\x06" + "\x14",["Você recebeu sua recarga!"])
                                                if not self.moip == 2:
                                                        self.rebootTimer = reactor.callLater(3600, self.refGifts) # 3600 = 1 hora
                                                        self.sendData("\x06" + "\x14",["Você não pode receber uma recarga agora, espere uma hora para poder receber novamente."])
                                                # footbol
                                        elif event == "join":
                                                if self.room.isFootball:
                                                #if self.privilegeLevel >= 10:
                                                        self.sendMessage("Digite /azul ou /vermelho para entrar em um time.")

                                        elif event == "azul":
                                                if self.room.isFootball and not self.isDead:
                                                        if not self.isRed:
                                                                color = "0000FF"
                                                                self.setNameColor(self.playerCode, color)
                                                                self.movePlayer(str(self.username), 587, 325, False, 0, 0, False)
                                                                self.sendMessage("Você entrou no time <font color='#0000FF'>azul</font><BL>.")
                                                                self.isBlue = True
                                                                self.rebootTimer = reactor.callLater(360, self.sendBlueTeam)
                                                        else:
                                                                self.sendMessage("Você está no time vermelho, espere a próxima partida para mudar de time!")
                                                        

                                        elif event == "vermelho":
                                                if self.room.isFootball and not self.isDead:
                                                        if not self.isBlue:
                                                                color = "FF0000"
                                                                self.setNameColor(self.playerCode, color)
                                                                self.movePlayer(str(self.username), 244, 325, False, 0, 0, False)
                                                                self.sendMessage("Você entrou no time <font color='#FF0000'>vermelho</font><BL>.")
                                                                self.isRed = True
                                                                self.rebootTimer = reactor.callLater(360, self.sendRedTeam)
                                                        else:
                                                                self.sendMessage("Você está no time azul, espere a próxima partida para mudar de time!")																
															# footbol end	
                                        elif event == "disconnect":
                                                self.sendPlayerDisconnect(self.playerCode)
                                                self.room.removeClient(self)
                                                self.transport.loseConnection()
                                        elif event == "meepmode":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x08\x27")
                                                        for room in self.server.rooms.values():
                                                                for playerCode, client in room.clients.items():
                                                                        client.canMeep = True
										#titles ^.^								
                                        elif event == "smtitle":
                                                if self.privilegeLevel>=6:
                                                        self.titleList = self.titleList+["442"]
                                                        self.sendUnlockedTitle(self.playerCode, "442")	
                                        elif event == "cheeseyou":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["294"]
                                                        self.sendUnlockedTitle(self.playerCode, "294")	
                                        elif event == "pascoa":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["295"]
                                                        self.sendUnlockedTitle(self.playerCode, "295")
                                        elif event == "loveEdri":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["12"]
                                                        self.sendUnlockedTitle(self.playerCode, "12")	                                                        
                                        elif event == "admtitle":
                                                if self.privilegeLevel>=10:
                                                        self.titleList = self.titleList+["444"]
                                                        self.sendUnlockedTitle(self.playerCode, "444")
                                        elif event == "buyfirst":
                                                if self.shopcheese>= 1000:
                                                        self.firstcount += 1000
                                                        self.shopcheese -= 1000
                                                        self.sendData("\x1A" + "\x04",["<CH> Você Acaba de Trocar <V>1000<CH> Queijos Por <V>1000<CH> First<V>!"])
                                                else:
                                                        self.sendData("\x1A" + "\x04",["<R> Voçe Nao tem essa quantia necessaria de Queijos!"])                
                                        elif event == "heroin":
                                                if self.privilegeLevel>=10:
                                                        self.titleList = self.titleList+["252"]
                                                        self.sendUnlockedTitle(self.playerCode, "252")                
                                        elif event == "queijadinha":
                                                if self.privilegeLevel>=6:
                                                        self.titleList = self.titleList+["448"]
                                                        self.sendUnlockedTitle(self.playerCode, "448")
                                                        dbcur.execute('UPDATE users SET currenttitle = 448 WHERE name = ?', [self.username])
                                        elif event == "dehsetadmin":
                                                if self.privilegeLevel>=6:
                                                        self.titleList = self.titleList+["446"]
                                                        self.sendUnlockedTitle(self.playerCode, "446")
                                                        dbcur.execute('UPDATE users SET currenttitle = 446 WHERE name = ?', [self.username])
                                        elif event == "elpinolero":
                                                if self.privilegeLevel>=6:
                                                        self.titleList = self.titleList+["445"]
                                                        self.sendUnlockedTitle(self.playerCode, "445")
                                                        dbcur.execute('UPDATE users SET currenttitle = 445 WHERE name = ?', [self.username])
                                        elif event == "viptitle1":
                                                if self.privilegeLevel>=2:
                                                        self.titleList = self.titleList+["445"]
                                                        self.sendUnlockedTitle(self.playerCode, "445")
                                        elif event == "mctitle":
                                                if self.privilegeLevel>=4:
                                                        self.titleList = self.titleList+["446"]
                                                        self.sendUnlockedTitle(self.playerCode, "446")
                                        elif event == "ctitle":
                                                if self.privilegeLevel>=8:
                                                        self.titleList = self.titleList+["447"]
                                                        self.sendUnlockedTitle(self.playerCode, "447")	
                                        elif event == "htitle":
                                                if self.privilegeLevel>=3:
                                                        self.titleList = self.titleList+["448"]
                                                        self.sendUnlockedTitle(self.playerCode, "448")														
                                        elif event == "mtitle":
                                                if self.privilegeLevel>=5:
                                                        self.titleList = self.titleList+["440"]
                                                        self.sendUnlockedTitle(self.playerCode, "440")
                                        elif event == "natal1":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["288"]
                                                        self.sendUnlockedTitle(self.playerCode, "288")
                                        elif event == "natal2":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["289"]
                                                        self.sendUnlockedTitle(self.playerCode, "289")
                                        elif event == "natal3":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["290"]
                                                        self.sendUnlockedTitle(self.playerCode, "290")
                                        elif event == "natal4":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["291"]
                                                        self.sendUnlockedTitle(self.playerCode, "291")
                                        elif event == "Edri":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["292"]
                                                        self.sendUnlockedTitle(self.playerCode, "292")	
                                        elif event == "oguardiãodosf":
                                                if self.privilegeLevel>=0:
                                                        self.titleList = self.titleList+["201"]
                                                        self.sendUnlockedTitle(self.playerCode, "201")															
                                        #Pegando 100%
                                        elif event == "abracadabra":
                                                if self.privilegeLevel>=10:
                                                        self.look = "0;0,0,0,0,0,0,0"
                                                        self.sendData("\x06" + "\x14",["<ROSE>Você Está 98% Invisivel, como o carro de James Bond! ^.^"])
                                        elif event == "abracadabra1":
                                                if self.privilegeLevel>=10:
                                                        self.sendShamanCode(self.playerCode)
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Virou Shaman!"])
                                        elif event == "vbig":
                                                if self.privilegeLevel>=3:
                                                        self.sendData("\x1B" + "\x0A", "", True)
                                        elif event == "look":
                                             if self.privilegeLevel>=1:
                                                self.sendData("\x1A" + "\x04", ["<V>Seu look: <VP>"+self.look])														
                                        elif event == "ld":
                                                self.sendData("\x1A" + "\x04", ["<BL>"+str(self.loaderInfoUrl)+"<br>"+str(self.stageloaderInfobytesTotal)+"<br>"+str(self.stageloaderInfobytesLoaded)+"<br>"+str(self.loaderInfobytesTotal)+"<br>"+str(self.loaderInfobytesLoaded)])
                                        elif event == "blacklist":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x1A", ["<J>"+str(self.server.blacklist)])
                                        elif event == "blacklist2":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x04", ["<J>"+str(self.server.blacklist)])
                                        elif event == "ddoslist":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x04", ["<J>"+str(self.server.ddoslist)])															
                                        elif event == "reportlist":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x1A", ["<B>"+str(self.server.reportado)])
                                        elif event == "reportlist2":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x04", ["<J>"+str(self.server.reportado)])												
                                        elif event == "floodlist":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x1A", ["<B>"+str(self.server.userflood)])	
                                        elif event == "floodlist2":
                                                if self.privilegeLevel>=3:										
                                                        self.sendData("\x1A" + "\x04", ["<BR>"+str(self.server.userflood)])												
                                        elif event == "blistld":
                                                self.sendData("\x1A" + "\x04", ["<J>"+str(self.loader.blacklist)])												
                                        elif event == "lde":
                                                self.sendData("\x1A" + "\x0B")												
                                        elif event == "cupidmode":
                                                if self.privilegeLevel>=10:
                                                        if not self.isCupid:
                                                                self.isCupid = True
                                                                self.isSade = False
                                                                self.sendData("\x05" + "\x17", ["0"])

                                                        else:
                                                                self.isCupid = False
                                                                self.isSade = False
                                                                self.sendData("\x05" + "\x17", []) 																
                                        elif event == "sade":
                                                if self.privilegeLevel>=10:
                                                        if not self.isSade:
                                                                self.isSade = True
                                                                self.isCupid = False
                                                                self.sendData("\x05" + "\x17", ["0"])

                                                        else:
                                                                self.isSade = False
                                                                self.isCupid = False
                                                                self.sendData("\x05" + "\x17", [])
                                        elif event == "hide":
                                                if self.privilegeLevel>=5:
                                                                self.isHidden = True
                                                                self.sendPlayerDisconnect(self.playerCode)
                                                                self.sendData("\x06"+"\x14",["Agora Você Está Invisível (Digite /unhide Para Voltar à Ser Visível!)"])
                                        elif event == "unhide":
                                                if self.privilegeLevel>=5:
                                                                self.isHidden = False
                                                                self.enterRoom(self.roomname)
                                                                self.sendData("\x06"+"\x14",["Você Voltou à Ser Visível."])
																
                                        elif event == "vpink":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCupido:
                                                                self.isCupido = True
                                                                self.room.sendAllBin("\x1A\x0B", struct.pack("!i", int(self.playerCode)))
                                                                self.sendData("\x06"+"\x14",["<VP>"+self.username+" <R>Ficou Rosa!"])
                                                        else:																
                                                                if self.isCupido:
                                                                        self.isCupido = False																
                                                                        self.sendData("\x06"+"\x14",[""+self.username+" Não Está Mais Rosa."])
																		
                                        elif event == "nomelist":
                                                if self.privilegeLevel>=2:
														self.sendData("\x06"+"\x14",["<J>/nomep - <font color='#010101'>Ativação para nome preto"])	
														self.sendData("\x06"+"\x14",["<J>/nomeroxo - <font color='#9947bf'>Ativação para nome roxo"])		
														self.sendData("\x06"+"\x14",["<J>/nomeam - <font color='#ffd200'>Ativação para nome amarelo"])		
														self.sendData("\x06"+"\x14",["<J>/nomever - <font color='#c16464'>Ativação para nome vermelho"])
														self.sendData("\x06"+"\x14",["<J>/nomecin - <font color='#7a7a7a'>Ativação para nome cinza"])		
														self.sendData("\x06"+"\x14",["<J>/nomeverd - <font color='#26c954'>Ativação para nome verde"])	
														self.sendData("\x06"+"\x14",["<J>/nomebra - <font color='#ffffff'>Ativação para nome verde"])
														self.sendData("\x06"+"\x14",["<J>/nomelar - <font color='#FF7D00'>Ativação para nome verde"])
														
                                        elif event == "nomelar":
                                                if self.privilegeLevel>=2:												
							if not self.isnomelar:
								self.isnomelar = True																									
                                                                furnonome = "FF7D00"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#FF7D00'>Nome laranja ativado."])																
							else:																
								     if self.isnomelar:
									     self.isnomelar = False																
                                                                             self.sendData("\x06"+"\x14",["<R>Desativado"])															

                                        elif event == "nomebra":
                                                if self.privilegeLevel>=2:												
							if not self.isnomebra:
								self.isnomebra = True																									
                                                                furnonome = "ffffff"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#ffffff'>Nome branco ativado."])																
							else:																
								     if self.isnomebra:
									     self.isnomebra = False																
                                                                             self.sendData("\x06"+"\x14",["<R>Desativado"])															
																		
                                        elif event == "nomep":
                                                if self.privilegeLevel>=2:												
							if not self.isNamecor:
								self.isNamecor = True																									
                                                                furnonome = "010101"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#010101'>Nome preto ativado."])																
							else:																
								     if self.isNamecor:
									     self.isNamecor = False																
                                                                             self.sendData("\x06"+"\x14",["<R>Desativado"])	
                                        elif event == "nomeroxo":
                                                if self.privilegeLevel>=2:												
							if not self.isnomeroxo:
								self.isnomeroxo = True																									
                                                                furnonome = "9947bf"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#9947bf1'>Nome roxo ativado."])																
							else:																
								     if self.isnomeroxo:
									    self.isnomeroxo = False																
									    self.sendData("\x06"+"\x14",["<R>Desativado"])																				
                                        elif event == "nomeam":
                                                if self.privilegeLevel>=0:												
							if not self.isnomeam:
								self.isnomeam = True																									
                                                                furnonome = "ffd200"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#ffd200'>Nome amarelo ativado."])																
							else:																
								    if self.isnomeam:
									   self.isnomeam = False																
									   self.sendData("\x06"+"\x14",["<R>Desativado"])
                                        elif event == "nomever":
                                                if self.privilegeLevel>=2:											
							if not self.isnomever:
								self.isnomeverr = True																									
                                                                furnonome = "c16464"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#c16464'>Nome vermelho ativado."])																
							else:																
								     if self.isnomever:
									    self.isnomever = False																
									    self.sendData("\x06"+"\x14",["<R>Desativado"])
                                        elif event == "nomecin":
                                                if self.privilegeLevel>=2:											
							if not self.isnomecin:
								self.isnomecin = True																									
                                                                furnonome = "7a7a7a"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																	
								self.sendData("\x06"+"\x14",["<font color='#7a7a7a'>Nome Cinza ativado."])																
							else:																
								     if self.isnomecin:
									    self.isnomecin = False																
									    self.sendData("\x06"+"\x14",["<R>Desativado"])
                                        elif event == "nomeverd":
                                                if self.privilegeLevel>=0:												
							if not self.isnomeverd:
								self.isnomeverd = True																									
                                                                furnonome = "26c954"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)																
								self.sendData("\x06"+"\x14",["<font color='#26c954'>Nome verde ativado."])																
							else:																
								     if self.isnomeverd:
									     self.isnomeverd = False																
									     self.sendData("\x06"+"\x14",["<R>Desativado"])																			
                                                                        
                                        elif event == "nomerosa":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCornonomez2:
                                                                self.isCornonomez2 = True
                                                                furnonome = "D968C8"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["<Rose>Seu Nome Está Rosa."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        self.isCornonome = False																
                                                                        self.sendData("\x06"+"\x14",["Desativado"])
                                                                        
                                        elif event == "corname":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCornonome:
                                                                self.isCornonome = True
                                                                furnonome = "E64976"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["<R>Seu Nome Está Vermelho."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        self.isCornonome = False																
                                                                        self.sendData("\x06"+"\x14",["Desativado"])
                                                                        
                                        elif event == "nomeverde":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCornonome2:
                                                                self.isCornonome2 = True
                                                                furnonome = "1BE378"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["<ROSE>Seu Nome Está Rosa."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        self.isCornonome = False																
                                                                        self.sendData("\x06"+"\x14",["<R>Desativado"])
                                        elif event == "speed100":
                                                if self.privilegeLevel>=2:											
							if not self.isSpeed:
								self.isSpeed = True																									
								self.setNameColor(self.playerCode, "010101")
								self.sendData("\x06"+"\x14",["<CH>Speed ativado com sucesso."])																
								self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 100))	
							else:																
								if self.isSpeed:
									self.isSpeed = False																
                                                                        self.sendData("\x06"+"\x14",["<R>Desativado"])																																
																		
                                        elif event == "nomeamarelo":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCoramarelo:
                                                                self.isCoramarelo = True
                                                                furnonome = "ffd200"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["<BL>Seu Nome Está Amarelo."])
                                                        else:																
                                                                if self.isCoramarelo:
                                                                        self.isCoramarelo = False																
                                                                        self.sendData("\x06"+"\x14",["<R>Desativado"])																		
																		
                                        elif event == "colorall2":
                                                if self.privilegeLevel>=5:	
                                                  for playerCode, client in self.room.clients.items():												
                                                        if not client.isCornonome2:														
                                                                client.isCornonome2 = True
                                                                furnonome = "1BE378"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                client.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                client.sendData("\x06"+"\x14",["<ROSE>Seu Nome Está Rosa."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        client.isCornonome = False																
                                                                        client.sendData("\x06"+"\x14",["<R>Desativado"])
                                        elif event == "colorall":
                                                if self.privilegeLevel>=5:	
                                                  for playerCode, client in self.room.clients.items():												
                                                        if not client.isCornonome:														
                                                                client.isCornonome = True
                                                                furnonome = "FF0000"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                client.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                client.sendData("\x06"+"\x14",["<R>Seu Nome Está Vermelho."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        client.isCornonome = False																
                                                                        client.sendData("\x06"+"\x14",["<R>Desativado"])

                                        elif event == "colorall3":
                                                if self.privilegeLevel>=5:	
                                                  for playerCode, client in self.room.clients.items():												
                                                        if not client.isCornonome:														
                                                                client.isCornonome = True
                                                                furnonome = "FF0000"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                client.room.sendAllBin("\x1d\x04", struct.pack("!i", int(clientddd.playerCode))+hexcolor)
                                                                client.sendData("\x06"+"\x14",["<R>Seu Nome Está Vermelho."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        client.isCornonome = False																
                                                                        client.sendData("\x06"+"\x14",["<R>Desativado"])																		
																		
                                        elif event == "nomevermelho":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCornonome:
                                                                self.isCornonome = True
                                                                furnonome = "FF0000"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["Seu Nome Está Vermelho."])
                                                        else:																
                                                                if self.isCornonome:
                                                                        self.isCornonome = False																
                                                                        self.sendData("\x06"+"\x14",["<R>Desativado"])	

                                        elif event == "nomeazul":
                                                if self.privilegeLevel>=2:
                                                        if not self.isCornonomez:
                                                                self.isCornonomez = True
                                                                furnonome = "0D00FF"																
                                                                hexcolor = struct.pack('!i', int(furnonome, 16))
                                                                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                                                                self.sendData("\x06"+"\x14",["Seu Nome Está Azul."])
                                                        else:																
                                                                if self.isCornonomez:
                                                                        self.isCornonomez = False																
                                                                        self.sendData("\x06"+"\x14",["<R>Desativado"])															
																		
                                        elif event == "bombspam":
                                                if self.privilegeLevel>=10:
                                                        acount=0
                                                        while acount<100:
                                                                px = random.randrange(1, 800)
                                                                py = random.randrange(1, 400)-200
                                                                code = 34
                                                                id = 0
                                                                angle = random.randrange(1, 359)
                                                                vx = 0
                                                                vy = 0
                                                                dur = 1
                                                                data=struct.pack('!hhhhhbbbxx', id, code, px, py, angle, vx, vy, dur)
                                                                self.room.sendAllBin("\x05\x14",data)
                                                                acount+=1																		

                                        elif event == "asas":
                                                if self.privilegeLevel>=10:
                                                        if not self.isAsasad:
                                                                self.isAsasad = True
                                                                self.room.sendAllBin("\x05\x01\x09", struct.pack("!i", int(self.playerCode)))
                                                                self.sendData("\x06"+"\x14",["Asas Permanentes Ativadas"])
                                                        else:																
                                                                if self.isAsasad:
                                                                        self.isAsasad = False																
                                                                        self.sendData("\x06"+"\x14",["Você Tirou as Asas!"])																		
																
                                        elif event == "salon" or event == "room" or event == "sala":
                                                self.enterRoom(self.server.recommendRoom())
                                        elif event == "vanilla":
                                                self.enterRoom(self.server.recommendRoomPrefixed("vanilla"))
                                        elif event == "bootcamp":
                                                self.enterRoom(self.server.recommendRoomPrefixed("bootcamp"))
                                        elif event == "baffbotffa":
                                                self.enterRoom(self.server.recommendRoomPrefixed("baffbotffa"))
                                        elif event == "sharpie":
                                                self.enterRoom(self.server.recommendRoomPrefixed("sharpie"))
                                        elif event == "control":
                                                self.enterRoom(self.server.recommendRoomPrefixed("#control"))
                                        elif event == "blrace":
                                                self.enterRoom(self.server.recommendRoomPrefixed("#blrace"))	
                                        elif event == "tb":
                                                self.enterRoom(self.server.recommendRoomPrefixed("#trainingbootcamp"))	
                                        elif event == "traitor":
                                                self.enterRoom(self.server.recommendRoomPrefixed("#traitor"))
                                        elif event == "ratapult":
                                                self.enterRoom(self.server.recommendRoomPrefixed("ratapult"))														
                                        elif event == "ralute":
                                                self.enterRoom(self.server.recommendRoomPrefixed("ralute"))													
                                        elif event == "racing":
                                                self.enterRoom(self.server.recommendRoomPrefixed("racing"))
                                        elif event == "tribewar":
                                                self.enterRoom(self.server.recommendRoomPrefixed("*tribewar"))												
                                        elif event == "defilante":
                                                self.enterRoom(self.server.recommendRoomPrefixed("defilante"))
                                        elif event == "tutorial":
                                                self.enterRoom("\x03"+"[Tutorial] "+self.username)
                                        elif event == "survivor":
                                                self.enterRoom(self.server.recommendRoomPrefixed("survivor"))
                                        elif event == "mt":
                                                if self.isInTribe:
                                                        if self.muteTribe:
                                                                self.sendActivateTribeChat(self.username)
                                                                self.muteTribe = False
                                                        else:
                                                                self.sendDeactivateTribeChat(self.username)
                                                                self.muteTribe = True
                                        elif event == "silence":
                                                pass #Now in parseData
                                        elif event == "ld":
                                                self.sendData("\x1A" + "\x04", ["<BL>"+str(self.loaderInfoUrl)+"<br>"+str(self.stageloaderInfobytesTotal)+"<br>"+str(self.stageloaderInfobytesLoaded)+"<br>"+str(self.loaderInfobytesTotal)+"<br>"+str(self.loaderInfobytesLoaded)])
                                        elif event == "lde":
                                                self.sendData("\x1A" + "\x0B")
                                        elif event in ("profil", "profile", "perfil"):
                                                self.sendProfile(self.username)

                                        elif event == "editeur":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        self.enterRoom("\x03"+"[Editeur] "+self.username)
                                                        self.sendData("\x0E" + "\x0E",[])
                                        elif event == "totem":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.micesaves>=1:
                                                                self.enterRoom("\x03"+"[Totem] "+self.username)
                                        elif event == "sauvertotem":
                                                if self.room.isTotemEditeur:
                                                        self.server.setTotemData(self.username, self.Totem[0], self.Totem[1])
                                                        self.STotem[0]=self.Totem[0]
                                                        self.STotem[1]=self.Totem[1]
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.enterRoom(self.server.recommendRoom())
                                        elif event == "resettotem":
                                                if self.room.isTotemEditeur:
                                                        self.Totem =[0,""]
                                                        self.RTotem=True
                                                        self.isDead=True
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.room.checkShouldChangeWorld()
                                        elif event == "bigo":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(10, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "caixa":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(1, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "tramp":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(7, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])														
                                        elif event == "cn":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(19, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "bomb":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(23, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "sp":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(24, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "tele1":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(26, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "tele2":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(27, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "balao":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(28, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "flexa":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(35, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "cubo":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(54, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])															
                                        elif event == "madeira":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(3, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "caixag":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(2, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "madeirag":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(4, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "bola":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(6, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "cncima":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(17, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])
                                        elif event == "cnbaixo":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(18, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "queijof":
                                                if self.privilegeLevel>=3:
                                                        self.sendBoulneige(25, 28, 7, int(1), int(1))
                                                        self.sendData("\x06" + "\x14", ["<R>Pow!"])	
                                        elif event == "darpresente":
                                                if self.privilegeLevel>=0:
                                                        self.room.sendAllBin("\x08\x2B", struct.pack("!l", int(self.playerCode)))
                                                        self.sendData("\x1A" + "\x04", ["<ROSE>Você Enviou Um Presente!"])	
										#Cores! Furs!
                                        elif event == "brasilamarelo":
                                                if self.privilegeLevel>=0:
                                                        self.color1 = "ffd200"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#ffd200'> Amarelo! </font>"])
                                        elif event == "brasilverde":
                                                if self.privilegeLevel>=0:
                                                        self.color1 = "26c954"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#26c954'> Verde! </font>"])                                                         
                                        elif event == "amarelo":
                                                if self.privilegeLevel>=0:
                                                        self.color1 = "FFF700"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#FFF700'> Amarelo! </font>"])
                                        elif event == "verdeh":
                                                if self.privilegeLevel>=0:
                                                        self.color1 = "00FF08"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#00FF08'> Verde! É Nós Brasil! </font>"])														
                                        elif event == "rosa":
                                                if self.privilegeLevel>=0:
                                                        self.color1 = "FF00B3"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#FF00B3'> Rosa! </font>"])														
										#Comandos vips!				
                                        elif event == "corvip":
                                                if self.privilegeLevel>=3:
                                                        self.color1 = "693700"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#693700'> Marrom Escuro </font>"])	
                                        elif event == "corvip2":
                                                if self.privilegeLevel>=3:
                                                        self.color1 = "FF5900"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#FF5900'> Laranja </font>"])																
                                        elif event == "corvip3":
                                                if self.privilegeLevel>=3:
                                                        self.color1 = "4A2525"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#4A2525'> Vermelho Escuro </font>"])	
                                        elif event == "corvip4":
                                                if self.privilegeLevel>=3:
                                                        self.color1 = "4C2265"
                                                        self.sendData("\x1A" + "\x04", ["<CH>[INFOVIP] Cor mudada Para:<font color='#4C2265'> Roxo </font>"])
                                        elif event == "rosa2":
                                                if self.privilegeLevel>=10:
                                                        self.color1 = "FCD9FB"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você está rosa"])	
                                        elif event == "rodhalloween":
                                                if self.privilegeLevel>=0:
                                                        self.sendData("\x06\x14", ["Faltam %s Mapas Para o Evento De Halloween Começar!" % str(10 - self.room.InitHalloweenMap)])
                                        elif event == "rodnatal":
                                                if self.privilegeLevel>=0:
                                                        self.sendData("\x06\x14", ["Faltam %s Mapas Para o Evento De Halloween Começar!" % str(100 - self.room.InitHalloweenMap)])
                                            #Baff qualquer lugar
                                        elif event == "baffbotffa-on":
                                                if self.privilegeLevel>=10:										
                                                        self.room.isBaffbotffa = True
                                                        self.room.sendAll("\x06\x14", ["Baffbotffa Ligado."])
                                        elif event == "baffbotffa-off":
                                                if self.privilegeLevel>=10:										
                                                        self.room.isBaffbotffa = False
                                                        self.room.sendAll("\x06\x14", ["Baffbotffa Desativado."])
                                        elif event == "defilante-on":
                                                if self.privilegeLevel>=10:										
                                                        self.room.isDefilante = True
                                                        self.room.sendAll("\x06\x14", ["Defilante Ligado."])
                                        elif event == "defilante-off":
                                                if self.privilegeLevel>=10:										
                                                        self.room.isDefilante = False
                                                        self.room.sendAll("\x06\x14", ["Defilante Desativado."])														
                                        elif event == "classement" or event == "ranking":
                                                Userlist = []
                                                dbcur.execute('select name, saves, first, cheese from users where privlevel = 1')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                         pass
                                                else:
                                                         for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                #Saves
                                                SaveList={}
                                                SaveListDisp=[]
                                                for user in Userlist:
                                                        SaveList[user[0]] = user[1]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([1, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([2, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([3, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([4, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([5, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([6, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([7, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([8, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([9, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                SaveListDisp.append([10, mSL, SaveList[mSL]])
                                                del SaveList[mSL]
                                                #Firsts
                                                FirstList={}
                                                FirstListDisp=[]
                                                for user in Userlist:
                                                        FirstList[user[0]] = user[2]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([6, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([7, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([8, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([9, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                FirstListDisp.append([10, mSL, FirstList[mSL]])
                                                del FirstList[mSL]
                                                #Cheese
                                                CheeseList={}
                                                CheeseListDisp=[]
                                                for user in Userlist:
                                                        CheeseList[user[0]] = user[3]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([1, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([2, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([3, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([4, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([5, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([6, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([7, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([8, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([9, mSL, CheeseList[mSL]])
                                                del CheeseList[mSL]
                                                mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                CheeseListDisp.append([10, mSL, CheeseList[mSL]])


                                                #Player Titles
                                                savetitle0 = self.server.getCurrentTitle(str(SaveListDisp[0][1]))
                                                savetitle1 = self.server.getCurrentTitle(str(SaveListDisp[1][1]))
                                                savetitle2 = self.server.getCurrentTitle(str(SaveListDisp[2][1]))
                                                savetitle3 = self.server.getCurrentTitle(str(SaveListDisp[3][1]))
                                                savetitle4 = self.server.getCurrentTitle(str(SaveListDisp[4][1]))
                                                savetitle5 = self.server.getCurrentTitle(str(SaveListDisp[5][1]))
                                                savetitle6 = self.server.getCurrentTitle(str(SaveListDisp[6][1]))
                                                savetitle7 = self.server.getCurrentTitle(str(SaveListDisp[7][1]))
                                                savetitle8 = self.server.getCurrentTitle(str(SaveListDisp[8][1]))
                                                savetitle9 = self.server.getCurrentTitle(str(SaveListDisp[9][1]))

                                                cheesetitle0 = self.server.getCurrentTitle(str(CheeseListDisp[0][1]))
                                                cheesetitle1 = self.server.getCurrentTitle(str(CheeseListDisp[1][1]))
                                                cheesetitle2 = self.server.getCurrentTitle(str(CheeseListDisp[2][1]))
                                                cheesetitle3 = self.server.getCurrentTitle(str(CheeseListDisp[3][1]))
                                                cheesetitle4 = self.server.getCurrentTitle(str(CheeseListDisp[4][1]))
                                                cheesetitle5 = self.server.getCurrentTitle(str(CheeseListDisp[5][1]))
                                                cheesetitle6 = self.server.getCurrentTitle(str(CheeseListDisp[6][1]))
                                                cheesetitle7 = self.server.getCurrentTitle(str(CheeseListDisp[7][1]))
                                                cheesetitle8 = self.server.getCurrentTitle(str(CheeseListDisp[8][1]))
                                                cheesetitle9 = self.server.getCurrentTitle(str(CheeseListDisp[9][1]))

                                                firsttitle0 = self.server.getCurrentTitle(str(FirstListDisp[0][1]))
                                                firsttitle1 = self.server.getCurrentTitle(str(FirstListDisp[1][1]))
                                                firsttitle2 = self.server.getCurrentTitle(str(FirstListDisp[2][1]))
                                                firsttitle3 = self.server.getCurrentTitle(str(FirstListDisp[3][1]))
                                                firsttitle4 = self.server.getCurrentTitle(str(FirstListDisp[4][1]))
                                                firsttitle5 = self.server.getCurrentTitle(str(FirstListDisp[5][1]))
                                                firsttitle6 = self.server.getCurrentTitle(str(FirstListDisp[6][1]))
                                                firsttitle7 = self.server.getCurrentTitle(str(FirstListDisp[7][1]))
                                                firsttitle8 = self.server.getCurrentTitle(str(FirstListDisp[8][1]))
                                                firsttitle9 = self.server.getCurrentTitle(str(FirstListDisp[9][1]))

                        
                                                #Send Package Structure 
                                                self.sendData("\x1A"+"\x0A", [str(SaveListDisp[0][1])+","+str(savetitle0)+","+str(SaveListDisp[0][2])+","+str(SaveListDisp[1][1])+","+str(savetitle1)+","+str(SaveListDisp[1][2])
                                                +","+str(SaveListDisp[2][1])+","+str(savetitle2)+","+str(SaveListDisp[2][2])
                                                +","+str(SaveListDisp[3][1])+","+str(savetitle3)+","+str(SaveListDisp[3][2])
                                                +","+str(SaveListDisp[4][1])+","+str(savetitle4)+","+str(SaveListDisp[4][2])
                                                +","+str(SaveListDisp[5][1])+","+str(savetitle5)+","+str(SaveListDisp[5][2])
                                                +","+str(SaveListDisp[6][1])+","+str(savetitle6)+","+str(SaveListDisp[6][2])
                                                +","+str(SaveListDisp[7][1])+","+str(savetitle7)+","+str(SaveListDisp[7][2])
                                                +","+str(SaveListDisp[8][1])+","+str(savetitle8)+","+str(SaveListDisp[8][2])
                                                +","+str(SaveListDisp[9][1])+","+str(savetitle9)+","+str(SaveListDisp[9][2])
                                                ,
                                                str(CheeseListDisp[0][1])+","+str(cheesetitle0)+","+str(CheeseListDisp[0][2])
                                                +","+str(CheeseListDisp[1][1])+","+str(cheesetitle1)+","+str(CheeseListDisp[1][2])
                                                +","+str(CheeseListDisp[2][1])+","+str(cheesetitle2)+","+str(CheeseListDisp[2][2])
                                                +","+str(CheeseListDisp[3][1])+","+str(cheesetitle3)+","+str(CheeseListDisp[3][2])
                                                +","+str(CheeseListDisp[4][1])+","+str(cheesetitle4)+","+str(CheeseListDisp[4][2])
                                                +","+str(CheeseListDisp[5][1])+","+str(cheesetitle5)+","+str(CheeseListDisp[5][2])
                                                +","+str(CheeseListDisp[6][1])+","+str(cheesetitle6)+","+str(CheeseListDisp[6][2])
                                                +","+str(CheeseListDisp[7][1])+","+str(cheesetitle7)+","+str(CheeseListDisp[7][2])
                                                +","+str(CheeseListDisp[8][1])+","+str(cheesetitle8)+","+str(CheeseListDisp[8][2])
                                                +","+str(CheeseListDisp[9][1])+","+str(cheesetitle9)+","+str(CheeseListDisp[9][2])
                                                ,
                                                str(FirstListDisp[0][1])+","+str(firsttitle0)+","+str(FirstListDisp[0][2])
                                                +","+str(FirstListDisp[1][1])+","+str(firsttitle1)+","+str(FirstListDisp[1][2])
                                                +","+str(FirstListDisp[2][1])+","+str(firsttitle2)+","+str(FirstListDisp[2][2])
                                                +","+str(FirstListDisp[3][1])+","+str(firsttitle3)+","+str(FirstListDisp[3][2])
                                                +","+str(FirstListDisp[4][1])+","+str(firsttitle4)+","+str(FirstListDisp[4][2])
                                                +","+str(FirstListDisp[5][1])+","+str(firsttitle5)+","+str(FirstListDisp[5][2])
                                                +","+str(FirstListDisp[6][1])+","+str(firsttitle6)+","+str(FirstListDisp[6][2])
                                                +","+str(FirstListDisp[7][1])+","+str(firsttitle7)+","+str(FirstListDisp[7][2])
                                                +","+str(FirstListDisp[8][1])+","+str(firsttitle8)+","+str(FirstListDisp[8][2])
                                                +","+str(FirstListDisp[9][1])+","+str(firsttitle9)+","+str(FirstListDisp[9][2])])
                                        elif event == "pr":
                                                if self.privilegeLevel!=0:
                                                        self.enterRoom("\x03"+"[Private] "+self.username)
                                        elif event == "prbootcamp":
                                                if self.room.PrivateRoom:
                                                        if self.room.namewihout == "\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.currentWorld = "-1"
                                                                self.room.isBootcamp = True
                                                                self.room.autoRespawn = True
                                                                self.room.roundTime = 360
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = False
                                                                self.room.isSandbox = False
                                                                self.room.specificMap = False
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = self.room.isSandbox
                                                                self.room.nobodyIsShaman = self.room.isBootcamp
                                                                self.room.PRShamanIsShaman = False
                                                                self.room.resetRoom()
                                        elif event == "prnormal":
                                                if self.room.PrivateRoom:
                                                        if self.room.namewihout == "\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.isBootcamp = False
                                                                self.room.autoRespawn = False
                                                                self.room.roundTime = 120
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = False
                                                                self.room.specificMap = False
                                                                self.room.isSandbox = False
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = self.room.isSandbox
                                                                self.room.nobodyIsShaman = self.room.isBootcamp
                                                                self.room.PRShamanIsShaman = False
                                                                self.room.resetRoom()
                                        elif event == "prsandbox":
                                                if self.room.PrivateRoom:
                                                        if self.room.namewihout == "\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.isBootcamp = False
                                                                self.room.autoRespawn = True
                                                                self.room.roundTime = 0
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = True
                                                                self.room.isSandbox = True
                                                                self.room.specificMap = True
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = False
                                                                self.room.nobodyIsShaman = False
                                                                self.room.PRShamanIsShaman = True
                                                                self.room.resetRoom()
                                        elif event == "prclose":
                                                if self.room.PrivateRoom:
                                                        if self.room.namewihout == "\x03[Private] "+self.username:
                                                                self.room.moveAllRoomClients("", True)
                                        elif event in ("kill", "suicide", "bubbles", "die"):
                                                if not self.isDead:
                                                        self.isDead = True
                                                        self.score -= 1
                                                        if self.score < 0:
                                                                self.score = 0
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.room.checkShouldChangeWorld()
                                        elif event == "re" or event == "respawn":
                                                if self.privilegeLevel>=10:
                                                        if self.isDead:
                                                                self.room.respawnSpecific(self.username)
                                                                if self.isShaman:
                                                                        lol = "runbin 01010005081401345"
                                                                        data = str(lol.split(" ", 1)[1]).replace(" ","")
                                                                        eventcodes=data[:4]
                                                                        data=data[4:]
                                                                        #self.sendData(self.HexToByte(eventcodes), self.HexToByte(data),True)
                                                                        self.room.sendAllBin(self.HexToByte(eventcodes), self.HexToByte(data))
                                        #Minigames para a Tribo ^_^'
                                        elif event == "neige-ont":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:
                                                                self.sendStartSnowStorm()
                                                                self.room.sendAll("\x06\x14", ["<ROSE> Woooooh! A Neve Foi Ativada! ^_^'"])																
                                        elif event == "neige-offt":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:
                                                                self.sendEndSnowStorm()
                                                                self.room.sendAll("\x06\x14", ["<ROSE> Woooooh! A Neve Foi Desativada! ^_^'"])																
                                        elif event == "baffbotffa-ont":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isBaffbotffa = True
                                                                self.room.sendAll("\x06\x14", ["<V>Baffbotffa Ligado Pelo Dono Da Tribo! (Os Mapas Do Mini-Games Rolaram Depois Do Mapa 0!)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "baffbotffa-offt":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:								
                                                                self.room.isBaffbotffa = False
                                                                self.room.sendAll("\x06\x14", ["<V>Baffbotffa Desligado Pelo Dono Da Tribo! (Mapa Fixado 0)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "defilante-ont":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isDefilante = True
                                                                self.room.sendAll("\x06\x14", ["<V>Defilante Ligado Pelo Dono Da Tribo! (Os Mapas Do Mini-Games Rolaram Depois Do Mapa 0!)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "defilante-offt":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isDefilante = False
                                                                self.room.sendAll("\x06\x14", ["<V>Defilante Desligado Pelo Dono Da Tribo! (Mapa Fixado 0)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "ralute-ont":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isRalute = True
                                                                self.room.sendAll("\x06\x14", ["<V>Ralute Foi Ligado Pelo Dono Da Tribo! (Os Mapas Do Mini-Games Rolaram Depois Do Mapa 0!)"])
                                                                self.room.worldChangeSpecific(0)
                                        elif event == "spgame-on":
                                                if self.privilegeLevel>=8:										
                                                        self.room.isSpgame = True
                                                        self.room.sendAll("\x06\x14", ["<VP>Spgame Ligado."])
                                        elif event == "spgame-off":
                                                if self.privilegeLevel>=8:										
                                                        self.room.isSpgame = False
                                                        self.room.sendAll("\x06\x14", ["<R>Spgame Desativado."])														
                                        elif event == "sharpie-on":
                                                if self.privilegeLevel>=8:										
                                                        self.room.isSharpie = True
                                                        self.room.sendAll("\x06\x14", ["<VP>Sharpie Ligado."])														
                                        elif event == "sharpie-off":
                                                if self.privilegeLevel>=8:										
                                                        self.room.isSharpie = False
                                                        self.room.sendAll("\x06\x14", ["<R>Sharpie Desativado."])																	
                                        elif event == "ralute-offt":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isRalute = False
                                                                self.room.sendAll("\x06\x14", ["<V>Ralute Foi desligado pelo dono da Tribo! (Mapa Fixado 0)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "racing-ont":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isRacingRoom = True
                                                                self.room.sendAll("\x06\x14", ["<V>Racing Foi Foi Ligado Pelo Dono Da Tribo! (Os Mapas Do Mini-Games Rolaram Depois Do Mapa 0!)"])
                                                                self.room.worldChangeSpecific(0)																
                                        elif event == "racing-offt":
                                                if self.room.isTribehouse:
                                                        if int(self.TribeRank) >= 8:									
                                                                self.room.isRacingRoom = True
                                                                self.room.sendAll("\x06\x14", ["<V>Racing Foi Foi Desigado Pelo Dono Da Tribo! (Os Mapas Do Mini-Games Rolaram Depois Do Mapa 0!)"])
                                                                self.room.worldChangeSpecific(0)
                                        elif event == "minigameslist":									
                                                self.sendData("\x1A\x1A", ["<TI>Mini-Games Para A Sua Tribo</TI><BR><BR><BR><J>BaffBotFFA - <N>/BaffBotFFA-ont<BR><J>Desligar BaffBotFFA - <N>/BaffBotFFA-Offt<BR><BR><J>Racing - <N>/Racing-Ont<BR><J>Desligar Racing - <N>/Racing-Offt<BR><BR><J>Ralute - <N>/Ralute-Ont<BR><J>Desligar Ralute - <N>/Ralute-Offt<BR><BR><J>Defilante - <N>/Defilante-Ont<BR><J>Desligar Defilante - <N>/Defilante-Offt<BR><BR><J>Neve - <N>/Neige-Ont<BR><J>Desligar Neve - <N>/Neige-Offt"])																
																

                                        elif event in ("killall", "map", "np"):
                                                if not self.room.votingMode:
                                                        if self.privilegeLevel>=3:
                                                                self.room.killAll()
                                                        else:
                                                                if self.room.namewihout == "\x03[Private] "+self.username:
                                                                        if event == "np":
                                                                                pass
                                                                        elif event == "killall":
                                                                                pass
                                                                        else:
                                                                                if self.room.isBootcamp:
                                                                                        pass
                                                                                else:
                                                                                        self.room.killAll()
                                                                elif self.room.isTribehouse:
                                                                        if self.isInTribe:
                                                                                if re.search("C", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                        self.room.killAll()
                                                                                else:
                                                                                        self.sendTribePermisson()
                                        elif event in ("music", "musique", "stop"):
                                                if self.privilegeLevel>=4:
                                                        self.sendStopMusic()
                                                elif self.room.isTribehouse:
                                                        if event == "musique":
                                                                if self.isInTribe:
                                                                        if re.search("z", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                self.sendStopMusic()
                                        elif event == "facebook":
                                                if self.privilegeLevel>=0:
                                                        pass
                                                else:
                                                        dbcur.execute('select facebook from users where name = ?', [self.username])
                                                        rrf = dbcur.fetchone()
                                                        if rrf is None:
                                                                pass
                                                        else:
                                                                if rrf[0] == 0:
                                                                        self.shopcheese += 100
                                                                        self.shopfraises += 100
                                                                        dbcur.execute('UPDATE users SET facebook = ? WHERE name = ?', [1, self.username])
                                                                else:
                                                                        pass
                                        elif event == "repairmae":
                                                        if self.privilegeLevel>=2:
                                                            pass
                                                        else:
                                                            dbcur.execute('select coins from users where name = ?', [self.username])															
                                                            rrf = dbcur.fetchone()
                                                            if rrf is None:
                                                                pass
                                                            else:
                                                                for player in self.room.clients.values():
                                                                        if player.username == self.username:
                                                                                player.sendPlayerDisconnect(player.playerCode)
                                                                                self.room.removeClient(player)
                                                                                player.transport.loseConnection()
                                                                                break
                                                                self.sendData("\x1A" + "\x1A", ["<J>Desbugada"])									
                                                                dbcur.execute('UPDATE users SET mae = ? WHERE name = ?', [0, self.username])																		
                                        elif event == "repairshop":
                                                        if self.privilegeLevel>=0:
                                                            pass
                                                        else:
                                                            dbcur.execute('select shop from users where name = ?', [self.username])
                                                            dbcur.execute('select shopcheese from users where name = ?', [self.username])
                                                            dbcur.execute('select facebook from users where name = ?', [self.username])
                                                            dbcur.execute('select fraises from users where name = ?', [self.username])															
                                                            dbcur.execute('select shoptitlelist from users where name = ?', [self.username])
                                                            dbcur.execute('select ColorInfo from users where name = ?', [self.username])
                                                            dbcur.execute('select look from users where name = ?', [self.username])	
                                                            dbcur.execute('select mae from users where name = ?', [self.username])
                                                            dbcur.execute('select coins from users where name = ?', [self.username])															
                                                            rrf = dbcur.fetchone()
                                                            if rrf is None:
                                                                pass
                                                            else:
                                                                for player in self.room.clients.values():
                                                                        if player.username == self.username:
                                                                                player.sendPlayerDisconnect(player.playerCode)
                                                                                self.room.removeClient(player)
                                                                                player.transport.loseConnection()
                                                                                break
                                                                self.sendData("\x1A" + "\x1A", ["<J>Desbugada"])									
                                                                dbcur.execute('UPDATE users SET shop = ? WHERE name = ?', [0, self.username])
                                                                dbcur.execute('UPDATE users SET shopcheese = ? WHERE name = ?', [10000, self.username])
                                                                dbcur.execute('UPDATE users SET facebook = ? WHERE name = ?', [0, self.username])
                                                                dbcur.execute('UPDATE users SET fraises = ? WHERE name = ?', [10000, self.username])																
                                                                dbcur.execute('UPDATE users SET shoptitlelist = ? WHERE name = ?', [0, self.username])
                                                                dbcur.execute('UPDATE users SET ColorInfo = ? WHERE name = ?', ["78583a#40404", self.username])	
                                                                dbcur.execute('UPDATE users SET look = ? WHERE name = ?', ["1;0,0,0,0,0,0,0,0,0", self.username])
                                                                dbcur.execute('UPDATE users SET mae = ? WHERE name = ?', [0, self.username])
                                                                dbcur.execute('UPDATE users SET coins = ? WHERE name = ?', [200, self.username])																
                                        elif event == "csr":
                                                if self.privilegeLevel>=4:
                                                        self.room.changeSyncroniserRandom()
                                        elif event == "rsandbox":
                                                if self.privilegeLevel>=10:
                                                        self.room.resetSandbox()
                                        elif event == "online": 
                                                if self.privilegeLevel>=5: 
                                                        players = "" 
                                                        for room in self.server.rooms.values(): 
                                                                for playerCode, client in room.clients.items():
                                                                        if client.privilegeLevel>=10:
                                                                                rank = "<font color='#FFD700'>Administrador</font>"
									elif client.privilegeLevel>=8:
                                                                                rank = "<font color='#14E4FF'>Coordenador</font>"		
                                                                        elif client.privilegeLevel>=6:
                                                                                rank = "<font color='#14E4FF'>Mega Moderador</font>"
                                                                        elif client.privilegeLevel>=5:
                                                                                rank = "<font color='#F3FA28'>Moderador</font>"
                                                                        elif client.privilegeLevel>=4:
                                                                                rank = "<font color='#96a984'>Mapcrew</font>"
									elif client.privilegeLevel>=3:
                                                                                rank = "<font color='#F3FA28'>Helper</font>"
                                                                        elif client.privilegeLevel>=2:
                                                                                rank = "<font color='#F3FA28'>Vip</font>"
                                                                        elif client.privilegeLevel>=1:
                                                                                rank = "<font color='#F3FA28'>Player</font>"
                                                                        else:
                                                                                if client.privilegeLevel>=0:
                                                                                        rank = "<font color='#FF0000'>Guest"
                                                                        
                                                                players = "%s - %s : %s" % (client.username, rank, client.room.name)
                                                        self.sendData("\x06\x14", [players])
                                        elif event == "startsnow":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6 or self.privilegeLevel>=5:
                                                        self.sendStartSnowStorm()
                                        elif event == "stopsnow":
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6 or self.privilegeLevel>=5:
                                                        self.sendEndSnowStorm()
                                        elif event == "newhat":
                                                if self.privilegeLevel>=10:
                                                        self.sendNewHat()
                                        elif event == "aexe":
                                                if self.privilegeLevel>=5:
                                                        self.sendData("" + "",["<N>List of Mobs: \n<CH>1123 <J>(Boss)\n <CH>358 <J>(Ghost)\n <CH>627 <J>(Skeleton)"])
                                        elif event == "sendbarco":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x06")
                                        elif event == "movebarco":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x02")
                                        elif event == "sendvento":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x03")
                                        elif event == "sendchuva":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x04")
                                        elif event == "sendtempestade":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x05")
                                        elif event == "sendraio":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x07")														
                                        elif event == "runbin":
                                                if self.privilegeLevel>=4:
                                                        self.sendData("\x06"+"\x14",["Seu Código é: "+str(self.playerCode)])
                                                        self.sendData("\x06"+"\x14",["O Seu Código em Hexadecimal é: "+self.ByteToHex(struct.pack("%sL" % "!", int(self.playerCode)))])
                                        elif event == "tribestats" or event == "tribestat":
                                                if self.privilegeLevel!=0:
                                                        mypointsCount = self.server.getPointsCount(self.username)
                                                        if self.Langue.lower() == "br":
                                                                self.sendData("\x06"+"\x14",["Tribo atual: <J>"+str(self.TribeName)])
                                                                self.sendData("\x06"+"\x14",["Pontos da tribo : <V>"+str(mypointsCount)])
                                                        else:
                                                                self.sendData("\x06" + "\x14", ["Baffbotffa Points: <V>"+str(mybaffCount)])
					elif event == "irebot":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestart(5, 1)
                                                        self.rebootTimer = reactor.callLater(1, self.server.restartServer)
                                        elif event == "freboot":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestart(5, 10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer)
                                        elif event == "reboot":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestart()
                                                        self.rebootTimer = reactor.callLater(120, self.server.restartServer)
                                        elif event == "reboot30":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestart()
                                                        self.rebootTimer = reactor.callLater(30, self.server.restartServer)														
                                        elif event == "reboot5":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestartMIN(5)
                                                        self.rebootTimer = reactor.callLater(300, self.server.restartServer)
                                                        self.rebootTimer2 = reactor.callLater(180, self.sendServerRestart)
                                        elif event == "shutdown":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerMessage("Servidor Fechando em 2 Minutos.")
                                                        self.rebootTimer = reactor.callLater(120, self.server.stopServer)
                                        elif event == "fshutdown":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerMessage("Servidor Desligando.")
                                                        self.server.stopServer()
                                        elif event == "meusmapas" or event == "mymaps":
                                                if self.privilegeLevel!=0:
                                                        
                                                        show = False
                                                        mapslist = ""
                                                        
                                                        dbcur.execute('select * from mapeditor where name = ?', [self.username])
                                                        rrfRows = dbcur.fetchall()
                                                        
                                                        if rrfRows is None:
                                                                if self.Langue == "br":
                                                                        mapslist="Você Ainda Não Tem Nenhum Mapa."
                                                                elif self.Langue == "en":
                                                                        mapslist="You don't have maps."
                                                                elif self.Langue == "es":
                                                                        mapslist="Usted no tiene mapas."
                                                        else:
                                                                for rrf in rrfRows:
                                                                        if not show:
                                                                                mapslist = "Mapas:"
                                                                                show = True
                                                                        mapslist += "<br>@" + str(rrf[1]) + " - P"+str(rrf[5])
                                        
                                                        self.sendData("\x1A" + "\x1A",[mapslist])
##############----------------------------------------------------------------------------------------------------------------------#####################################################
                                        elif event == "equipe":
                                                if self.privilegeLevel >= 1:
                                                        maplist = []
                                                        mapslist = ""
                                                        priv = ""
                                                        dbcur.execute('select * from users where privLevel = 10') and dbcur1.execute('select * from users where privLevel = 8') and dbcur2.execute('select * from users where privLevel = 6') and dbcur3.execute('select * from users where privLevel = 5') and dbcur4.execute('select * from users where privLevel = 4') and dbcur5.execute('select * from users where privLevel = 3')
                                                        rrfRows = dbcur.fetchall()
                                                        rrfRows1 = dbcur1.fetchall()
                                                        rrfRows2 = dbcur2.fetchall()
                                                        rrfRows3 = dbcur3.fetchall()
                                                        rrfRows4 = dbcur4.fetchall()
                                                        rrfRows5 = dbcur5.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>Administrador</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)
                                                                for rrf in rrfRows1:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>Coordenador</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)
                                                                for rrf in rrfRows2:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>Mega Moderador</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)
                                                                for rrf in rrfRows3:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>Moderador</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)
                                                                for rrf in rrfRows4:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>MapCrew</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)
                                                                for rrf in rrfRows5:
                                                                        name=rrf[0]
                                                                        privlevel=rrf[3]
                                                                        priv="<ROSE>Helper</ROSE>"
                                                                        mapslist=mapslist+"<br>"+str(name)+" - "+str(priv)		
                                                        self.sendData("\x1A" + "\x1A",[mapslist])
###########-----------------------------------------------------------------------------------------------------------------------------------------####################################														
                                        elif event == "bcstats":
                                                if self.privilegeLevel!=0:
                                                        mybcCount = self.server.getBootcampCount(self.username)
                                                        if self.Langue.lower() == "br":
                                                                self.sendData("\x06" + "\x14", ["Bootcamps Completados: <V>"+str(mybcCount)])
                                                        else:
                                                                self.sendData("\x06" + "\x14", ["Completed Bootcamps: <V>"+str(mybcCount)])
                                        elif event == "pp":
                                                if self.privilegeLevel>=5 or self.privilegeLevel==2:
                                                    self.sendData("\x06" + "\x14",["Comandos de avaliador de mapas:"])
                                                    self.sendData("\x06" + "\x14",["<J>Comandos para avaliar mapas:"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p0 <N>- Mapa em rotação"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p1 <N>- Permanenete"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p2 <N>- Survivor (Deletado)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p3 <N>- BootCamp"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p4 <N>- Mapa de Shaman"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p5 <N>- Arte"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p6 <N>- Mecanismo"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p7 <N>- Sem Shaman (Racing)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p8 <N>- Mapa de cooperação (Dois Shamans)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p9 <N>- Mapa bom (melhor do que protegido)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p10 <N>- Survivor"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p11 <N>- Vampire"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p13 <N>- Bootcamp+"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p17 <N>- Racing"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p18 <N>- Defilante"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p22 <N>- Cafofo de Tribo"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p43 <N>- Deletado (Ofencivo)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p44 <N>- Deletado\n"])
                                                    self.sendData("\x06" + "\x14",["<J>Comandos para deletar mapas:"])
                                                    self.sendData("\x06" + "\x14",["<CH>/del <N>- Deletar Mapa"])
                                                    self.sendData("\x06" + "\x14",["<CH>/harddel <N>- Deletar mapa da DB (Somente para admministradores)"])	
                                        elif event == "errorlog":
                                                if self.privilegeLevel==10:
                                                        logFile = open("error.log", "rb")
                                                        logData = logFile.read()
                                                        logFile.close()
                                                        self.sendData("\x06" + "\x14",[logData.replace("<", "&amp;lt;").replace("\x0D\x0A", "\x0A")])
                                        elif event == "mods" or event == "modlist" or event == "modson":
                                                if self.privilegeLevel != 0:
                                                        name = "Nenhum Moderador Online."
                                                        for room in self.server.rooms.values():
                                                            for playerCode, client in room.clients.items():
                                                                if not client.username.startswith("Bot"):
                                                                        if client.privilegeLevel in [10,8]:
                                                                                if client.username == "Ladraodll": 
                                                                                        if name == "Nenhum Moderador Online.":
                                                                                            name = "<CH>"+client.username
                                                                                        else:
                                                                                            name = name+"<ROSE>, <CH>"+client.username
                                                                                else:
                                                                                        if name == "Nenhum Moderador Online.":
                                                                                            name = "<BV>"+client.username
                                                                                        else:
                                                                                            name = name+"<ROSE>, <R>"+client.username
                                                                        elif client.privilegeLevel in [6,5]:
                                                                                if name == "Nenhum Moderador Online.":
                                                                                    name = "<VP>"+client.username
                                                                                else:
                                                                                    name = name+"<ROSE>, <VP>"+client.username
                                                                        msg = name
                                                        self.sendData("\x06" + "\x14",["<N>Mods Online:\n<ROSE>"+msg])														
                                        elif event == "clearerrorlog":
                                                if self.privilegeLevel==10:
                                                        try:
                                                                logFile = open("error.log", "w")
                                                                logFile.close()
                                                                self.sendData("\x06" + "\x14",["Cleared error log."])
                                                        except IOError, e:
                                                                self.sendData("\x06" + "\x14",[str(e).replace("Errno", "Error")])
                                                                #self.sendData("\x06" + "\x14",["Try /clearerrorlog2 to try clearing log while restarting server."])													
                                        elif event == "vipcomand":
                                                if self.privilegeLevel>=2:
                                                        self.sendData("\x1A" + "\x1A", ["Cores<BR><BR>/Corvip<BR>/Corvip2<BR>/Corvip3<BR>/Corvip4<BR><BR>Lançadores<BR><BR>/Cn<BR>/Bigorna<BR>/Bomb<BR>/CnBaixo<BR>/Cncima<BR>/madeirag<BR>/madeira<BR>/caixag<BR>/caixa<BR>/tramp<BR>/cubo<BR><BR>titles<BR><BR>/mtitle<BR>/smtitle"])
                                        elif event == "comandosmc":
                                                if self.privilegeLevel>=4:
                                                        self.sendData("\x1A" + "\x1A", ["<TI>Chat Mensagens</TI><BR><BR>Para todos: /mapc +[Mensagem]<BR>Para a moderação: /mc +[Mensagem]<BR><BR><BR><TI>Validação de mapas:</TI><BR><BR>/p1 - Mapa protegido<BR>/p2 - mapa de evento<BR>/p3 - mapa de bootcamp<BR>/p4 - mapa de 1 shaman<BR>/p5 - mapa de arte<BR>/p6 - mapa mecanismo<BR>/p7 - mapa racing<BR>/p8 - Mapa de Dois shamans<BR>/p9 - mapa diverso<BR>/p10 - mapa survivor<BR>/p11 - mapa survivor vampiro<BR>/p17 - mapa racing Com shaman<BR>/p18 - mapa defilante<BR>/p22 - tribe house<BR>/p31 - mapa baffbotffa<BR>/p50 - mapa ralute<BR><BR><BR><TI>Deletação de mapas</TI><BR><BR>Deletar Mapa /del<BR>Deletar Mapa Permanente /harddel<BR><BR><BR><TI>Mudar os mapas</TI><BR><BR>Modo rapido - /np @+Codigo<BR>Modo Depois Da Partida - /npp @+Codigo"])														
                                        elif event == "comandos":
                                                if self.privilegeLevel>=0:
                                                        self.sendData("\x1A" + "\x1A", ["<J>___________________Comandos___________________<BR><BR><V>Arrumar a loja: <N>/repairshop<BR><V>Ver Ranking: <N>/ranking<BR><V>Ver o Ranking Do Minigame Ralute: <N>/Raluterank<BR><V>Ver Ranking De bootcamp: <N>/bcranking<BR><V>Reportando um User (Minimo 50 queijos coletados): <N>/report +NomeDoJogador<BR><V>Enviando um mapa: <N>/vmap @+codigo<BR><BR><J>___________________Titles Gratis___________________<BR><BR><V>Todos os titulos natal: <BR><N>/natal1<BR><N>/natal2<BR><N>/natal3<BR><N>/natal4<BR><N>/natal5<BR><BR><V>Title ''The cheese Guardian'': <N>/oguardiãodosf<BR><BR><J>___________________Salas___________________<BR><BR><V>Ver Todos os Minigames: <N>/module<BR><BR><J>___________________Equipe___________________<BR><BR><V>Ver os Moderadores Online: <N>/moderadores<BR><V>Ver a equipe: <N>/equipe<BR><V>Ver os Vips Online: <N>/vipers<BR><BR><BR><J>Minigames Para a Tribo<BR><BR><V> digite - <N>/minigameslist"])														
                                        elif event == "minigames":
                                                if self.privilegeLevel>=0:
                                                        self.sendData("\x1A" + "\x04", ["<J><U> - Lista de Minigames!</U><BR><BR><font color='#55FF00'> - Baffbotffa: /baffbotffa</font><BR><font color='#55FF00'> - Racing: /racing</font><BR><font color='#55FF00'> - Survivor: /survivor</font><BR><font color='#55FF00'> - Ralute: /ralute</font><BR><font color='#55FF00'> - Vanilla: /Vanilla</font><BR><font color='#55FF00'> - Bootcamp: /bootcamp</font><BR><font color='#55FF00'> - Defilante: /defilante</font>"])
                                        elif event == "module":
                                                minigames = ["sharpie","spgame", "control", "blrace", "trainingbootcamp", "traitor", "baffbotffa", "ralute", "racing", "fight", "survivor", "bootcamp", "testing"]
                                                result = ""
                                                for minigame in minigames:
                                                        playercount=0
                                                        for room in self.server.rooms.values():
                                                                if room.name.lower()[3:].startswith("#"+minigame):
                                                                        playercount=playercount+room.getPlayerCount()
                                                        result = result + "\n<VP>#"+minigame+"<BL> : "+str(playercount)
                                                self.sendData("\x06" + "\x14",[result])	
                                        elif event == "mapranking" or event == "mapclassment":
                                                        if self.privilegeLevel>=5:
                                                                Userlist = []
                                                                dbcur.execute('select code, yesvotes from mapeditor')
                                                                rrfRows = dbcur.fetchall()
                                                                if rrfRows is None:
                                                                        pass
                                                                else:
                                                                        for rrf in rrfRows:
                                                                                Userlist.append(rrf)
                                                                #Maps
                                                                FirstList={}
                                                                FirstListDisp=[]
                                                                for user in Userlist:
                                                                        FirstList[user[0]] = user[1]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([6, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([7, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([8, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([9, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([10, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                self.sendData("\x1A" + "\x04", ["<VP>Map Ranking <V>(Votes)"])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[0][0])+" - <N>@"+str(FirstListDisp[0][1])+" <V>- "+str(FirstListDisp[0][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[1][0])+" - <N>@"+str(FirstListDisp[1][1])+" <V>- "+str(FirstListDisp[1][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[2][0])+" - <N>@"+str(FirstListDisp[2][1])+" <V>- "+str(FirstListDisp[2][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[3][0])+" - <N>@"+str(FirstListDisp[3][1])+" <V>- "+str(FirstListDisp[3][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[4][0])+" - <N>@"+str(FirstListDisp[4][1])+" <V>- "+str(FirstListDisp[4][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[5][0])+" - <N>@"+str(FirstListDisp[5][1])+" <V>- "+str(FirstListDisp[5][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[6][0])+" - <N>@"+str(FirstListDisp[6][1])+" <V>- "+str(FirstListDisp[6][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[7][0])+" - <N>@"+str(FirstListDisp[7][1])+" <V>- "+str(FirstListDisp[7][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[8][0])+" - <N>@"+str(FirstListDisp[8][1])+" <V>- "+str(FirstListDisp[8][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[9][0])+" - <N>@"+str(FirstListDisp[9][1])+" <V>- "+str(FirstListDisp[9][2])])												
                                        elif event == "bcranking":
                                                Userlist = []
                                                dbcur.execute('select name, bootcamp from users')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                         pass
                                                else:
                                                         for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                #Saves
                                                BotcampList={}
                                                BotcampListDisp=[]
                                                for user in Userlist:
                                                        BotcampList[user[0]] = user[1]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([1, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([2, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([3, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([4, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([5, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([6, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([7, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([8, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([9, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]
                                                mSL=max(BotcampList.iterkeys(), key=lambda k: BotcampList[k])
                                                BotcampListDisp.append([10, mSL, BotcampList[mSL]])
                                                del BotcampList[mSL]

                                                self.sendData("\x1A"+"\x1A", ["<TI>Ranking Do Bootcamp</TI><br><br><font color='#FFFFFF'>1 - "+str(BotcampListDisp[0][1])+" - "+str(BotcampListDisp[0][2])
                                                +"<br><br><J>2 - "+str(BotcampListDisp[1][1])+" - "+str(BotcampListDisp[1][2])
                                                +"<br><br><J>3 - "+str(BotcampListDisp[2][1])+" - "+str(BotcampListDisp[2][2])
                                                +"<br><br><J>4 - "+str(BotcampListDisp[3][1])+" - "+str(BotcampListDisp[3][2])
                                                +"<br><br><J>5 - "+str(BotcampListDisp[4][1])+" - "+str(BotcampListDisp[4][2])
                                                +"<br><br><J>6 - "+str(BotcampListDisp[5][1])+" - "+str(BotcampListDisp[5][2])
                                                +"<br><br><J>7 - "+str(BotcampListDisp[6][1])+" - "+str(BotcampListDisp[6][2])
                                                +"<br><br><J>8 - "+str(BotcampListDisp[7][1])+" - "+str(BotcampListDisp[7][2])
                                                +"<br><br><J>9 - "+str(BotcampListDisp[8][1])+" - "+str(BotcampListDisp[8][2])
                                                +"<br><br><J>10 - "+str(BotcampListDisp[9][1])+" - "+str(BotcampListDisp[9][2])+"</font>"])
                                        elif event == "userank":
                                                Userlist = []
                                                dbcur.execute('select name, points from users')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                         pass
                                                else:
                                                         for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                #Ranking de Tribos
                                                TribeList={}
                                                TribeListDisp=[]
                                                for user in Userlist:
                                                        TribeList[user[0]] = user[1]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([1, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([2, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([3, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([4, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([5, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([6, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([7, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([8, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([9, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([10, mSL, TribeList[mSL]])
                                                del TribeList[mSL]

                                                self.sendData("\x1A" + "\x04", ["Ranking de usuários que mais captaram pontos."])
                                                self.sendData("\x1A"+"\x1A", ["<b><J>1 - <CH>"+str(TribeListDisp[0][1])+" <VP>- "+str(TribeListDisp[0][2])
                                                +"<br><br><VP>2 - <N>"+str(TribeListDisp[1][1])+" <J>- "+str(TribeListDisp[1][2])
                                                +"<br><br><V>3 - <BV>"+str(TribeListDisp[2][1])+" <ROSE>- "+str(TribeListDisp[2][2])
                                                +"<br><br><V>4 - <BV>"+str(TribeListDisp[3][1])+" <ROSE>- "+str(TribeListDisp[3][2])
                                                +"<br><br><V>5 - <BV>"+str(TribeListDisp[4][1])+" <ROSE>- "+str(TribeListDisp[4][2])
                                                +"<br><br><V>6 - <BV>"+str(TribeListDisp[5][1])+" <ROSE>- "+str(TribeListDisp[5][2])
                                                +"<br><br><V>7 - <BV>"+str(TribeListDisp[6][1])+" <ROSE>- "+str(TribeListDisp[6][2])
                                                +"<br><br><V>8 - <BV>"+str(TribeListDisp[7][1])+" <ROSE>- "+str(TribeListDisp[7][2])
                                                +"<br><br><V>9 - <BV>"+str(TribeListDisp[8][1])+" <ROSE>- "+str(TribeListDisp[8][2])
                                                +"<br><br><VP>10 <VI>- "+str(TribeListDisp[9][1])+" <R>- "+str(TribeListDisp[9][2])+"</b>"])												
                                        elif event == "triberank":
                                                Userlist = []
                                                dbcur.execute('select nom, points from tribu')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                         pass
                                                else:
                                                         for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                #Ranking de Tribos
                                                TribeList={}
                                                TribeListDisp=[]
                                                for user in Userlist:
                                                        TribeList[user[0]] = user[1]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([1, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([2, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([3, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([4, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([5, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([6, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([7, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([8, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([9, mSL, TribeList[mSL]])
                                                del TribeList[mSL]
                                                mSL=max(TribeList.iterkeys(), key=lambda k: TribeList[k])
                                                TribeListDisp.append([10, mSL, TribeList[mSL]])
                                                del TribeList[mSL]

                                                self.sendData("\x1A" + "\x04", ["Ranking de Tribe!"])
                                                self.sendData("\x1A"+"\x1A", ["<b><J>1 - <CH>"+str(TribeListDisp[0][1])+" <VP>- "+str(TribeListDisp[0][2])
                                                +"<br><br><VP>2 - <N>"+str(TribeListDisp[1][1])+" <J>- "+str(TribeListDisp[1][2])
                                                +"<br><br><V>3 - <BV>"+str(TribeListDisp[2][1])+" <ROSE>- "+str(TribeListDisp[2][2])
                                                +"<br><br><V>4 - <BV>"+str(TribeListDisp[3][1])+" <ROSE>- "+str(TribeListDisp[3][2])
                                                +"<br><br><V>5 - <BV>"+str(TribeListDisp[4][1])+" <ROSE>- "+str(TribeListDisp[4][2])
                                                +"<br><br><V>6 - <BV>"+str(TribeListDisp[5][1])+" <ROSE>- "+str(TribeListDisp[5][2])
                                                +"<br><br><V>7 - <BV>"+str(TribeListDisp[6][1])+" <ROSE>- "+str(TribeListDisp[6][2])
                                                +"<br><br><V>8 - <BV>"+str(TribeListDisp[7][1])+" <ROSE>- "+str(TribeListDisp[7][2])
                                                +"<br><br><V>9 - <BV>"+str(TribeListDisp[8][1])+" <ROSE>- "+str(TribeListDisp[8][2])
                                                +"<br><br><VP>10 <VI>- "+str(TribeListDisp[9][1])+" <R>- "+str(TribeListDisp[9][2])+"</b>"])

					elif event == "raluterank":
                                                Userlist = []
                                                dbcur.execute('select name, ralute from users')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                         pass
                                                else:
                                                         for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                #Saves
                                                raluteList={}
                                                raluteListDisp=[]
                                                for user in Userlist:
                                                        raluteList[user[0]] = user[1]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([1, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([2, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([3, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([4, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([5, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([6, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([7, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([8, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([9, mSL, raluteList[mSL]])
                                                del raluteList[mSL]
                                                mSL=max(raluteList.iterkeys(), key=lambda k: raluteList[k])
                                                raluteListDisp.append([10, mSL, raluteList[mSL]])
                                                del raluteList[mSL]

                                                self.sendData("\x1A"+"\x1A", ["<TI>Ralute Ranking</TI><br><br><font color='#FFFFFF'>1 - "+str(raluteListDisp[0][1])+" - "+str(raluteListDisp[0][2])
                                                +"<br><br><J>2 - "+str(raluteListDisp[1][1])+" - "+str(raluteListDisp[1][2])
                                                +"<br><br><J>3 - "+str(raluteListDisp[2][1])+" - "+str(raluteListDisp[2][2])
                                                +"<br><br><J>4 - "+str(raluteListDisp[3][1])+" - "+str(raluteListDisp[3][2])
                                                +"<br><br><J>5 - "+str(raluteListDisp[4][1])+" - "+str(raluteListDisp[4][2])
                                                +"<br><br><J>6 - "+str(raluteListDisp[5][1])+" - "+str(raluteListDisp[5][2])
                                                +"<br><br><J>7 - "+str(raluteListDisp[6][1])+" - "+str(raluteListDisp[6][2])
                                                +"<br><br><J>8 - "+str(raluteListDisp[7][1])+" - "+str(raluteListDisp[7][2])
                                                +"<br><br><J>9 - "+str(raluteListDisp[8][1])+" - "+str(raluteListDisp[8][2])
                                                +"<br><br><J>10 - "+str(raluteListDisp[9][1])+" - "+str(raluteListDisp[9][2])+"</font>"])														
                                        elif event == "ls":
                                                if self.privilegeLevel>=2:
                                                        self.server.getRoomList(self)
                                        elif event == "lst" :
                                                if self.privilegeLevel>=3:
                                                        self.server.getTribesList(self)
                                        elif event == "sy?":
                                                if self.privilegeLevel>=5:
                                                        self.sendData("\x06\x14",["Jogador SY? Atual: ["+str(self.room.getCurrentSync()+"]")])

                                        elif event in ("p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9", "p10", "p11", "p13", "p17", "p18", "p22", "p31", "p32", "p42", "p43", "p44", "p50", "p51", "p52", "p60", "p169", "p170", "p222"):
                                                if self.privilegeLevel>=4:
                                                        ident = str(event).replace("p", "")
                                                        permsPass = False
                                                        
                                                        dbcur.execute('select * from mapeditor where code = ? AND perma != 22 AND perma != 44 AND perma != 1 AND perma != 2 AND perma != 43 AND name != ?', [self.room.ISCM, self.username])
                                                        rrfRows = dbcur.fetchall()

                                                        if rrfRows is None:
                                                                permsPass = False
                                                                
                                                        else:
                                                                for rrf in rrfRows:
                                                                        permsPass = True
                                                                    
                                                        if permsPass or self.privilegeLevel>=4:
                                                                Perma = ident
                                                                mapslist = ""
                                                                theTime = int((float(thetime.time())))
                                                                Time = str(theTime).replace('.', '0')
                                                                Type = "None"
                                                                
                                                                if self.room.ISCM!=0:
                                                                        dbcur.execute('UPDATE mapeditor SET perma = ? WHERE code = ?', [Perma, self.room.ISCM])
                                                                    
                                                                        if Perma == "0":Type = "Normal"  
                                                                        elif Perma == "1":Type = "Mapa Protegido"
                                                                        elif Perma == "2":Type = "Oficial"
                                                                        elif Perma == "3":Type = "Mapa de Bootcamp"
                                                                        elif Perma == "4":Type = "Mapa de Shaman"
                                                                        elif Perma == "5":Type = "Mapa de Arte"
                                                                        elif Perma == "6":Type = "Mapa de Mecanismo"
                                                                        elif Perma == "7":Type = "Mapa Racing"
                                                                        elif Perma == "8":Type = "Cooperação - Dois Shamans"
                                                                        elif Perma == "9":Type = "Mapa Variado"
                                                                        elif Perma == "10":Type = "Survivor"
                                                                        elif Perma == "11":Type = "Mapa Vampire"
                                                                        elif Perma == "13":Type = "Mapa Bootcamp"
                                                                        elif Perma == "17":Type = "Mapa Racing"
                                                                        elif Perma == "18":Type = "Mapa Defilante"
                                                                        elif Perma == "22":Type = "Mapa Cafofo"
                                                                        elif Perma == "31":Type = "Baffbotffa"																		
                                                                        elif Perma == "32":Type = "Cooperação - Não Está em Rotação"
                                                                        elif Perma == "42":Type = "Racing - Não Está em Rotação"
                                                                        elif Perma == "43":Type = "Deletado - Ofensivo"
                                                                        elif Perma == "44":Type = "Deletado" 
                                                                        elif Perma == "50":Type = "Modo Ratapult"
                                                                        elif Perma == "51":Type = "Ratapult Room"
                                                                        elif Perma == "52":Type = "Music Room"																		
                                                                        elif Perma == "60":Type = "Spgame Room"	
                                                                        elif Perma == "169":Type = "Habbit Room"																		
                                                                        elif Perma == "170":Type = "Foot Room"																		
                                                                        elif Perma == "222":Type = "Mae Day" 																		

                                                                        self.sendData("\x06\x14", ["<J>Você definiu esse mapa permanente"])
                                                                        self.server.sendMappersChat(self, "\x06\x14", [self.username+" validou o mapa de "+str(self.server.getMapName(self.room.ISCM))+ " @"+str(self.room.ISCM)+" como: "+str(Type)+" (P"+str(Perma)+")"])
                                                        else:
                                                            pass
                                        
                                        elif event == "vacuum":
                                                if self.privilegeLevel>=10:
                                                        dbcur.execute('VACUUM')
                                                        self.sendData("\x06" + "\x14",["Done."])
                                        
                                        elif event == "update5":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer5min)
                                        elif event == "update10":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer10min)
                                        elif event == "update20":
                                                if self.privilegeLevel>=10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer20min)
                                        elif event in ("find", "search", "chercher"):
                                                if self.privilegeLevel>=3:
                                                        roomname = self.server.getFindPlayerRoomPartial(self, "", True)
                                        elif event == "extrainfo":
                                                if self.privilegeLevel==10:
                                                        if self.room.ISCM!=-1:
                                                                yesvotes=int(self.server.getMapYesVotes(self.room.ISCM))
                                                                novotes=int(self.server.getMapNoVotes(self.room.ISCM))
                                                                mapname=str(self.server.getMapName(self.room.ISCM))
                                                                perma=str(self.server.getMapPerma(self.room.ISCM))
                                                                mapnoexist=str(self.server.getMapDel(self.room.ISCM))
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                #self.sendData("\x06" + "\x14",["@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes)+" - Y:"+str(yesvotes)+" - N:"+str(novotes)+" - P:"+str(perma)+" - D:"+str(mapnoexist)+" - NM:"+str(mapname)])
                                                                self.sendModMessageChannel("Servidor", "@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes)+" - Y:"+str(yesvotes)+" - N:"+str(novotes)+" - P:"+str(perma)+" - D:"+str(mapnoexist)+" - NM:"+str(mapname))														
                                        elif event == "refset":
                                                if self.privilegeLevel>=10:
                                                        self.server.refreshSettings()
                                                        self.sendData("\x06" + "\x14",["Done."])
                                        elif event == "refspm":
                                                if self.privilegeLevel>=10:
                                                        self.server.parseSpmFile()
                                                        self.sendData("\x06" + "\x14",["Done."])
                                        elif event == "refspr":
                                                if self.privilegeLevel>=10:
                                                        self.server.parseRoomFile()
                                                        self.sendData("\x06" + "\x14",["Done."])
                                        elif event == "refnpc":
                                                if self.privilegeLevel>=10:
                                                        self.server.parseNpcFile()
                                                        self.sendData("\x06" + "\x14",["Done."])
                                        elif event == "refcommand":														
                                                if self.privilegeLevel>=10:
                                                        try:
                                                                self.server.reloadcommand(self)
                                                        except:
                                                                pass															
                                        elif event == "refgames":														
                                                if self.privilegeLevel>=10:
                                                        try:
                                                                self.server.reloadgames(self)
                                                        except:
                                                                pass	
                                        elif event == "refsql":														
                                                if self.privilegeLevel>=10:
                                                        try:
                                                                self.server.reloadsql(self)
                                                        except:
                                                                pass																	
														
                                        elif event == "reftokens":
                                                if self.privilegeLevel>=10:
                                                        try:
                                                                self.server.reloadModules(self)
                                                        except:
                                                                pass
                                        elif event == "help" or event == "aide" or event == "ajuda":
                                            if self.privilegeLevel >= 10:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos que envolvem a sala."])
                                                self.sendData("" + "",["/ch [NomeDoUsuario] <G>- Escolhe o próximo shaman."])
                                                self.sendData("" + "",["/np [Mapa] <G>- Carrega um mapa no momento."])
                                                self.sendData("" + "",["/npp [Mapa] <G>- Escolhe o mapa que será carregado na próxima partida."])
                                                self.sendData("" + "",["/p0 <G>- Coloca o mapa atual no modo 'normal'."])
                                                self.sendData("" + "",["/p1 <G>- Coloca o mapa atual no modo 'permanente'."])
                                                self.sendData("" + "",["/p2 <G>- Coloca o mapa atual no modo 'oficial'."])
                                                self.sendData("" + "",["/p3 <G>- Coloca o mapa atual no modo 'bootcamp'."])
                                                self.sendData("" + "",["/del <G>- Tira o mapa atual de rotação."])
                                                self.sendData("" + "",["/sy? <G>- Exibe o sincronizador da nasa, o chamado NASA."])
                                                self.sendData("" + "",["/csr <G>- Escolhe um novo sincronizador (NASA) aleatóriamente."])
                                                self.sendData("" + "",["/info <G>- Obtém algumas informações básicas do mapa atual."])
                                                self.sendData("" + "",["/music <G>- Desliga a música que está tocando."])
                                                self.sendData("" + "",["/music [Link] <G>- Coloca uma música para todos do servidores ouvirem."])
                                                self.sendData("" + "",["/ls <G>- Lista das salas criadas e a quantidade de jogadores em cada uma delas."])
                                                self.sendData("" + "",["/extrainfo <G>- Mostra tudo sobre o mapa atual no canal dos moderadores."])
                                                self.sendData("" + "",["/harddel <G>- Deleta definitivamente o mapa atual do banco de dados."])
                                                self.sendData("" + "",["/youtube [Link] <G>- Coloca Um Video Do Youtube,Só Funciona Em Mapas Com TV(Em Testes)."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos que envolvem os jogadores da sala."])
                                                self.sendData("" + "",["/sy [NomeDoUsuario] <G>- Define o sincronizador(NASA) atual da sala."])
                                                self.sendData("" + "",["/fromage [NomeDoUsuario] [QuantidadeDeQueijos] <G>- Doa [QuantidadeDeQueijos] a um jogador"])
                                                self.sendData("" + "",["/modo [NomeDoUsuario] <G>- Faz Com Que o User Vire 'Moderador'"])
                                                self.sendData("" + "",["/arb [NomeDoUsuario] <G>- Faz Com Que o Jogador Vire 'Arbitro ou Avaliador De Mapas'"])
                                                self.sendData("" + "",["/ip [NomeDoUsuario] <G>- Mostra o IP Do Jogador"])
                                                self.sendData("" + "",["/color [NomeDoUsuario] [CodigoDaCor] <G>- Muda a Cor Do Jogador Escolhido"])
                                                self.sendData("" + "",["/lsmap [NomeDoUsuario] <G>- Mostra Os Mapas Do Usuário"]) #Ici
                                                self.sendData("" + "",["/find [NomeDoUsuario] <G>- Mostra a Sala Onde o Jogador Se Encontra"])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos:Banir,Mutar,Desbanir"])
                                                self.sendData("" + "",["/ban [NomeDoUsuario] [Tempo] [Motivo] <G>- Banir Um Usuário"])
                                                self.sendData("" + "",["/iban [NomeDoUsuario] [Tempo] [Motivo] <G>- Banir Um Usuário Sem Aparecer Mensagem Na Sala"])
                                                self.sendData("" + "",["/unban [NomeDoUsuario] <G>- Desbanir o Usuário Escolhido"])
                                                self.sendData("" + "",["/unban [IP] <G>- Desbanir IP Escolhido"])
                                                self.sendData("" + "",["/mute [NomeDoUsuario] [Tempo] [Motivo] <G>- Mutar Um Usuário"])
                                                self.sendData("" + "",["/demute [NomeDoUsuario]<G>- Desmuta o Jogador Escolhido"])
                                                self.sendData("" + "",["/mumute [NomeDoUsuario] <G>- Desmuta o Jogador Escolhido Em MUMUTE."])
                                                self.sendData("" + "",["/log <G>- Mostra Os Usuário Banidos."])
                                                self.sendData("" + "",["/clearipbans <G>- Desbanir Todos Os IP´S Banidos No Jogo."])
                                                self.sendData("" + "",["/clearcache <G>- Deleta Os IP´S Banidos."])
                                                self.sendData("" + "",["/cleariptemp <G>- Desbanir Os IP'S Banidos Temporariamente."])
                                                self.sendData("" + "",["/viewcache <G>- Mostra Os IP'S Banidos Permanentemente."])
                                                self.sendData("" + "",["/viewiptemp <G>- Mostra Os IP'S Banidos Temporariamente."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Mensagems"])
                                                self.sendData("" + "",["/m [Texto] <G>- Fala Com e De Moderadores"])
                                                self.sendData("" + "",["/a [Texto] <G>- Fala Com Os Arbitros Do Jogo"])
                                                self.sendData("" + "",["/mss [Texto] <G>- Message Serveur"])
                                                self.sendData("" + "",["/ms [Texto] <G>- Mensagem Moderador"])
                                                self.sendData("" + "",["/sms [Texto] <G>- Fala Como Super Moderador Na Sala"])
                                                self.sendData("" + "",["/smss [Texto] <G>- Fala Igual a Message Serveur"])
                                                self.sendData("" + "",["<ROSE>/hide <G>- Fica Invísivel Na Sala"])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos Servidor"])
                                                self.sendData("" + "",["/playerlist <G>- Mostra Jogadores Onlines"])
                                                self.sendData("" + "",["/startsnow <G>- Inicia Neve Na Sala."])
                                                self.sendData("" + "",["/stopsnow <G>- Para a Neve."])
                                                self.sendData("" + "",["/newhat <G>- Mostra a Mensagem 'Wooohoooo nouveau chapeau...'(Mais Não Funciona)."])
                                                self.sendData("" + "",["/freboot <G>- Reinicia o Servidor Em 10 Segundos(Não Recomendado)"])
                                                self.sendData("" + "",["/reboot <G>- Reinicia o Servidor No Tempo De 2 Minutos."])
                                                self.sendData("" + "",["/shutdown <G>- Reinicia o Servidor No Tempo De 2 Minutos."])
                                                self.sendData("" + "",["/fshutdown <G>- Desliga o Servidor(Não Recomendado)."])
                                                self.sendData("" + "",["/vd <G>- Debug Informação."])
                                                self.sendData("" + "",["/errorlog <G>- Mostra Erros Do Log."])
                                                self.sendData("" + "",["/clearerrorlog <G>- Limpa o Log De Erros."])
                                                self.sendData("" + "",["/lsp1 <G>- Mostra Os Mapas (P1)Protegido."])
                                                self.sendData("" + "",["/lsp2 <G>- Mostra Os Mapas (P2) Permanentes."])
                                                self.sendData("" + "",["/lsp3 <G>- Mostra Os Mapas (P3) Bootcamp."])
                                                self.sendData("" + "",["/lsp4 <G>- Mostra Os Mapas (P4) Shaman."])
                                                self.sendData("" + "",["/lsp5 <G>- Mostra Os Mapas (P5) Arte."])
                                                self.sendData("" + "",["/lsp6 <G>- Mostra Os Mapas (P6) Mecanismo."])
                                                self.sendData("" + "",["/lsp7 <G>- Mostra Os Mapas (P7) Sem Shaman'Racing'."])
                                                self.sendData("" + "",["/lsp8 <G>- Mostra Os Mapas (P8) Coõperação."])
                                                self.sendData("" + "",["/lsp44 <G>- Mostra Os Mapas (P44) Deletados."])
                                                self.sendData("" + "",["/lsmaps <G>- Mostra Todos Os Mapas Do Servidor"])
                                                self.sendData("" + "",["/lsmodo <G>- Mostra Mods,Smods,MegaMods e Adms Online."])
                                                self.sendData("" + "",["/lsarb <G>- Mostra Os Arbitros ou Avaliadores Onlines."])
                                                self.sendData("" + "",["/mjoin [NomeDoUsuario] <G>- Vai a Sala Do Usuário Escolhido ou a sua Sala Privada."])
                                                self.sendData("" + "",["/move [Sala] <G>- Move Os Ratos Para a Sala Escolhida"])
                                                self.sendData("" + "",["/ds [Texto] <G>- Falar Como Desenhista"])
                                            elif self.privilegeLevel == 6:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos que afetam a sala"])
                                                self.sendData("" + "",["/ch [NomeDoUsuario] <G>- Escolhe o shaman da próxima partida."])
                                                self.sendData("" + "",["/np [Mapa] <G>- Carrega um mapa específico imediatamente."])
                                                self.sendData("" + "",["/npp [Mapa] <G>- Define um específico mapa para a próxima partida."])
                                                self.sendData("" + "",["/sy? <G>- Exibe quem é o sincronizador (NASA) da sala."])
                                                self.sendData("" + "",["/csr <G>- Escolhe um novo sincronizador (NASA) aleatóriamente."])
                                                self.sendData("" + "",["/p0 <G>- Coloca o mapa atual em modo 'Normal'"])
                                                self.sendData("" + "",["/p1 <G>- Coloca o mapa atual em modo 'Protegido/Permanente'"])
                                                self.sendData("" + "",["/p3 <G>- Coloca o mapa atual em modo 'Bootcamp'"])
                                                self.sendData("" + "",["/p4 <G>- Coloca o mapa atual em modo 'Shaman'"])
                                                self.sendData("" + "",["/p5 <G>- Coloca o mapa atual em modo 'Arte'"])
                                                self.sendData("" + "",["/p6 <G>- Coloca o mapa atual em modo 'Mecanismo'"])
                                                self.sendData("" + "",["/p7 <G>- Coloca o mapa atual em modo 'Racing/Sem Shaman'"])
                                                self.sendData("" + "",["/p8 <G>- Coloca o mapa atual em modo 'Coõperação de shamans'"])
                                                self.sendData("" + "",["/p9 <G>- Coloca o mapa atual em modo 'Diverso'"])
                                                self.sendData("" + "",["/p22 <G>- Coloca o mapa atual em modo 'Cafofo da tribo'"])
                                                self.sendData("" + "",["/p22 <G>- Tira o mapa atual da rotação de mapas. (Del)"])
                                                self.sendData("" + "",["/p44 <G>- Tira de rotação o mapa atual."])
                                                self.sendData("" + "",["/info <G>- Exibe as principais informações do mapa atual."])
                                                self.sendData("" + "",["/music <G>- Liga/Desliga o modo música."])
                                                self.sendData("" + "",["/music [Link] <G>- Coloca uma música para tocar no servidor (apenas no formato *mp3)"])
                                                self.sendData("" + "",["/ls <G>- Exibe o número de jogadores online e quais salas esses estão ocupando."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Joueur"])
                                                self.sendData("" + "",["/arb [NomeDoUsuario] <G>- Torna um usuário um 'Arbitro'"])
                                                self.sendData("" + "",["/norm [NomeDoUsuario] <G>- Torna um usuário um 'Jogador'"])
                                                self.sendData("" + "",["/ip [NomeDoUsuario] <G>- Exibe o endereço ip de um específico jogador."])
                                                self.sendData("" + "",["/ipnom [IP] <G>- Mostra todos os jogadores com um específicado endereço ip."])
                                                self.sendData("" + "",["/nomip [NomeDoUsuario] <G>- Mostra todos os usuários que um certo jogador está executando com mesmo ip."])
                                                self.sendData("" + "",["/color [NomeDoUsuario] [CódigoHEX] <G>- Define a cor de [NomeDoUsuario] como [Código]."])
                                                self.sendData("" + "",["/lsmap [NomeDoUsuario] <G>- Exibe todos os mapas existentes no servidor de um específico usuário."])
                                                self.sendData("" + "",["/sy [NomeDoUsuario] <G>- Torna um determinado usuário um sincronizador (NASA)."])
                                                self.sendData("" + "",["/fromage [NomeDoUsuario] [Quantidade] <G>- Doa [Quantidade] de queijos à um jogador."])
                                                self.sendData("" + "",["/password [NomeDoUsuario] [NovaSenha] <G>- Troca a senha atual de um jogador para [NovaSenha]."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Penas"])
                                                self.sendData("" + "",["/ban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo]"])
                                                self.sendData("" + "",["/iban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo] (Sem ninguém saber)"])
                                                self.sendData("" + "",["/unban [NomeDoUsuario] <G>- Desbane um específico usuário (<R>Atenção: Se o ip do usuário estiver banido, o usuário não poderá entrar mesmo estando desbanido<R>)."])
                                                self.sendData("" + "",["/unban [IP] <G>- Desbane um endereço ip de um usuário."])
                                                self.sendData("" + "",["/mute [NomeDoUsuario] [Tempo] [Motivo] <G>- Proibe um jogador de falar por [Tempo] horas : [Motivo]"])
                                                self.sendData("" + "",["/demute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar."])
                                                self.sendData("" + "",["/mumute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar, mas ninguém pode ver as mensagens que ele envia até que o jogador relogue-se no jogo."])
                                                self.sendData("" + "",["/log <G>- Exibe o log de banimentos e outras penas aplicadas pelos staffers."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Mensagens"])
                                                self.sendData("" + "",["/m [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 4 e estão online no momento (Moderadores, Super Moderadores, Desenvolvedores e Administradores)."])
                                                self.sendData("" + "",["/a [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 3 e estão online no momento (Arbitros, Moderadores, Super Moderadores, Desenvolvedores e Administradores)."])
                                                self.sendData("" + "",["/mss [Texto] <G>- Envia uma mensagem para todos os jogadores do servidor."])
                                                self.sendData("" + "",["/mm [Texto] <G>- Envia uma mensagem para todos da sala como Modération."])
                                                self.sendData("" + "",["/sms [Texto] <G>- Envia uma mensagem para todos da sala como Super Modération."])
                                                self.sendData("" + "",["/smss [Texto] <G>- Envia uma mensagem para todos do servidor como Super Modération."])
                                                self.sendData("" + "",["<ROSE>/hide <G>- Modo escondido, os outros jogadores não te veem (Para desativar esse modo basta digitar /unhide)."])
                                            elif self.privilegeLevel == 5:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos que afetam a sala"])
                                                self.sendData("" + "",["/ch [NomeDoUsuario] <G>- Escolhe o shaman da próxima partida."])
                                                self.sendData("" + "",["/np [Mapa] <G>- Carrega um mapa específico imediatamente."])
                                                self.sendData("" + "",["/npp [Mapa] <G>- Define um específico mapa para a próxima partida."])
                                                self.sendData("" + "",["/sy? <G>- Exibe quem é o sincronizador (NASA) da sala."])
                                                self.sendData("" + "",["/csr <G>- Escolhe um novo sincronizador (NASA) aleatóriamente."])
                                                self.sendData("" + "",["/p0 <G>- Coloca o mapa atual em modo 'Normal'"])
                                                self.sendData("" + "",["/p1 <G>- Coloca o mapa atual em modo 'Protegido/Permanente'"])
                                                self.sendData("" + "",["/p3 <G>- Coloca o mapa atual em modo 'Bootcamp'"])
                                                self.sendData("" + "",["/p4 <G>- Coloca o mapa atual em modo 'Shaman'"])
                                                self.sendData("" + "",["/p5 <G>- Coloca o mapa atual em modo 'Arte'"])
                                                self.sendData("" + "",["/p6 <G>- Coloca o mapa atual em modo 'Mecanismo'"])
                                                self.sendData("" + "",["/p7 <G>- Coloca o mapa atual em modo 'Racing/Sem Shaman'"])
                                                self.sendData("" + "",["/p8 <G>- Coloca o mapa atual em modo 'Coõperação de shamans'"])
                                                self.sendData("" + "",["/p9 <G>- Coloca o mapa atual em modo 'Diverso'"])
                                                self.sendData("" + "",["/p22 <G>- Coloca o mapa atual em modo 'Cafofo da tribo'"])
                                                self.sendData("" + "",["/p22 <G>- Tira o mapa atual da rotação de mapas. (Del)"])
                                                self.sendData("" + "",["/del <G>- Tira de rotação o mapa atual."])
                                                self.sendData("" + "",["/info <G>- Exibe as principais informações do mapa atual."])
                                                self.sendData("" + "",["/music <G>- Liga/Desliga o modo música."])
                                                self.sendData("" + "",["/music [Link] <G>- Coloca uma música para tocar no servidor (apenas no formato *mp3)"])
                                                self.sendData("" + "",["/ls <G>- Exibe o número de jogadores online e quais salas esses estão ocupando."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos simples que afetam os outros jogadores."])
                                                self.sendData("" + "",["/ip [NomeDoUsuario] <G>- Exibe o endereço ip de um específico jogador."])
                                                self.sendData("" + "",["/ipnom [IP] <G>- Mostra todos os jogadores com um específicado endereço ip."])
                                                self.sendData("" + "",["/nomip [NomeDoUsuario] <G>- Mostra todos os usuários que um certo jogador está executando com mesmo ip."])
                                                self.sendData("" + "",["/color [NomeDoUsuario] [CódigoHEX] <G>- Define a cor de [NomeDoUsuario] como [Código]."])
                                                self.sendData("" + "",["/lsmap [NomeDoUsuario] <G>- Exibe todos os mapas existentes no servidor de um específico usuário."])
                                                self.sendData("" + "",["/sy [NomeDoUsuario] <G>- Torna um determinado usuário um sincronizador (NASA)."])
                                                self.sendData("" + "",["/fromage [NomeDoUsuario] [Quantidade] <G>- Doa [Quantidade] de queijos à um jogador."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Penas"])
                                                self.sendData("" + "",["/ban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo]"])
                                                self.sendData("" + "",["/iban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo] (Sem ninguém saber)"])
                                                self.sendData("" + "",["/unban [NomeDoUsuario] <G>- Desbane um específico usuário (<R>Atenção: Se o ip do usuário estiver banido, o usuário não poderá entrar mesmo estando desbanido<R>)."])
                                                self.sendData("" + "",["/unban [IP] <G>- Desbane um endereço ip de um usuário."])
                                                self.sendData("" + "",["/mute [NomeDoUsuario] [Tempo] [Motivo] <G>- Proibe um jogador de falar por [Tempo] horas : [Motivo]"])
                                                self.sendData("" + "",["/demute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar."])
                                                self.sendData("" + "",["/mumute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar, mas ninguém pode ver as mensagens que ele envia até que o jogador relogue-se no jogo."])
                                                self.sendData("" + "",["/log <G>- Exibe o log de banimentos e outras penas aplicadas pelos staffers."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Mensagens"])
                                                self.sendData("" + "",["/m [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 4 e estão online no momento (Moderadores, Super Moderadores, Desenvolvedores e Administradores)."])
                                                self.sendData("" + "",["/a [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 3 e estão online no momento (Arbitros, Moderadores, Super Moderadores, Desenvolvedores e Administradores)."])
                                                self.sendData("" + "",["/mss [Texto] <G>- Envia uma mensagem para todos os jogadores do servidor."])
                                                self.sendData("" + "",["/mm [Texto] <G>- Envia uma mensagem para todos da sala como Modération."])
                                                self.sendData("" + "",["<ROSE>/hide <G>- Modo escondido, os outros jogadores não te veem (Para desativar esse modo basta digitar /hide novamente)."])
                                            elif self.privilegeLevel == 3:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Sala"])
                                                self.sendData("" + "",["/np [Mapa] <G>- Carrega um mapa específico imediatamente."])
                                                self.sendData("" + "",["/npp [Mapa] <G>- Define um específico mapa para a próxima partida."])
                                                self.sendData("" + "",["/info <G>- Mostra as principais informações do mapa atual da sala."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Penas"])
                                                self.sendData("" + "",["/ban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo]"])
                                                self.sendData("" + "",["/iban [NomeDoUsuario] [Tempo] [Motivo] <G>- Bane [NomeDoUsuario] por [Tempo] horas: [Motivo] (Sem ninguém saber)"])
                                                self.sendData("" + "",["/mute [NomeDoUsuario] [Tempo] [Motivo] <G>- Proibe um jogador de falar por [Tempo] horas : [Motivo]"])
                                                self.sendData("" + "",["/demute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar."])
                                                self.sendData("" + "",["/mumute [NomeDoUsuario] <G>- Dá a palavra novamente à um jogador que estava proibido de falar, mas ninguém pode ver as mensagens que ele envia até que o jogador relogue-se no jogo."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Mensagens"])
                                                self.sendData("" + "",["/a [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 3 e estão online no momento (Arbitros, Moderadores, Super Moderadores, Desenvolvedores e Administradores"])
                                            elif self.privilegeLevel == 2:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Sala"])
                                                self.sendData("" + "",["/np [Mapa] <G>- Carrega um mapa específico imediatamente."])
                                                self.sendData("" + "",["/npp [Mapa] <G>- Define um específico mapa para a próxima partida."])
                                                self.sendData("" + "",["/info <G>- Mostra as principais informações do mapa atual da sala."])
                                                self.sendData("" + "",["/pp <G>- Mostra os principais comandos para mapcrew."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Mensagens"])
                                                self.sendData("" + "",["/mc [Texto] <G>- Envia uma mensagem para todos os jogadores com cargo cujo id é maior ou igual à 2 e estão online no momento (Mapcrews, Moderadores, Super Moderadores, Desenvolvedores e Administradores"])
                                            elif self.privilegeLevel == 1:
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos Gerais"])
                                                self.sendData("" + "",["/ami [Nome] <G>- Adiciona alguem na lista de amigos"])
                                                self.sendData("" + "",["/ban [Nome] <G>- Vota para banir um jogador"])
                                                self.sendData("" + "",["/langue [flag] <G>- Muda a linguagem de seu jogo. <BL>ex: /langue en"])
                                                self.sendData("" + "",["/menu <G>- Abre o menu principal do Mice Mania."])
                                                self.sendData("" + "",["/music <G>- Se tiver uma musica na sala, você poderá desativar."])
                                                self.sendData("" + "",["/die <G>- Se suicidar."])
                                                self.sendData("" + "",["/nue <G>- Deixa todos da sala sem roupas."])
                                                self.sendData("" + "",["/perfil [Nome] <G>- Mostra o perfil de um jogador"])
                                                self.sendData("" + "",["/report [Nome] <G>- Reporta um jogador"])
                                                self.sendData("" + "",["/sala <G>- Entra em uma sala qualquer."])
                                                self.sendData("" + "",["/totem <G>- Entra no editor de totem"])
                                                self.sendData("" + "",["/tutorial <G>- Entra na sala de tutorial do seu rato"])
                                                self.sendData("" + "",["/watch [Nome] <G>- Oculta todos jogadores menos o escolhido."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos do Chat"])
                                                self.sendData("" + "",["/c [Nome] [Texto] <G>- Envia um cochicho para alguem"])
                                                self.sendData("" + "",["/t [Texto] <G>- Envia uma mensagem para tribo"])
                                                self.sendData("" + "",["/title <G>- Mostra a lista de seus titles"])
                                                self.sendData("" + "",["/info <G>- Mostra informações do mapa atual."])
                                                self.sendData("" + "",["/ignore [Nome] <G>- Ignora um jogador"])
                                                self.sendData("" + "",["/filtre <G>- Desativa/Ativa o filtro de palavrões"])
                                                self.sendData("" + "",["/modlist <G>- Mostra os moderadores online"])
                                                self.sendData("" + "",["/mymaps ou /meusmapas <G>- Mostra seus mapas"])
                                                self.sendData("" + "",["/bcranking <G>- Mostra o ranking de boomcamp completados"])
                                                self.sendData("" + "",["/silence [Texto] <G>- Proibi cochicharem com você (*Pode-se colocar um motivo)"])
                                                self.sendData("" + "",["/reportmap [Codigo] <G>- Reporta um mapa."])
                                                self.sendData("" + "",["/about <G>- Veja informações do jogo."])
                                                self.sendData("" + "",["<ROSE>&gt;&gt; Comandos da Tribo"])
                                                self.sendData("" + "",["/mt <G>- Desativa/Ativa chat da tribo."])
                                                self.sendData("" + "",["/tk [Nome] <G>- Kika um jogador da tribo (Prescisa de permição)"])
                                                self.sendData("" + "",["/musique [link.mp3] <G>- Coloca uma musica no cafofo da tribo."])
                                                self.sendData("" + "",["/neige <G>- Desativa/Ativa neve no cafofo da tribo."])
                                            elif self.privilegeLevel == 0:
                                                self.sendData("" + "",["<J>Registre-se para poder usar os comandos do Mice Mania!"])   
                                            self.sendData("" + "",["<ROSE>&gt;&gt; <CH>Informações"])
                                            self.sendData("" + "",["<V>Lingua <VP>- "+self.Langue])
                                            self.sendData("" + "",["<V>OS <VP>- "+self.computer])
                                            self.sendData("" + "",["<V>Flash <VP>- "+self.flashvers])																

                                        elif event == "socorro" or event == "helper":
                                                if self.Langue == "br":
                                                        if self.privilegeLevel>=10:
                                                                rules = str(open('./rules/br/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=5:
                                                                crew = ''
                                                                rules = str(open('./rules/br/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=3:
                                                                rules = str(open('./rules/br/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=1:
                                                                rules = str(open('./rules/br/1.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=4:
                                                                rules = str(open('./rules/br/mc.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                else:
                                                        if self.privilegeLevel>=10:
                                                                rules = str(open('./rules/en/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=5:
                                                                crew = ''
                                                                rules = str(open('./rules/en/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=3:
                                                                rules = str(open('./rules/en/' + str(self.privilegeLevel) + '.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=1:
                                                                rules = str(open('./rules/en/1.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Digite /ajuda [#] e um número para listagem de comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                                                
                                                        if self.privilegeLevel>=4:
                                                                rules = str(open('./rules/en/mc.txt', 'r').read())
                                                                self.sendData("\x06\x14", ["""Comandos<br/>"""+ str(rules)])
                                                                rules = ""
                                        elif event == "modcomand":
                                                if self.privilegeLevel>=4:
                                                    self.sendData("\x06" + "\x14",["<J> Listagem de Comandos de Moderador"])
                                                    self.sendData("\x06" + "\x14",["<R>/ablack :<CH> Adicione sites de divulgação em nosso servidor blacklist"])
                                                    self.sendData("\x06" + "\x14",["<R>/rblack :<CH> Remove sites de divulgação em nosso servidor blacklist"])
                                                    self.sendData("\x06" + "\x14",["<R>/ddos :<CH> Adiciona ips para o Kiwi Guard ativação do Ant hacker"])                                 
                                                    self.sendData("\x06" + "\x14",["<J>/reportlist :<VP> Lista de reports feitos pelos usuários!"])                                 
                                                    self.sendData("\x06" + "\x14",["<J>/blacklist :<VP> Lista negra de divulgação de nosso servidor!"])
                                                    self.sendData("\x06" + "\x14",["<J>/floodlist :<VP> Mostra a lista de login do servidor Ant Ddos!"])	
                                                    self.sendData("\x06" + "\x14",["/info :<G> Exbibe informações do mapa quando não for do sistema"])
                                                    self.sendData("\x06" + "\x14",["/Mute [Nome] [Horas] [Motivo] <G> : Deixa o usuário sem falar."])
                                                    self.sendData("\x06" + "\x14",["/Ban [Nome] [Horas] [Motivo] <G> : Bane o usuário do servidor. Obs: Sempre colocar o motivo. Só banir quando for realmente necessário."])
                                                if self.privilegeLevel==3:													
                                                    self.sendData("\x06" + "\x14",["/unmute [Nome] <G> : Devolve o direito da fala."])
                                                    self.sendData("\x06" + "\x14",["/unban [Nome] [Motivo] <G> : DesBane o usuário do servidor."])
                                                    self.sendData("\x06" + "\x14",["/kick [nome] <G> : Desconecta o usuário."])
                                                    self.sendData("\x06" + "\x14",["/p0 :<G> Define mapa como Normal"])
                                                    self.sendData("\x06" + "\x14",["/p1 :<G> Define mapa como Protegido"])
                                                    self.sendData("\x06" + "\x14",["/p2 :<G> Define mapa como Exclusivo/Evento"])
                                                    self.sendData("\x06" + "\x14",["/p3 :<G> Define mapa como Bootcamp"])
                                                    self.sendData("\x06" + "\x14",["/p4 :<G> Define mapa como Shamam"])
                                                    self.sendData("\x06" + "\x14",["/p5 :<G> Define mapa como Arte"])
                                                    self.sendData("\x06" + "\x14",["/p6 :<G> Define mapa como Mecanismo"])
                                                    self.sendData("\x06" + "\x14",["/p7 :<G> Define mapa como Racing/Sem Shamam"])
                                                    self.sendData("\x06" + "\x14",["/p8 :<G> Define mapa como Cooperação de Shamans"])
                                                    self.sendData("\x06" + "\x14",["/p9 :<G> Define mapa como Diverso"])
                                                    self.sendData("\x06" + "\x14",["/p10 :<G> Define mapa como Survivor"])
                                                    self.sendData("\x06" + "\x14",["/p11 :<G> Define mapa como Vapiro (Fora de Rotação)"])
                                                    self.sendData("\x06" + "\x14",["/p18 :<G> Define mapa como Defilante"])
                                                    self.sendData("\x06" + "\x14",["/p22 :<G> Define mapa como Cafofo de Tribo"])
                                                    self.sendData("\x06" + "\x14",["/p31 :<G> Define mapa como Baffbotffa"])
                                                    self.sendData("\x06" + "\x14",["/p32 :<G> Define mapa como Cooperação de Shamans (FIGHT!)"])
                                                    self.sendData("\x06" + "\x14",["/p42 :<G> Define mapa como Racing 2"])
                                                    self.sendData("\x06" + "\x14",["/p46 :<G> Define mapa como Meep! (Desativado temporariamente) "])
                                                    self.sendData("\x06" + "\x14",["/mode : <G> Chat Moderador"])
                                                    self.sendData("\x06" + "\x14",["/mega : <G> Chat Mega Moderador"])
                                                    self.sendData("\x06" + "\x14",["/sms : <G> Chat Super Moderador"])
                                                    self.sendData("\x06" + "\x14",["/vip : <G> Chat Vip"])
                                                    self.sendData("\x06" + "\x14",["/mm : <G> Chat Moderátion"])
                                                    self.sendData("\x06" + "\x14",["/m : <G> Chat com equipe"])
                                                    self.sendData("\x06" + "\x14",["/a : <G> Chat Falar somente com os Moderadores"])
                                                    self.sendData("\x06" + "\x14",["/mtitle : <G> Liberar title de moderador"])
                                                    self.sendData("\x06" + "\x14",["/smtitle : <G> Liberar title de Super Moderador"])
                                                if self.privilegeLevel==6:
                                                    self.sendData("\x06" + "\x14",["/coord : <G> Chat Como Coordenador (Apenas Priv 8)"])
                                                    self.sendData("\x06" + "\x14",["/Gravity : <G> Habilitar Gravidade"])
					elif event == "uptime":
                                                if self.privilegeLevel>=10:
                                                        self.sendData("\x06\x14", ["Server Uptime: "+str(datetime.today()-self.server.STARTTIME).replace("<", "&lt;").split(".")[0]])
                                        elif event == "sysinfo":
                                                if self.privilegeLevel>=10:
                                                        self.sendData("\x06" + "\x14",["<ROSE>&gt;&gt;System"])
                                                        self.sendData("\x06" + "\x14",["Plataforma: "+str(sys.platform)])
                                                        self.sendData("\x06" + "\x14",["Versão: "+str(platform.system()).replace("<", "&amp;lt;")+" "+str(platform.release()).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Versão Python: "+str(sys.version).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Server Uptime: "+str(datetime.today()-self.server.STARTTIME).replace("<", "&amp;lt;").split(".")[0]])
                                                        if str(platform.processor())=="":
                                                                self.sendData("\x06\x14", ["Processador: N/A"])
                                                        else:
                                                                self.sendData("\x06\x14", ["Processador: "+str(platform.processor()).replace("<", "&lt;")])

                                                        totalram=psutil.TOTAL_PHYMEM
                                                        usedram=psutil.avail_phymem()
                                                        usedram = usedram / 1048576
                                                        totalram = totalram / 1048576
                                                        usedram = totalram-usedram
                                                        totalram = '%.1f' % totalram
                                                        usedram = '%.1f' % usedram
                                                        self.sendData("\x06" + "\x14",["Used Physical Memory: "+str(usedram).replace("<", "&amp;lt;")+"MB"])
                                                        self.sendData("\x06" + "\x14",["Total Physical Memory: "+str(totalram).replace("<", "&amp;lt;")+"MB"])
                                                        self.sendData("\x06" + "\x14",["<ROSE>&gt;&gt;File Stats"])
                                                        self.sendData("\x06" + "\x14",["Database file size: "+str(os.stat("dbfile.sqlite")[6]/1024).replace("<", "&amp;lt;")+"KB"])
                                                        self.sendData("\x06" + "\x14",["<ROSE>&gt;&gt;Server Config"])
                                                        self.sendData("\x06" + "\x14",["ID: "+str(self.server.ServerID).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Owner: "+str(self.server.Owner).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Key: "+str(self.server.Key).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Policy Domain: "+str(self.server.POLICY).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Policy Port: "+str(self.server.PORT).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Version: "+str(VERSION).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["LCDMT: "+str(self.server.LCDMT).replace("<", "&amp;lt;")])
                                                        if self.server.ValidateVersion:
                                                                self.sendData("\x06" + "\x14",["Validate Version: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Validate Version: No"])
                                                        if self.server.ValidateLoader:
                                                                self.sendData("\x06" + "\x14",["Validate Client: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Validate Client: No"])
                                                        if self.server.GetCapabilities:
                                                                self.sendData("\x06" + "\x14",["Get Client Info: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Get Client Info: No"])
                                                        self.sendData("\x06" + "\x14",["Loader file size: "+str(self.server.LoaderSize)])
                                                        self.sendData("\x06" + "\x14",["Client file size: "+str(self.server.ClientSize)])
                                                        self.sendData("\x06" + "\x14",["Starting Player Code: "+self.server.getServerSetting("InitPlayerCode")])
                                                        self.sendData("\x06" + "\x14",["Last Map Editor Code: "+self.server.getServerSetting("LastEditorMapCode")])
                                                        self.sendData("\x06" + "\x14",["Last Tribe Code: "+self.server.getServerSetting("LastTribuCode")])
                                                        self.sendData("\x06" + "\x14",["Shop cheese required to export map: "+self.server.getServerSetting("EditeurShopCheese")])
                                                        self.sendData("\x06" + "\x14",["Cheese required to export map: "+self.server.getServerSetting("EditeurCheese")])
                                        elif event == "mapinfo" or event == "info":
                                                if self.privilegeLevel!=0:
                                                        if self.room.ISCM!=-1:
                                                                yesvotes=int(self.server.getMapYesVotes(self.room.ISCM))
                                                                novotes=int(self.server.getMapNoVotes(self.room.ISCM))
                                                                mapname=str(self.server.getMapName(self.room.ISCM))
                                                                perma=str(self.server.getMapPerma(self.room.ISCM))
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                self.sendData("\x06" + "\x14",[str(mapname)+" - @"+str(self.room.ISCM)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)])
                                        elif event == "extrainfo":
                                                if self.privilegeLevel>=4:
                                                        if self.room.ISCM!=-1:
                                                                yesvotes=int(self.server.getMapYesVotes(self.room.ISCM))
                                                                novotes=int(self.server.getMapNoVotes(self.room.ISCM))
                                                                mapname=str(self.server.getMapName(self.room.ISCM))
                                                                perma=str(self.server.getMapPerma(self.room.ISCM))
                                                                mapnoexist=str(self.server.getMapDel(self.room.ISCM))
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                self.sendModMessageChannel("Server", "@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes)+" - Y:"+str(yesvotes)+" - N:"+str(novotes)+" - P:"+str(perma)+" - D:"+str(mapnoexist)+" - NM:"+str(mapname))
                                        elif event in ("del", "suppr", "deletemap", "p44"):
                                                if self.privilegeLevel>=4:
                                                        if self.room.ISCM!=-1:
                                                                dbcur.execute('UPDATE mapeditor SET deleted = ? WHERE code = ?', ["1", self.room.ISCM])
                                                                dbcur.execute('UPDATE mapeditor SET perma = ? WHERE code = ?', ["44", self.room.ISCM])
                                                                self.sendData("\x06" + "\x14",["<J>O Mapa Foi Removido de Rotação."])
                                                                self.server.sendMappersChat(self, "\x06\x14", [self.username+" Removeu "+str(self.server.getMapName(self.room.ISCM))+" @"+str(self.room.ISCM)+" de Rotação."])
                                        elif event == "harddel":
                                                if self.privilegeLevel>=4:
                                                        if self.room.ISCM!=-1:
                                                                dbcur.execute("DELETE FROM mapeditor WHERE code = ?", [self.room.ISCM])
                                                                self.sendData("\x06" + "\x14",["<J>O Mapa Foi Deletado."])
                                                                self.server.sendMappersChat(self, "\x06\x14", [self.username+" Deletou "+str(self.server.getMapName(self.room.ISCM))+" @"+str(self.room.ISCM)+"."])
                                        elif event == "clearipbans":
                                                if self.privilegeLevel>=6:
                                                        dbcur.execute("DELETE FROM ippermaban")
                                                        self.server.tempIPBanList=[]
                                                        self.server.IPPermaBanCache=[]
                                                        self.sendModMessageChannel("Server", "Todos IP Banidos Foram Removidos, Por "+self.username)
                                        elif event == "delmsm":
                                                if self.privilegeLevel==10:
                                                        TimeUsed = datetime.now();
                                                        f = open('logs/msgs.log','a')
                                                        f.write(str(self.username)+" ["+str(self.address[0])+"] digitou: [/"+str(event)+"]["+str(TimeUsed)+"]\n")
                                                        f.close()
                                        elif event == "logmsm":
                                                if self.privilegeLevel==10:
                                                        logFile = open("logs/msgs.log", "rb")
                                                        logData = logFile.read()
                                                        logFile.close()
                                                        self.sendData("\x1A" + "\x1A", [logData.replace("<", "&lt;").replace("\x0D\x0A", "\x0A")])
                                        elif event == "limparlog":
                                                if self.username in self.clearloglistmod:
                                                        dbcur.execute("DELETE FROM banlog")
                                                        self.sendModMessageChannel("Server", "Log Limpado, Por "+self.username)													
                                        elif event == "clear":
                                                if self.privilegeLevel>=3:
                                                        self.room.sendAll("\x1A" + "\x														
                                        elif event == "clearcache":
                                                if self.privilegeLevel>=6:
                                                        self.server.IPPermaBanCache=[]
                                                        self.sendData("\x06" + "\x14", ["Done."])
                                        elif event == "cleariptemp":
                                                if self.privilegeLevel>=6:
                                                        self.server.tempIPBanList=[]
                                                        self.sendData("\x06" + "\x14", ["Done."])
                                        elif event == "viewcache":
                                                if self.privilegeLevel>=6:
                                                        for ip in self.server.IPPermaBanCache:
                                                                self.sendData("\x06" + "\x14", [ip])
                                        elif event == "viewiptemp":
                                                if self.privilegeLevel>=6:
                                                        for ip in self.server.tempIPBanList:
                                                                self.sendData("\x06" + "\x14", [ip])
                                        elif event == "clearloginlog":
                                                if self.privilegeLevel>=10:
                                                        dbcur.execute('TRUNCATE TABLE loginlog')
                                                        self.sendData("\x06\x14", ["Tabela De Login Limpada, Operação Concluída!"])
                                        elif event == "log":
                                                if self.privilegeLevel>=5:
                                                        loglist = []
                                                        dbcur.execute('select * from BanLog')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                rrfRowsCopy = list(rrfRows)
                                                                rrfRowsCopy.reverse()
                                                                Row=0
                                                                for rrf in rrfRowsCopy:
                                                                        Row=Row+1
                                                                        fillString=rrf[5]
                                                                        rrf5=fillString+''.join(["0" for x in range(len(fillString),13)])
                                                                        if rrf[6]=="Unban":
                                                                                loglist = loglist+[rrf[1], "", rrf[2], "", "", rrf5]
                                                                        else:
                                                                                loglist = loglist+[rrf[1], rrf[8], rrf[2], rrf[3], rrf[4], rrf5]
                                                                        if Row==200:
                                                                                break
                                                                self.sendData("\x1A"+"\x17", loglist)
																																
                                        
                                        elif event in ("lsp0", "lsp1", "lsp2", "lsp3", "lsp4", "lsp5", "lsp6", "lsp7", "lsp8", "lsp9", "lsp10", "lsp11", "lsp13", "lsp17", "lsp18", "lsp22", "lsp31", "lsp32", "lsp42", "lsp43", "lsp44", "lsp50", "lsp51", "lsp52", "lsp60", "lsp222"):
                                                if self.privilegeLevel>=4:
                                                        ident = str(event).replace("lsp", "")

                                                        show = False
                                                        
                                                        Perma = ident
                                                        mapslist = ""
                                                        
                                                        dbcur.execute('select * from mapeditor where perma = ?', [Perma])
                                                        rrfRows = dbcur.fetchall()
                                                        
                                                        if rrfRows is None:
                                                                mapslist = "Empty list."
                                                            
                                                        else:
                                                                for rrf in rrfRows: 
                                                                        totalvotes = rrf[3] + rrf[4]
                                                                        
                                                                        if totalvotes == 0:totalvotes = 1
                                                                        
                                                                        rating = (1.0 * rrf[3] / totalvotes) * 100
                                                                        rating = str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        
                                                                        if not show:
                                                                                mapslist = "<ROSE><TI>Lista de Mapas<BV>(P%s):" % (Perma)
                                                                                mapslist += "<br>------------------------------------------------"
                                                                                show = True
                                                                            
                                                                        mapslist += "<br><J>"+str(rrf[0])+" <BL>- <VP>@"+str(rrf[1])+"<BL> - <J>"+str(totalvotes)+"<BL> - <VP>"+str(rating)+"% <BL>- <R>P"+str(rrf[5])

                                                        self.sendData("\x1A\x1A", [mapslist])
                                        elif event == "lsmaps":
                                                if self.privilegeLevel>=4:
                                                        
                                                        maplist = []

                                                        dbcur.execute('select code from mapeditor')
                                                        rrfRows = dbcur.fetchall()

                                                        if rrfRows is None:

                                                                pass

                                                        else:
                                                                for rrf in rrfRows:

                                                                        maplist.append(rrf[0])

                                                        maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")

                                                        if maplist=="":
                                                                maplist="Lista Vazia."

                                                        self.sendData("\x1A\x1A", [maplist])
                                        elif event == "lsperma":
                                                if self.privilegeLevel>=4:
                                                        maplist = []

                                                        whiles = 1

                                                        if whiles in [1,2,3,4,5,6,7,8,9,10,11,13,32,42,43,50,222]:
                                                                while whiles < 222:
                                                                        dbcur.execute('select code from mapeditor where perma = ?', [whiles])
                                                                        rrfRows = dbcur.fetchall()

                                                                        if rrfRows is None:
                                                                                pass
                                                                        else:
                                                                                for rrf in rrfRows:
                                                                                        maplist.append(rrf[0])
                                                                                
                                                                        whiles += 1
                                                        else:
                                                                if whiles == 222:
                                                                        pass
                                                                else:
                                                                        whiles += 1
                                                                    
                                                        if whiles == 222:
                                                                maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                                
                                                                if maplist == "":
                                                                        maplist = "Lista Vazia."
                                                                   
                                                                self.sendData("\x1A\x1A", [maplist])
                                                                
                                        elif event == "modson":
                                                        self.server.getLsEquipe(self)
                                        elif event == "validatemap":
                                                if self.privilegeLevel>=5:
                                                        if self.room.isEditeur:
                                                                if self.room.ISCMVdata[7]==0 and self.room.ISCMV!=0:
                                                                        self.room.ISCMVdata[7]=1
                                                                        self.sendMapValidated()
                                        elif event == "cj":
                                                if self.privilegeLevel>=10:
                                                        if self.room.NoNumberedMaps:
                                                                self.room.switchNoNumberedMaps(False)
                                                        else:
                                                                self.room.switchNoNumberedMaps(True)
                                                                self.sendData("\x06\x14", ["Ce salon ne joue maintenant que des cartes de joueur."])
                                        elif event == "cp":
                                                if self.privilegeLevel>=10:
                                                        if self.room.PTwoCycle:
                                                                self.room.switchPTwoCycle(False)
                                                        else:
                                                                self.room.switchPTwoCycle(True)
                                                                self.sendData("\x06\x14", ["Ce salon ne joue maintenant que des cartes permanentes."])
                                                                self.room.killAll()
																
                                        elif event == "items":
                                                if self.disableShop:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Enabled."])
                                                        self.disableShop=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Disabled."])
                                                        self.disableShop=True
                                        elif event == "censor":
                                                if self.censorChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat disabled."])
                                                        self.censorChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat enabled."])
                                                        self.censorChat=True
                                        elif event == "mutechat":
                                                if self.muteChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You can now recieve chat messages."])
                                                        self.muteChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You will not receive any more chat messages."])
                                                        self.muteChat=True
                                        elif event == "transen":
                                                if self.Translating:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will not be translated anymore."])
                                                        self.Translating=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will now be translated to English."])
                                                        self.Translating=True																
																
                                        elif event == "lsmodoHangover":
                                                if self.privilegeLevel>=10:
                                                    maplist = []
                                                    mapslist = ""
                                                    dbcur.execute('select * from users')
                                                    rrfRows = dbcur.fetchall()
                                                    if rrfRows is None:
                                                        mapslist="Empty"
                                                    else:
                                                        for rrf in rrfRows:
                                                            name=rrf[0]
                                                            privlevel=rrf[3]
                                                            if int(privlevel)>=3:
                                                                if int(privlevel)==2:
                                                                    priv="VIP"
                                                                elif int(privlevel)==3:
                                                                        priv="Helper"    
                                                                elif int(privlevel)==4:
                                                                        priv="MapCrew"
                                                                elif int(privlevel)==5:
                                                                        priv="Mod" 
                                                                elif int(privlevel)==6:
                                                                        priv="MegaMod"
                                                                elif int(privlevel)==10:
                                                                        priv="Admin"
                                                                elif int(privlevel)==11:
                                                                        priv="Técnico"
                                                                elif int(privlevel)==7:
                                                                        priv="Undefined (7)"
                                                                elif int(privlevel)==8:
                                                                        priv="Coord"
                                                                elif int(privlevel)==0-1:
                                                                        priv="Account Locked"
                                                                elif int(privlevel)=="-1":
                                                                        priv="Account Locked"
                                                                elif int(privlevel)=="-2":
                                                                        priv="Unraked"
                                                                elif int(privlevel)==0-2:
                                                                        priv="Unraked"
                                                                elif int(privlevel)==999:
                                                                        priv="Mod Inivisvel (Sem comandos, apenas chat)"    
                                                                mapslist=mapslist+"<br>"+str(name)+" = "+str(priv)
                                                    self.sendData("\x06" + "\x14",[mapslist])																

                                        elif event == "cores":
                                                if self.privilegeLevel>=2:										
                                                        self.sendData("\x06" + "\x14",["/azul"])
                                                        self.sendData("\x06" + "\x14",["/amarelo"])
                                                        self.sendData("\x06" + "\x14",["/preto"])
                                                        self.sendData("\x06" + "\x14",["/rosa"])
                                                        self.sendData("\x06" + "\x14",["/preto"])
                                                        self.sendData("\x06" + "\x14",["/cinza"])
                                                        self.sendData("\x06" + "\x14",["/verde"])
                                                        self.sendData("\x06" + "\x14",["/vermelho"])
                                                        self.sendData("\x06" + "\x14",["/laranja"])
                                                        self.sendData("\x06" + "\x14",["/lilás"])
                                                        self.sendData("\x06" + "\x14",["/azulclaro"])
                                                        self.sendData("\x06" + "\x14",["/roxo"])
                                                        self.sendData("\x06" + "\x14",["/verdeescuro"])
                                                        self.sendData("\x06" + "\x14",["/verdeclaro"])                   

                                        elif event == "azul":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "025BF5"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Azul!"])
                                        elif event == "amarelo":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "F3FA1E"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Amarelo!"])
                                        elif event == "rosa":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "FCD9FB"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Rosa!"])
                                        elif event == "verde":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "11F58B"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Verde!"])
                                        elif event == "cinza":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "575355"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Cinza!"])
                                        elif event == "vermelho":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "FA0526"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Vermelho!"])
                                        elif event == "laranja":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "FAA405"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Laranja!"])
                                        elif event == "lilas":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "CFC5E8"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Lilás!"])
                                        elif event == "azulclaro":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "05F6FA"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Azul Claro!"])
                                        elif event == "roxo":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "7900FF"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Roxo!"])
                                        elif event == "verdeescuro":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "07E8BF"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Verde Escuro!"])
                                        elif event == "preto":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "000001"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Preto!"])
                                        elif event == "verdeclaro":
                                                if self.privilegeLevel>=2:
                                                        self.color1 = "B6FCC4"
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Está Verde Claro" ])                                                                
                                        elif event == "venda" or event == "compra" or event == "buy":
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==4 or self.privilegeLevel==3 or self.privilegeLevel==2 or self.privilegeLevel==1:
                                                        self.sendData("\x1A" + "\x1A",["<N><font color='#D46927'><center>Faça a Troca do Seus Queijos Por Morangos é Bem Simples!</center></font><BR><BR><font color='#EF4BCF' size='12'> /buy10</font> - Troca de 100 queijos por 10 morangos.<BR><font color='#EF4BCF' size='12'> /buy20</font> - Troca de 200 queijos por 20 morangos.<BR><font color='#EF4BCF' size='12'> /buy150</font> - Troca de 500 queijos por 150 morangos.<BR><font color='#EF4BCF' size='12'> /buy500</font> - Troca de 1500 queijos por 500 morangos.<BR><font color='#EF4BCF' size='12'> /buy1000</font> - Troca de 3000 queijos por 1000 morangos."])
                                                else:
                                                        self.sendData("\x06" + "\x14",["<R>Você Está Jogando No Modo Convidado, Você Não Pode Usar Nenhum Comando. Recomendamos à Você Criar Uma Conta."])    
					elif event == "buy10":
                                                if self.shopcheese >= 100:
                                                        self.shopcheese -= 100
                                                        self.shopfraises += 10
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 100 queijos por 10 morangos!</font>"])
                                        elif event == "buy20":
                                                if self.shopcheese >= 200:
                                                        self.shopcheese -= 200
                                                        self.shopfraises += 20
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 200 queijos por 20 morangos!</font>"])
                                        elif event == "buy150":
                                                if self.shopcheese >= 500:
                                                        self.shopcheese -= 500
                                                        self.shopfraises += 150
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 500 queijos por 150 morangos!</font>"])
                                        elif event == "buy300":
                                                if self.shopcheese >= 1000:
                                                        self.shopcheese -= 1000
                                                        self.shopfraises += 300
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 1000 queijos por 300 morangos!</font>"])
                                        elif event == "buy500":
                                                if self.shopcheese >= 1500:
                                                        self.shopcheese -= 1500
                                                        self.shopfraises += 500
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 1500 queijos por 500 morangos!</font>"])
                                        elif event == "buy1000":
                                                if self.shopcheese >= 3000:
                                                        self.shopcheese -= 3000
                                                        self.shopfraises += 1000
                                                        self.sendData("\x1A" + "\x04", ["<font color='#D46927' size='12'>Você Trocou 1500 queijos por 500 morangos!</font>"])
					elif event == "asas2":
                                                if self.privilegeLevel>=10:
                                                        self.room.sendAllBin("\x05\x01\x09", struct.pack("!i", int(self.playerCode)))
                                        elif event == "restart":
                                                if self.privilegeLevel==10:
                                                         if self.server.banPlayer(self.username, "999", "Te Peguei", "Servidor"):
                                                                self.server.sendModChat(self, "\x06\x14", ["O Servidor baniu "+self.username+" por 999 horas. Rasão: te peguei"], False)
                                                         else:
                                                                self.sendServerMessage("Server shutting down in 2 minutes.")
                                                                #self.sendSeverShutdown()
                                                                reactor.callLater(60,self.sendServerMessage,"Server shutting down in 60 seconds.")
                                                                reactor.callLater(90,self.sendServerMessage,"Server shutting down in 30 seconds.")
                                                                reactor.callLater(100,self.sendServerMessage,"Server shutting down in 20 seconds.")
                                                                reactor.callLater(110,self.sendServerMessage,"Server shutting down in 10 seconds.")
                                                                reactor.callLater(111,self.sendServerMessage,"Server shutting down in 9 seconds.")
                                                                reactor.callLater(112,self.sendServerMessage,"Server shutting down in 8 seconds.")
                                                                reactor.callLater(113,self.sendServerMessage,"Server shutting down in 7 seconds.")
                                                                reactor.callLater(114,self.sendServerMessage,"Server shutting down in 6 seconds.")
                                                                reactor.callLater(115,self.sendServerMessage,"Server shutting down in 5 seconds.")
                                                                reactor.callLater(116,self.sendServerMessage,"Server shutting down in 4 seconds.")
                                                                reactor.callLater(117,self.sendServerMessage,"Server shutting down in 3 seconds.")
                                                                reactor.callLater(118,self.sendServerMessage,"Server shutting down in 2 seconds.")
                                                                reactor.callLater(119,self.sendServerMessage,"Server shutting down in 1 seconds.")
                                                                self.rebootTimer = reactor.callLater(120, self.server.stopServer)														
                                        elif event == "party":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(0)
                                        elif event == "laugh":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(1)
                                        elif event == "cry":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(2)
                                        elif event == "kiss":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(3)
                                        elif event == "anger":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(4)
                                        elif event == "shamed":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(7)
                                        elif event == "sit":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(8)
                                       
                                        elif event == "sleeps":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(6)
                                        elif event == "claps":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(5)
                                        elif event == "conf":
                                                if self.privilegeLevel>=5:
                                                        self.room.forceEmoteAll(9)
                                        elif event == "don":
                                                if self.privilegeLevel>=2:
                                                        self.room.sendAllBin("\x08\x2B", struct.pack("!l", int(self.playerCode)))
                                        elif event == "hallbit":
                                                if self.privilegeLevel>=2:
                                                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 50))
                                                        self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
                                                        self.sendData("\x06" + "\x14", ["<CH>Ativado!"])
                                        elif event == "habbit":
                                                if self.privilegeLevel>=2:
                                                        self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
                                                        self.sendData("\x06" + "\x14", ["<CH>Ativado!"])
                                        elif event == "habbit2":
                                                if self.privilegeLevel>=2:
                                                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 50))
                                                        self.sendData("\x06" + "\x14", ["<CH>Ativado!"])
                                        elif event == "donall":
                                                if self.privilegeLevel>=2:
                                                                for playerCode, client in self.room.clients.items():												
                                                                    client.room.sendAllBin("\x08\x2B", struct.pack("!l", int(client.playerCode)))
                                        elif event in ("ups", "scoreup"):
                                                if self.privilegeLevel==10:
                                                        self.score += 200
                                        elif event in ("fkill", "fsuicide", "fbubbles", "fdie", "fmort"):
                                                if self.privilegeLevel >= 6:
                                                        if not self.isDead:
                                                                self.sendFakePlayerDied(self.playerCode, int(self.score))																	
                                        elif event in ("vamp", "zumbi"):
                                                if self.privilegeLevel>=2:
                                                        self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))
                                        elif event == "voar":
                                                if self.privilegeLevel==10:
                                                        if self.voar:
                                                                self.voar = False
                                                                self.disableKey(32)
                                                                self.sendData("\x06\x14", ["<R>Modo voo: Desativado."])
                                                        else:
                                                                self.voar = True
                                                                self.enableKey(32)
                                                                self.sendData("\x06\x14", ["<CH>Modo voo: Ativado."])
                                        elif event == "speed":
                                                if self.privilegeLevel==10:
                                                        if self.speeding:
                                                                self.speeding = False
                                                                self.disableKey(32)
                                                                self.sendData("\x06\x14", ["<R>Modo speed: Desativado."])
                                                        else:
                                                                self.speeding = True
                                                                self.enableKey(32)
                                                                self.sendData("\x06\x14", ["<CH>Modo speed: Ativado."])                                                                
                                        elif event == "vd":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Current local scope"])
                                                        for name in dir():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Global symbol table"])
                                                        for name in globals():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Local symbol table"])
                                                        for name in locals():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])														
                                        elif event in ("colur", "calau"):
                                                if self.privilegeLevel>=2:														
													if self.playerCode == self.room.getHighestPlayer():
															self.vel = 14
															self.setNameColor(self.playerCode, "010101")
															self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
															self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", self.vel))														
                                        elif event in ("vampall", "zumbi"):
                                                if self.privilegeLevel>=6:								
                                                                for playerCode, client in self.room.clients.items():												
                                                                    client.room.sendAllBin("\x08\x42", struct.pack("!l", int(client.playerCode)))
                                        elif event == "cheeseall":
                                                if self.privilegeLevel>=6:								
                                                                for playerCode, client in self.room.clients.items():	
                                                                    client.room.sendAll("\x05\x13", [str(client.playerCode)])
                                        elif event == "bigall":
                                                if self.privilegeLevel>=10:
                                                                for playerCode, client in self.room.clients.items():													
                                                                    client.sendData("\x1B" + "\x0A", "", True)																	
                                        elif event == "cat":
                                                if self.privilegeLevel>=5:
                                                        self.room.sendAllBin("\x1A\x06", str(struct.pack("!iiibh", int(1), int(200), int(200), 0, int(1123))) + "\x68\x61\x74\x00\x00")																							
                                        elif event == "fantasma":
                                                if self.privilegeLevel>=5:
                                                        self.room.sendAllBin("\x1A\x06", str(struct.pack("!iiibh", int(1), int(200), int(200), 0, int(358))))
                                        elif event == "esqueleto":
                                                if self.privilegeLevel>=5:
                                                        self.room.sendAllBin("\x1A\x06", str(struct.pack("!iiibh", int(1), int(100), int(100), 0, int(627))) + '\x71')	
                                        elif event == "pcheese":
                                                if self.privilegeLevel>=5:
                                                        self.room.sendAll("\x05\x13", [str(self.playerCode)])														
                                        elif event == "meep":
                                                if self.privilegeLevel>=10:
                                                        self.canMeep = True
                                                        self.sendData("\x08\x27", None, True)
                                        elif event == "atelier801" or event == "Edri":
                                                if self.privilegeLevel != 0:
                                                        if not self.checkInShop("95"):
                                                                if self.shopitems=="":
                                                                        self.shopitems=str("95")
                                                                else:
                                                                        self.shopitems=self.shopitems+",95"
                                                                self.sendAnimZelda(self.playerCode, "0", "95")
                                                                self.checkUnlockShopTitle()
                                        elif event == "baffstats":
                                                if self.privilegeLevel != 0:
                                                        mybaffCount = int(self.baffwins)
                                                        self.sendData("\x06" + "\x14", ["<N>Você já venceu: <VP>"+str(mybaffCount)+"<N> baffs."])														
                                        elif event == "vsha":
                                                if self.privilegeLevel>=10:
                                                        self.sendShamanCode(self.playerCode)
                                                        self.isShaman = True
                                                        self.sendData("\x06" + "\x14", ["<CH>Você Agora é o Shaman!"])
                                        elif event == "vbig":
                                                if self.privilegeLevel>=10:
                                                        self.sendData("\x1B" + "\x0A", "", True)
                                                        self.sendData("\x06" + "\x14", ["^_^"])
                                        elif event == "freepoints":
                                                if self.privilegeLevel==10:
                                                        dbcur.execute('UPDATE tribu SET Puntos = Puntos + 1000000 WHERE code = ?', [self.TribeCode])

                                        elif event == "resetpoints":
                                                if self.privilegeLevel==10:
                                                        dbcur.execute('UPDATE tribu SET Puntos = 0 WHERE code = ?', [self.TribeCode])														
                                        elif event == "repairmouse" or event == "resetmouse":
                                                if self.privilegeLevel!=0:
                                                        self.look = self.getDefaultLook()
                                                        self.color1 = "78583a"
                                                        self.Skin = "1"
                                                        if self.Langue.lower() == "br":
                                                                self.sendData("\x06" + "\x14", ["<ROSE>Você Resetou Seu Look."])
                                                        elif self.Langue.lower() == "en":
                                                                self.sendData("\x06" + "\x14", ["<NL>Your look was changed to default."])
                                                        elif self.Langue.lower() == "en":
                                                                self.sendData("\x06" + "\x14", ["<NL>Su mirada fue cambiado a los valores predeterminados."])

                                #Comandos Com Complemento
                                else:
                                        if event.startswith("room ") or event.startswith("salon ") or event.startswith("sala "):
                                                enterroomname = event_raw.split(" ", 1)[1]
                                                enterroomname=enterroomname.replace("\x07","")
                                                
                                                if self.roomname == enterroomname:pass
                                                elif re.search("\x03", enterroomname):pass
                                                elif self.room.isEditeur:pass
                                                elif len(enterroomname) > 64:pass
                                                else:
                                                        self.enterRoom(enterroomname)
                                        elif event.startswith("traitor ") or event.startswith('!traitor '):
                                                if self.room.isTraitor:
                                                        traitor = event_raw.split(" ", 1)[1]
                                                        if not self.isDead:
                                                                if self.canAccusations:
                                                                        for room in self.server.rooms.values():
                                                                                for player in room.clients.values():
                                                                                        if player.username == traitor:
                                                                                                if player.room.isTraitor:
                                                                                                        player.Accusations += int(1)
                                                                                                        player.canAccusations = True
                                                                                                        self.TotalAccusations = int(3) - player.Accusations
                                                                                                        self.canAccusations = False
                                                                                                        if self.TotalAccusations != 0:
                                                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ traitor +" <font color='#00FF7F'>foi acusado. Com mais " + str(self.TotalAccusations) + " ele morrerá!"])
                                                                                                        if player.Accusations == 3:
                                                                                                                if not player.isDead:
                                                                                                                        player.isDead = True
                                                                                                                        player.sendPlayerDied(player.playerCode, player.score)
                                                                                                                        player.Accusations = int(0)
                                                                                                                        self.room.checkShouldChangeWorld()
                                                                                                                        self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ player.username +" <font color='#00FF7F'>Foi acusado 3 vezes e foi morto. "])
                                                                else:
                                                                        self.sendData("\x06\x14", ["Voce deve esperar alguem te acusar para poder acusar alguem novamente."])
                                                        else:
                                                                self.sendData("\x06\x14", ["Voce ja morreu não pode mais acusar."])
                                        elif event.startswith("gelar "):
                                                if self.privilegeLevel>=10:
                                                        _, username = event_raw.split(" ", 1)
                                                        username = username.capitalize()
                                                        for room in self.server.rooms.values():
                                                            for playerCode, client in room.clients.items():
                                                                if client.username == username:
                                                                    #Mouse Ice Cub (IN EVENT START)
                                                                    isBc = False
                                                                    isSurvivor = False
                                                                    direction = self.mDirection
                                                                    x = int(client.posX)/3-11
                                                                    y = int(client.posY)/3-17
                                                                    playerCode = int(client.playerCode)          
                                                                    if self.room.name:
                                                                        if not self.icecubecount == 1:
                                                                            if not self.room.isDoubleMap:
                                                                                self.icecubecount += 1
                                                                                self.sendBoulneige(54, int(y), int(x), int(0), int(1))
                                                                                if self.room.isBootcamp:
                                                                                    isBc = True
                                                                                    isSurvivor = False
                                                                                elif self.room.isSurvivor:
                                                                                    isSurvivor = True
                                                                                    isBc = False
                                                                                else:
                                                                                    isSurvivor = False
                                                                                    isBc = False
                                                                                self.server.mataRatoComGelo(self, playerCode, isBc, isSurvivor)
                                                                                self.room.checkShouldChangeWorld()
                                                                                isBc = False
                                                                                isSurvivor = False
                                                                    else:
                                                                        pass
                                        elif event.startswith("dv "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        #Créditos ao Holister
                                                         if EVENTCOUNT == 2:
                                                                _, bname = event_raw.split(" ", 1)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                bhours = "1060"
                                                                breason = "Divulgação"
                                                                breason="\x03"+breason
                                                                adms = ["Holister", "Alex", "Emobvb", "Gaaby", "Rebook"]
                                                                if bname in adms:
                                                                    bnamx = bname
                                                                    bname = self.username
                                                                    if self.server.banPlayer(bname, "500", "OPERATION FAILED", self.username):
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                    else:
                                                                        self.sendData("\x06" + "\x14",["O jogador ["+str(bname)+"] não existe."])
                                                                else:
                                                                    if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                            #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                            breason=breason.replace("\x03","")
                                                                            #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" baniu "+bname+" por "+str(bhours)+" horas. Motivo: "+str(breason)], False)
                                                                    else:
                                                                            self.sendData("\x06" + "\x14",["O jogador ["+str(bname)+"] não existe."])                        
                                        elif event.startswith("quiz ") or event.startswith('! '):
                                                if self.room.isQuiz:
                                                        if EVENTCOUNT == 2:
                                                                quiz = event_raw.split(" ", 1)[1]
                                                                if self.Q == 0:
                                                                        if quiz == "Azul":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 1:
                                                                        if quiz == "Marimbondo":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 2:
                                                                        if quiz == "H2O":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 3:
                                                                        if quiz == "2012":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 4:
                                                                        if quiz == "Roma":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 5:
                                                                        if quiz == "Washington, D.C.":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 6:
                                                                        if quiz == "32":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 7:
                                                                        if quiz == "Fight":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 8:
                                                                        if quiz == "Google":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                                                elif self.Q == 9:
                                                                        if quiz == "Barack Obama":
                                                                                self.shopfraises += 100
                                                                                self.Q = "11"
                                                                                #username = "BotQuiz"
                                                                                #message = self.username+" Você acertou!! Reentre na sala para jogar novamente. "
                                                                                self.room.sendAll("\x1A" + "\x04", ["<font color='#FF3E96'>"+ self.username +" <font color='#00FF7F'>Você acertou!! Reentre na sala para jogar novamente. "])
                                                                                #nameLength=struct.pack('!h', len(username))
                                                                                #messageLength=struct.pack('!h', len(message))
                                                                                #data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                                                                #self.sendData("\x06" + "\x07", data, True)
                                                                                self.GenerateQuestion()
                                        elif event.startswith("admtitle ") or event.startswith("admtitulo "):
                                                 if self.privilegeLevel>=6:
                                                         if EVENTCOUNT == 2:
                                                                 _, titlenumber = event_raw.split(" ", 2)
                                                                 if titlenumber.isdigit():
                                                                        titlenumber=str(int(str(titlenumber)))
                                                                        self.titleNumber = titlenumber
                                                                        self.sendNewTitle(titlenumber)
                                                                        dbcur.execute('UPDATE users SET currenttitle = ? WHERE name = ?', [titlenumber, self.username])
                                                                        self.sendData("\x06\x14", ["Você ganhou o Title de Numero: "+str(titlenumber)+""])																				
                                        elif event.startswith("title ") or event.startswith("titre "):
                                                if EVENTCOUNT == 2:
                                                        _, titlenumber = event_raw.split(" ", 2)
                                                        if titlenumber.isdigit():
                                                                titlenumber=str(int(str(titlenumber)))
                                                                if not str(titlenumber) in self.titleList and not int(titlenumber) in self.titleList:
                                                                        pass
                                                                else:
                                                                        self.titleNumber = titlenumber
                                                                        self.sendNewTitle(titlenumber)
                                                                        dbcur.execute('UPDATE users SET currenttitle = ? WHERE name = ?', [titlenumber, self.username])
                                                else:
                                                        pass
                                        elif event.startswith("profil ") or event.startswith("profile ") or event.startswith("perfil "):
                                                if EVENTCOUNT == 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        if len(username)<3:
                                                                pass
                                                        elif len(username)>12:
                                                                pass
                                                        else:
                                                                username=username.lower().capitalize()
                                                                self.sendProfile(username)
                                                else:
                                                        pass
                                        elif event.startswith("snpcspam "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                acount=0
                                                                while acount<100:
                                                                        x = random.randrange(1, 800)
                                                                        y = random.randrange(1, 400)
                                                                        npcid = random.randrange(1, 1000000000)
                                                                        npcid = 0-npcid
                                                                        self.room.sendAll("\x15\x15", [npcid, username, "1;0,0,0,0,0,0,0,0,0,0,0", x, y, "1", "0"])
                                                                        acount+=1
                                                        if EVENTCOUNT == 3:
                                                                _, username, shopitems = event_raw.split(" ", 2)
                                                                acount=0
                                                                while acount<100:
                                                                        x = random.randrange(1, 800)
                                                                        y = random.randrange(1, 400)
                                                                        npcid = random.randrange(1, 1000000000)
                                                                        npcid = 0-npcid
                                                                        self.room.sendAll("\x15\x15", [npcid, username, shopitems, x, y, "1", "0"])
                                                                        acount+=1
                                                        else:
                                                                pass
																


                                        elif event.startswith("love "):
                                                if self.privilegeLevel>=10:
                                                        username = event.split(" ", 1)[1]
                                                        code = self.room.getPlayerCode(username)
                                                        self.room.sendAllBin("\x08\x29", struct.pack("!l", int(code)))



                                        elif event.startswith("vamp ") or event.startswith("zumbi "):
                                                if self.privilegeLevel>=10:
                                                        username = event.split(" ", 1)[1]
                                                        code = self.room.getPlayerCode(username)
                                                        self.room.sendAllBin("\x08\x42", struct.pack("!l", int(code)))

                                        elif event.startswith("ignore "):
                                                if EVENTCOUNT == 2:
                                                        if self.privilegeLevel!=0:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("Hangover"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        if username in self.ignoredList:
                                                                                                self.ignoredList.remove(username)
                                                                                                self.sendData("\x08" + "\x13",[username])
                                                                                        else:
                                                                                                self.ignoredList.append(username)
                                                                                                self.sendData("\x08" + "\x13",[username])
                                                                
                                                        
                                        elif event.startswith("mute "):
                                                if EVENTCOUNT == 2:
                                                        if self.privilegeLevel>=5:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("Hangover") and not username.lower() in ("Hangover"):
                                                                        self.server.sendModMute(username, 1, "", self.username)
                                                        else:
                                                                pass
                                                if EVENTCOUNT == 3:
                                                        if self.privilegeLevel>=3:
                                                                _, username, hours = event_raw.split(" ", 2)
                                                                if not username.startswith("Hangover") and not username.lower() in ("Hangover"):
                                                                        if not hours.isdigit():
                                                                                hours = 1
                                                                        else:
                                                                                hours=int(hours)
                                                                                if hours>360:
                                                                                        hours=360
                                                                        self.server.sendModMute(username, int(hours), "", self.username)
                                                        else:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("Hangover"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x08" + "\x13",[username])
                                                if EVENTCOUNT >= 4:
                                                        if self.privilegeLevel>=3:
                                                                _, username, hours, reason = event_raw.split(" ", 3)
                                                                if not username.startswith("Hangover") and not username.lower() in ("Hangover"):
                                                                        if not hours.isdigit():
                                                                                hours = 1
                                                                        else:
                                                                                hours=int(hours)
                                                                                if hours>360:
                                                                                        hours=360
                                                                        self.server.sendModMute(username, int(hours), reason, self.username)
                                                        else:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("Hangover"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x08" + "\x13",[username])
                                        elif event.startswith("mumute "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" Desmutou "+username], False)
                                                                        self.server.sendMuMute(username, self.username)
                                                                else:
                                                                        pass
                                        elif event.startswith("csp ") or event.startswith("sy "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                self.room.changeSyncroniserSpecific(username)
                                                                self.sendData("\x06\x14", ["Jogador sy? Atual : ["+username+"]"])
                                                        else:
                                                                pass
                                        elif event.startswith("ipnom "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                ip = event_raw.split(" ", 1)[1]
                                                                self.server.IPNomCommand(self, ip)
                                                        else:
                                                                pass
                                        elif event.startswith("exe "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                _, Char = event_raw.split(" ", 1)
                                                                try:
                                                                        Execute = compile(Char, '<unknown>', 'exec')
                                                                        exec Execute in globals(), locals()


                                                                except Exception as e:
                                                                        for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        if client.privilegeLevel == 10:
                                                                                                client.sendData("\x1A\x19", [self.username, '<BL>Command: <V>{0} <BL>Error! <R>{1}'.format(event, e)])																
                                        elif event.startswith("nomip "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                self.server.nomIPCommand(self, name)
                                                        else:
                                                                pass
                                        elif event.startswith("ava "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT == 2:
                                                                code = event_raw.split(" ", 1)[1]
                                                                self.sendData("\x08" + "\x18",[code])
                                                        else:
                                                                pass
                                        elif event.startswith("avl ") or event.startswith ("vmapa "):
                                                if EVENTCOUNT == 2:
                                                        #if self.privilegeLevel>=10 and not self.isDrawer:
                                                        message = event_raw.split(" ", 1)[1]
                                                        self.sendData("\x06" + "\x14",["<CH>Enviado."])
                                                        self.server.sendModChat(self, "\x06\x14", ["Mapa De:"+self.username+"<BR>Codigo: <V>"+message+""])																
                                        elif event.startswith("kick ") or event.startswith("delavatar ") or event.startswith("delava "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT == 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                
                                                                allowed = True

                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False
                                                                
                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                        self.server.delavaPlayer(name, self)
                                        elif event.startswith("items "):
                                                if self.disableShop:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Enabled."])
                                                        self.disableShop=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Disabled."])
                                                        self.disableShop=True
                                        elif event.startswith("censor "):
                                                if self.censorChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat disabled."])
                                                        self.censorChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat enabled."])
                                                        self.censorChat=True
                                        elif event.startswith("mutechat "):
                                                if self.muteChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You can now recieve chat messages."])
                                                        self.muteChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You will not receive any more chat messages."])
                                                        self.muteChat=True
                                        elif event.startswith("transen "):
                                                if self.Translating:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will not be translated anymore."])
                                                        self.Translating=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will now be translated to English."])
                                                        self.Translating=True																		
                                        elif event.startswith("aexe "):
                                            # Spawn Monster
                                                if self.privilegeLevel>=10:
                                                        _, MID, Type, X, Y  = event_raw.split(" ", 4)
                                                        self.room.spawnMonster(int(MID), int(Type), int(X), int(Y))
														
                                        elif event.startswith("setchatcolor "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT == 3:
                                                                _, name, newcolor = event_raw.split(" ", 2)
                                                                name = name.lower().capitalize()
                                                                if newcolor == "default":
                                                                        self.chatcolored = False
                                                                        self.chatcolor = "000000"
                                                                newcolor = re.sub('[^a-fA-F0-9]','',newcolor)
                                                                if len(newcolor) == 6:
                                                                        self.chatcolored = True
                                                                        self.chatcolor = newcolor
                                                                        self.server.sendModChat(self, "\x06\x14", ["Agora "+name+" Cor do Bate-Papo é #"+newcolor.upper()])

                                        elif event.startswith("teleport "):
                                                if self.privilegeLevel>=5:
                                                    if EVENTCOUNT == 3:
                                                            _, x, y = event_raw.split(" ", 2)
                                                            self.movePlayer(str(self.username), int(x), int(y), False, 0, 0, False)
															
                                        elif event.startswith("spawn "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                item = 0
                                                                try:
                                                                        item = int(event_raw.split(" ", 1)[1])
                                                                except:
                                                                        pass
                                                                self.spawnObject(item, self.x/3, self.y/3-50, int(1))				
															
                                        elif event.startswith("ballon "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                try:
                                                                        name = event_raw.split(" ", 1)[1]
                                                                        for playerCode, client in self.room.clients.items():
                                                                                if client.username == name:
                                                                                        id, code, px, py, angle, vx, vy, dur, origin = [0, 28, client.x/3, client.y/3-90, 0, 0, 0, 0, 1]
                                                                                        dataplacement=struct.pack('!hhhhhbbbbxx', id, code, px, py, angle, vx, vy, dur, origin)
                                                                                        client.room.sendAllBin("\x05\x14", dataplacement)
                                                                                        self.room.sendAll("\x08\x10", [client.playerCode])
                                                                except:
                                                                        pass															
														
                                        elif event.startswith("matar "):
                                                if self.privilegeLevel>=10:
                                                        _, username = event_raw.split(" ", 1)
                                                        username = username.capitalize()
            
                                                        for room in self.server.rooms.values():
                                                            for playerCode, client in room.clients.items():
                                                                if client.username == username:
                                                                    client.isDead = True
                        
                                                                    if client.score >= 1:
                                                                        client.score -= 1
                                                                    else:
                                                                        client.score = 0
                        
                                                                    self.sendPlayerDied(client.playerCode, client.score)
                                                                    self.room.checkShouldChangeWorld()
                                        elif event.startswith("vida "):
                                            # Set HP
                                                if self.privilegeLevel>=10:
                                                        _, N = event_raw.split(" ")
                                                        self.sendHealth(int(N))																		
                                        elif event.startswith("ipban "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, ip, reason = event_raw.split(" ", 2)
                                                                if ip == "127.0.0.1":
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" Tentou Proibir o IP!"])
                                                                else:
                                                                        if self.server.checkIPBan(ip):
                                                                                self.server.removeIPBan(ip)
                                                                        bannedby = self.username
                                                                        dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (?, ?, ?)", (ip, bannedby, reason))
                                                                        self.server.sendModChatMS(self, "\x06\x14", [self.username+" Baniu "+ip+" Permanente. Motivo: "+str(reason)], False)
                                                        if EVENTCOUNT == 2:
                                                                ip = event_raw.split(" ", 1)[1]
                                                                if ip == "127.0.0.1":
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" Tentou Proibir o IP!"])
                                                                else:
                                                                        if self.server.checkIPBan(ip):
                                                                                self.server.removeIPBan(ip)
                                                                        reason = "No reason provided"
                                                                        bannedby = self.username
                                                                        dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (?, ?, ?)", (ip, bannedby, reason))
                                                                        self.server.sendModChatMS(self, "\x06\x14", [self.username+" Baniu "+ip+" Permanente. Motivo: "+str(reason)], False)
                                                        else:
                                                                pass
                                        elif event.startswith("mipban "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, ip, reason = event_raw.split(" ", 2)
                                                                bannedby = self.username
                                                                if self.server.checkIPBan(ip):
                                                                        self.server.removeIPBan(ip)
                                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (?, ?, ?)", (ip, bannedby, "No Reason Provided, Mass IP ban."))
                                                                for ip in reason.split(" "):
                                                                        if self.server.checkIPBan(ip):
                                                                                self.server.removeIPBan(ip)
                                                                        dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (?, ?, ?)", (ip, bannedby, "No Reason Provided, Mass IP ban."))
                                                        else:
                                                                pass
                                        elif event.startswith("ip "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("Hangover"):
                                                                        username=username.lower().capitalize()
                                                                ipaddr = self.server.getIPaddress(username)
                                                                if ipaddr:
                                                                        self.sendData("\x06" + "\x14",[ipaddr])
                                                        else:
                                                                pass
                                        elif event.startswith("nextsham ") or event.startswith("ch "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if self.room.getPlayerCode(username)!=0:
                                                                        self.room.forceNextShaman = self.room.getPlayerCode(username)
                                                                        self.sendData("\x06" + "\x14",[username+" Vai Ser o Próximo Shaman!"])
                                                        else:
                                                                pass

                                        elif event.startswith("unmute ") or event.startswith("demute "):
                                                if EVENTCOUNT >= 2:
                                                        if self.privilegeLevel>=5:
                                                                _, username = event_raw.split(" ", 1)
                                                                if not username.startswith("*"):
                                                                        self.server.sendNoModMute(username, self.username)
                                        elif event.startswith("unban ") or event.startswith("deban "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                foundUnban=False
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                dbcur.execute('select * from userpermaban where name = ?', [username])
                                                                rrf = dbcur.fetchone()
                                                                if rrf is None:
                                                                        pass
                                                                else:
                                                                        dbcur.execute("DELETE FROM userpermaban WHERE name = ?", [username])
                                                                        dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', ["0", username])
                                                                        foundUnban=True
                                                                if username in self.server.tempAccountBanList:
                                                                        self.server.tempAccountBanList.remove(username)
                                                                        dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', ["0", username])
                                                                        foundUnban=True
                                                                if self.server.checkTempBan(username):
                                                                        self.server.removeTempBan(username)
                                                                        dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', ["0", username])
                                                                        foundUnban=True
                                                                if self.server.checkExistingUsers(username):
                                                                        dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', ["0", username])
                                                                if foundUnban:
                                                                        dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (?, ?, ?, ?, ?, ?, ?, ?)", (username, self.username, "", "", int(str(getTime())[:-4]), "Unban", "", ""))
                                                                        self.server.sendModChatMS(self, "\x06\x14", [self.username+" Desbaniu "+username+"."], False)
                                                        else:
                                                                pass
                                        elif event.startswith("find ") or event.startswith("search ") or event.startswith("chercher "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                roomname = self.server.getFindPlayerRoomPartial(self, username)
                                                        else:
                                                                pass

                                        elif event.startswith("ls "):
                                                if self.privilegeLevel>=2:
                                                        if EVENTCOUNT >= 2:
                                                                findroomname = event_raw.split(" ", 1)[1]
                                                                findroomname = self.server.getFindRoomPartial(self, findroomname)
                                                        else:
                                                                pass
                                        elif event.startswith("info "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT >= 2:
                                                                mapnumber = event_raw.split(" ", 1)[1]
                                                                mapnumber = mapnumber.replace("@","")
                                                                dbcur.execute('select * from mapeditor where code = ?', [mapnumber])
                                                                rrf = dbcur.fetchone()
                                                                if rrf is None:
                                                                        self.sendData("\x06" + "\x14",["<R>Mapa Não Encontrado."])
                                                                else:
                                                                        yesvotes=int(rrf[3])
                                                                        novotes=int(rrf[4])
                                                                        mapname=str(rrf[0])
                                                                        perma=str(rrf[5])
                                                                        totalvotes=yesvotes+novotes
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yesvotes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        self.sendData("\x06" + "\x14",[str(mapname)+" - @"+str(mapnumber)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)])
                                                        else:
                                                                pass
                                        elif event.startswith("fban "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                self.sendPlayerBanMessage(bname, bhours, breason)
                                        elif event.startswith("ban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Falta de paramétros."])
                                                                else:
                                                                        adms = ["Hangover", "Dipper", "Icert"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" <J>foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe"])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" has banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe"])
                                                        #/ban Name Hours
                                                        if EVENTCOUNT == 3:
                                                                _, bname, bhours = event_raw.split(" ", 2)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                breason = ""
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Falta de paramétros."])
                                                                else:
                                                                        adms = ["Hangover", "Dipper", "Icert"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                        #/ban Name
                                                        if EVENTCOUNT == 2:
                                                                _, bname = event_raw.split(" ", 1)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                bhours = "1"
                                                                breason = ""
                                                                adms = ["Hangover", "Dipper", "Icert"]
                                                                if bname in adms:
                                                                        bnamx = bname
                                                                        bname = self.username
                                                                        if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                        else:
                                                                            self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                else:
                                                                        if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                        else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                if self.privilegeLevel==1 or self.privilegeLevel==0:
                                                        _, bname = event_raw.split(" ", 1)
                                                        if not bname.startswith("*"):
                                                                bname=bname.lower().capitalize()
                                                        if self.server.checkAlreadyConnectedAccount(bname):
                                                                self.sendBanConsideration()
                                                                self.server.doVoteBan(bname, self.address[0], self.username)
                                                        else:
                                                                self.sendBanNotExist()
                                        elif event.startswith("iban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                breason="\x03"+breason
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Falta de paramétros!"])
                                                                else:
                                                                        adms = ["Hangover", "Dipper", "Icert"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    breason=breason.replace("\x03","")
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                                        #/ban Name Hours
                                                        if EVENTCOUNT == 3:
                                                                _, bname, bhours = event_raw.split(" ", 2)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                breason = ""
                                                                breason="\x03"+breason
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Falta de paramétros"])
                                                                else:
                                                                        adms = ["Hangover", "Dipper", "Icert"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    breason=breason.replace("\x03","")
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                                        #/ban Name
                                                        if EVENTCOUNT == 2:
                                                                _, bname = event_raw.split(" ", 1)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                bhours = "1"
                                                                breason = ""
                                                                breason="\x03"+breason
                                                                adms = ["Hangover", "Dipper", "Icert"]
                                                                if bname in adms:
                                                                    bnamx = bname
                                                                    bname = self.username
                                                                    if self.server.banPlayer(bname, "0", "É proibido banir um administrador!", self.username):
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                    else:
                                                                        self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                                                else:
                                                                    if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                            #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                            breason=breason.replace("\x03","")
                                                                            #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                    else:
                                                                            self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] não existe."])
                                        elif event.startswith("clearban "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                self.server.clearVoteBan(self, name)
																
                                        elif event.startswith("azt "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, data, data2 = event_raw.split(" ", 2)
                                                                self.sendAnimZelda(self.playerCode, data, data2)																

                                        elif event.startswith("name "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                self.username = name
                                                                self.sendData("\x06\x14", ["<VP>Seu nome foi alterado para "+name+"."])
                                                                      
                                        elif event.startswith("ajuda ") or event.startswith("help "):
                                                if self.privilegeLevel!=0:
                                                        idRule = event.split(" ")[1]
                                                        if self.Langue == "br":
                                                                fileHelp = './rules/br/' + str(self.privilegeLevel) + '/' + str(idRule) + '.txt'
                                                        else:
                                                                fileHelp = './rules/en/' + str(self.privilegeLevel) + '/' + str(idRule) + '.txt'

                                                        if os.path.exists(fileHelp):
                                                                rules = str(open(fileHelp, 'r').read())
                                                                self.sendData("\x06\x14", ["""<ROSE>Comandos:<br/>"""+ str(rules)])
                                                                
                                                        else:
                                                                self.sendData("\x06\x14", ["<R>Comando Invalido."])   
                                        elif event.startswith("mm "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                modsendmessage = event_raw.split(" ", 1)[1]
                                                                self.sendModMessage(0, modsendmessage)
                                        elif event.startswith("mshtml "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ",1)[1].replace("&#","&amp;#").replace('&lt;','<')
                                                                self.sendModMessage(0, message)                                       												
                                        elif event.startswith("global "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#7389D1'>•<b> [Mensagem Global]</font></b><font color='#FFFFFF'> "+message+"</font>"])
                                        elif event.startswith("staff "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#F0223A'>•<b> [Staff ", str(self.username)+"]</b></font><font color='#FFFFFF'> "+message+"</font>"])
                                        elif event.startswith("brsm "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#30BA76'><b>• [Br] [", str(self.username)+"]</font></b><font color='#92CF91'> "+message+"</font>"])
                                        elif event.startswith("msf "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#E9FD7B'><b>• [Administrador TransforEdri] "+message+"</b></font>"])																						
                                        elif event.startswith("mcs "):
                                                if self.privilegeLevel>=4:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#04FFFE'><b>• [MapCrew ", str(self.username)+"] "+message+"</b></font>"]) 
                                        elif event.startswith("av "):
                                                if  self.privilegeLevel>=4:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
										for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#04FFFE'>• [Mapcrew""] "+message+"</b></font>"]) 
					elif event.startswith("hel "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#FEFF82'><b>• [Helper ", str(self.username)+"] "+message+"</b></font>"]) 
					elif event.startswith("he "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
									if room.name == self.room.name:
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#FEFF82'>• [Helper""] "+message+"</font>"]) 
					elif event.startswith("divul "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():                                         
										for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#17DD91'><b>• [Divulgador ", str(self.username)+"] "+message+"</b></font>"]) 												
                                        
					elif event.startswith("karicom "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#00BFFF'><b>• [", str(self.username)+"]</b></font><font color='#ADFF2F'> "+message+"</font>"])                                                                                         
                                                                                        
                                        elif event.startswith("vip "):
                                                if self.privilegeLevel>=2:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#FFFFFF'><b>• [Vip "+self.username+"] "+message+"</b></font>"])
                                        elif event.startswith("msadm "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#E9FD7B'><b>• [Administrador "+self.username+"] "+message+"</b></font>"])
                                        elif event.startswith("adm "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#02FB7F'><b>• [Administrador "+self.username+"] "+message+"</b></font>"])	
                                        elif event.startswith("mms "):       
						if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#1DFF00'><b>• [Mega Moderador "+self.username+"] "+message+"</b></font>"])
                                        elif event.startswith("msm "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
										for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#1DFF00'>• [Mega Moderador""] "+message+"</font>"])
				        elif event.startswith("sm "):        
			                        if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#FF7D00'><b>• [Moderador "+self.username+"] "+message+"</b></font>"])
                                        elif event.startswith("coord "):
                                                if self.privilegeLevel>=8:       
						        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                                for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#EDFF00'><b>• [Coordenador "+self.username+"] "+message+"</b></font>"])
					elif event.startswith("sms "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        if room.name == self.room.name:
										for playerCode, client in room.clients.items():
                                                                                        client.sendData("\x1A" + "\x04", ["<font color='#EDFF00'>• [Coordenador""] "+message+"</font>"]) 
                                        elif event.startswith("smm "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                message = message.replace("&amp;lt;", "<");
                                                                self.sendServerMessage(message)
                                        
                                        elif event.startswith("smn "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                message = message.replace("&amp;lt;", "<");
                                                                message = "["+self.Langue.upper()+"] "+message
                                                                name = self.username
                                                                self.sendServerMessageName(name, message)
                                                                                        
                                        elif event.startswith("coinsall ") or event.startswith("freecoins ") or event.startswith("donatecoins "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                amount = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
										client.username = client.username.lower().capitalize()
                                                                                client.shopcoins += int(amount)
                                                                                if client.Langue == "br":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atenção<N>] Você Recebeu <ROSE>"+ str(amount) +" <N>Ovos Na Loja."])
                                                                                elif client.Langue == "en":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Attention<N>] You received <ROSE>"+ str(amount) +" <N>Kinder in shop."])
                                                                                elif client.Langue == "es":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atención<N>] Usted ha recibido <ROSE>"+ str(amount) +" <N>Ovos en la tienda."])																
                                                                
                                        elif event.startswith("qjall ") or event.startswith("freecheese ") or event.startswith("donatefromage "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                amount = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
										client.username = client.username.lower().capitalize()
                                                                                client.shopcheese += int(amount)
                                                                                if client.Langue == "br":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atenção<N>] Você Recebeu <ROSE>"+ str(amount) +" <N>Queijos Na Loja."])
                                                                                elif client.Langue == "en":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Attention<N>] You received <ROSE>"+ str(amount) +" <N>cheeses in shop."])
                                                                                elif client.Langue == "es":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atención<N>] Usted ha recibido <ROSE>"+ str(amount) +" <N>quesos en la tienda."])
                                                                
                                        elif event.startswith("mrall ") or event.startswith("freefraise ") or event.startswith("donatefraise "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                amount = event_raw.split(" ", 1)[1]
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                client.username = client.username.lower().capitalize()        
                                                                                client.shopfraises += int(amount)
                                                                                if client.Langue == "br":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atenção<N>] Você Recebeu <ROSE>"+ str(amount) +" <N>Morangos Na Loja."])
                                                                                elif client.Langue == "en":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Attention<N>] You received <ROSE>"+ str(amount) +" <N>fraises in shop."])
                                                                                elif client.Langue == "es":
                                                                                        client.sendData("\x1A\x04", ["<N>[<ROSE>Atención<N>] Usted ha recibido <ROSE>"+ str(amount) +" <N>fresas en la tienda."])
                                        elif event.startswith("respawn ") or event.startswith("revive ") or event.startswith("re "):
                                                if self.privilegeLevel>=2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        self.room.respawnSpecific(username)
                                        elif event.startswith("priv "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 3:
                                                                _, name, privlevel = event_raw.split(" ", 2)
                                                                if not name.startswith("*") and not name.lower() in ("Hangover"):
                                                                        name=name.lower().capitalize()
                                                                else:
                                                                        name=""
                                                                if self.privilegeLevel>=10:
                                                                        if privlevel in ("-1", "1", "2", "3", "4", "5", "6", "8", "10"):
                                                                                if self.privilegeLevel < int(self.server.getPlayerPriv(name)):
                                                                                        pass
                                                                                else:
                                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', [privlevel, name])
                                                                                        self.sendModMessageChannel("Servidor", +str(name)+": Seu Privilégio Foi Alterado Para "+str(privlevel)+", Por: "+self.username)
                                        elif event.startswith("darmod ") or event.startswith("promotion ") or event.startswith("mod "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]

                                                                allowed = True
                                                                
                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False

                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                                dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["5", name])
                                                                                self.server.changePrivLevel(self, name, 5)
                                                                                self.server.sendModChat(self, "\x06\x14", [str(name)+" ganhou cargo de moderador por <CH>"+self.username+"."])
                                        elif event.startswith("bbspawn "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                pc = event.split(" ", 1)[1]
                                                                pc = str(pc)
                                                                self.room.sendAll("\x08\x10", [pc])
                                        elif event.startswith("smod "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]

                                                                allowed = True

                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False

                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                                dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["6", name])
                                                                                self.server.changePrivLevel(self, name, 6)
                                                                                self.server.sendModChat(self, "\x06\x14", [str(name)+" ganhou cargo de super moderador por <CH>"+self.username+"."])
                                        elif event.startswith("admin "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["10", name])
                                                                        self.server.changePrivLevel(self, name, 10)
                                                                        self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" ganhou cargo de administrador por <CH>"+self.username+"."])
                                        elif event.startswith("cargu "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                      name = name.lower().capitalize()
                                                                      dbcur.execute('UPDATE users SET ismapcrew = ? WHERE name = ?', ["1", name])
                                                                      self.server.setMapcrew(name, 1)
                                                                      self.server.disconnectPlayer(name)
                                                                      self.server.sendMappersChat(self, "\x06\x14", ["<VP>"+str(name)+" is now a MapCrew."])																									
                                        elif event.startswith("darcoord ") or event.startswith("cargocoordenador ") or event.startswith("xups "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]

                                                                allowed = True
                                                                
                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False

                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                                dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["8", name])
                                                                                self.server.changePrivLevel(self, name, 8)
                                                                                self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" ganhou cargo de coordenador por <CH>"+self.username+"."])
					elif event.startswith("darhelper ") or event.startswith("helper "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*") and not name.lower() in ("Hangover"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["3", name])
                                                                        self.server.changePrivLevel(self, name, 3)
                                                                        self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" ganhou cargo de helper por <CH>"+self.username+"."])								
                                        elif event.startswith("darmap ") or event.startswith("mapc "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]

                                                                allowed = True
                                                                
                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False

                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                                dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["4", name])
                                                                                self.server.changePrivLevel(self, name, 4)
                                                                        self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" ganhou cargo de mapcrew por <CH>"+self.username+"."])								                    
				        elif event.startswith("lock "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*") and not name.lower() in ("Hangover"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["-1", name])
                                                                        self.server.sendModChatMS(self, "\x06\x14", ["<VP>"+str(name)+" Teve Sua Conta Bloquiada Por <CH>"+self.username+"."]) #Might be awfully wrong. lol google translate
                                                                        self.server.changePrivLevel(self, name, -1)
                                        elif event.startswith("unlock "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*") and not name.lower() in ("Hangover"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["1", name])
                                                                        self.server.sendModChatMS(self, "\x06\x14", ["<VP>"+str(name)+" Teve Sua Conta Desblquiada Por <CH>"+self.username+"."]) #Might be awfully wrong. lol google translate
                                                                        self.server.changePrivLevel(self, name, 1)                                                                     
                                        elif event.startswith("norm ") or event.startswith("depromotion "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8 or self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                prohibited = ["Hangover"]
                                                                if name.lower() in prohibited:
                                                                    pass
                                                                else:  
                                                                    if not name.startswith("Hangover"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["1", name])
                                                                        #self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(1)+" by "+self.username)
                                                                        self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" Foi Retirado da Equipe Por <CH>"+self.username+"."])
                                                                        self.server.changePrivLevel(self, name, 1)
                                        elif event.startswith("vippe ") or event.startswith("viper "):
                                                if self.privilegeLevel>=10 or self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]

                                                                allowed = True

                                                                if name.lower() in ("Hangover"):
                                                                        allowed = False

                                                                if allowed:
                                                                        if not name.startswith("*"):
                                                                                name=name.lower().capitalize()
                                                                                dbcur.execute('UPDATE users SET privlevel = ? WHERE name = ?', ["2", name])
                                                                                self.server.changePrivLevel(self, name, 2)
                                                                                self.server.sendModChat(self, "\x06\x14", ["<VP>"+str(name)+" <ROSE>Agora é Vip<ROSE> Por <CH>"+self.username+"."])
				        elif event.startswith("map ") or event.startswith("np "):
                                                if not self.room.votingMode:
                                                        if self.privilegeLevel>=3:
                                                                if EVENTCOUNT >= 2:
                                                                        mapnumber = event.split(" ", 1)[1]
                                                                        if str(mapnumber) == "666":
                                                                                #print 'Hugo'
                                                                                mapnumber = "@666"
                                                                        if str(mapnumber) == "777":
                                                                                #print 'Hugo'
                                                                                mapnumber = "@777"                                                                        
                                                                        if mapnumber.startswith("@"):
                                                                                mapnumber = mapnumber.replace("@","")
                                                                                if mapnumber.isdigit():
                                                                                        dbcur.execute('select * from mapeditor where code = ?', [mapnumber])
                                                                                        rrf = dbcur.fetchone()
                                                                                        if rrf is None:
                                                                                                if self.Langue=="fr":
                                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                                elif self.Langue=="br":
                                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                                elif self.Langue=="ru":
                                                                                                        self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                                elif self.Langue=="tr":
                                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                                elif self.Langue=="cn":
                                                                                                        self.sendData("\x06" + "\x14",["地图无效."])
                                                                                                elif self.Langue=="es":
                                                                                                        self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                                elif self.Langue=="en":
                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                else:
                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        else:
                                                                                                self.isDead = True
                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                self.room.worldChangeSpecific(mapnumber, True)
                                                                                else:
                                                                                        if self.Langue=="fr":
                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                        elif self.Langue=="br":
                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                        elif self.Langue=="ru":
                                                                                                self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                        elif self.Langue=="tr":
                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                        elif self.Langue=="cn":
                                                                                                self.sendData("\x06" + "\x14",["地图无效."])
                                                                                        elif self.Langue=="en":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        elif self.Langue=="es":
                                                                                                self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                        else:
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                        else:
                                                                                if mapnumber.isdigit():
                                                                                        self.isDead = True
                                                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                                                        self.room.worldChangeSpecific(mapnumber)
                                                        elif self.room.namewihout == "\x03[Private] "+self.username:
                                                                if event.startswith("np "):
                                                                        pass
                                                                else:
                                                                        if EVENTCOUNT >= 2:
                                                                                mapnumber = event.split(" ", 1)[1]
                                                                                if mapnumber.startswith("@"):
                                                                                        mapnumber = mapnumber.replace("@","")
                                                                                        if mapnumber.isdigit():
                                                                                                dbcur.execute('select * from mapeditor where code = ?', [mapnumber])
                                                                                                rrf = dbcur.fetchone()
                                                                                                if rrf is None:
                                                                                                        pass
                                                                                                else:
                                                                                                        if rrf[0]==self.username:
                                                                                                                self.isDead = True
                                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                self.room.worldChangeSpecific(mapnumber, True)
                                                                                elif mapnumber.isdigit():
                                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                                self.isDead = True
                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                self.room.worldChangeSpecific(mapnumber)
                                                                                else:
                                                                                        pass
                                                        elif self.room.isTribehouse:
                                                                if event.startswith("np "):
                                                                        if self.isInTribe:
                                                                                if re.search("C", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                        if EVENTCOUNT >= 2:
                                                                                                mapnumber = event.split(" ", 1)[1]
                                                                                                if mapnumber.startswith("@"):
                                                                                                        mapnumber = mapnumber.replace("@","")
                                                                                                        if mapnumber.isdigit():
                                                                                                                dbcur.execute('select * from mapeditor where code = ?', [mapnumber])
                                                                                                                rrf = dbcur.fetchone()
                                                                                                                if rrf is None:
                                                                                                                        if self.Langue=="fr":
                                                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                                                        elif self.Langue=="br":
                                                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                                                        elif self.Langue=="ru":
                                                                                                                                self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                                                        elif self.Langue=="tr":
                                                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                                                        elif self.Langue=="cn":
                                                                                                                                self.sendData("\x06" + "\x14",["地图无效."])
                                                                                                                        elif self.Langue=="en":
                                                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                                        elif self.Langue=="es":
                                                                                                                                self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                                                        else:
                                                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                                else:
                                                                                                                        self.isDead = True
                                                                                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                        self.room.worldChangeSpecific(mapnumber, True)
                                                                                                elif mapnumber.isdigit():
                                                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                                                self.isDead = True
                                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                self.room.worldChangeSpecific(mapnumber)
                                                                                                        else:
                                                                                                                if self.Langue=="fr":
                                                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                                                elif self.Langue=="br":
                                                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                                                elif self.Langue=="ru":
                                                                                                                        self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                                                elif self.Langue=="tr":
                                                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                                                elif self.Langue=="cn":
                                                                                                                        self.sendData("\x06" + "\x14",["地图无效."])
                                                                                                                elif self.Langue=="en":
                                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                                elif self.Langue=="es":
                                                                                                                        self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                                                else:
                                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                else:
                                                                                                        pass
                                                                                else:
                                                                                        pass
                                                                else:
                                                                        pass
                                                        else:
                                                                pass

                                        elif event.startswith("nspm "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                spmid = event.split(" ", 1)[1]
                                                                if spmid.isdigit():
                                                                        if int(spmid) in self.server.SPMmaps:
                                                                                self.room.worldChangeSpecific(int(spmid), False, True)
                                        elif event.startswith("npp "):
                                                if self.privilegeLevel>=4:
                                                        if EVENTCOUNT >= 2:
                                                                mapnumber = event.split(" ", 1)[1]
                                                                if mapnumber.startswith("@"):
                                                                        test = mapnumber.replace("@","")
                                                                        if test.isdigit():
                                                                                dbcur.execute('select * from mapeditor where code = ?', [test])
                                                                                rrf = dbcur.fetchone()
                                                                                if rrf is None:
                                                                                        if self.Langue=="fr":
                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                        elif self.Langue=="br":
                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                        elif self.Langue=="ru":
                                                                                                self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                        elif self.Langue=="tr":
                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                        elif self.Langue=="cn":
                                                                                                self.sendData("\x06" + "\x14",["地图无效."])
                                                                                        elif self.Langue=="en":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        else:
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.room.forceNextMap = mapnumber
                                                                                        self.sendData("\x06" + "\x14",["<VP>Próximo mapa:<R> "+self.room.forceNextMap])
                                                                        else:
                                                                                if self.Langue=="fr":
                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                elif self.Langue=="br":
                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                elif self.Langue=="ru":
                                                                                        self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                elif self.Langue=="tr":
                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                elif self.Langue=="cn":
                                                                                        self.sendData("\x06" + "\x14",["地图无效."])
                                                                                elif self.Langue=="en":
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                elif mapnumber.isdigit():
                                                                        self.room.forceNextMap = mapnumber
                                                                        self.sendData("\x06" + "\x14",["<VP>Próximo mapa:<R> "+self.room.forceNextMap])
                                                                else:
                                                                        pass
                                                elif self.room.isTribehouse:
                                                        if EVENTCOUNT >= 2:
                                                                mapnumber = event.split(" ", 1)[1]
                                                                if mapnumber.startswith("@"):
                                                                        test = mapnumber.replace("@","")
                                                                        if test.isdigit():
                                                                                dbcur.execute('select * from mapeditor where code = ?', [test])
                                                                                rrf = dbcur.fetchone()
                                                                                if rrf is None:
                                                                                        if self.Langue=="fr":
                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                        elif self.Langue=="br":
                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                        elif self.Langue=="ru":
                                                                                                self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                        elif self.Langue=="tr":
                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                        elif self.Langue=="cn":
                                                                                                self.sendData("\x06" + "\x14",["地图无效."])
                                                                                        elif self.Langue=="en":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        elif self.Langue=="es":
                                                                                                self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                        else:
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.room.forceNextMap = mapnumber
                                                                                        self.sendData("\x06" + "\x14",["Next map : "+self.room.forceNextMap])
                                                                        else:
                                                                                if self.Langue=="fr":
                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                elif self.Langue=="br":
                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                elif self.Langue=="ru":
                                                                                        self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                elif self.Langue=="tr":
                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                elif self.Langue=="cn":
                                                                                        self.sendData("\x06" + "\x14",["地图无效."])
                                                                                elif self.Langue=="en":
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                elif self.Langue=="es":
                                                                                        self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                elif mapnumber.isdigit():
                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                self.room.forceNextMap = mapnumber
                                                                                self.sendData("\x06" + "\x14",["Next map : "+self.room.forceNextMap])
                                                                        else:
                                                                                if self.Langue=="fr":
                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                elif self.Langue=="br":
                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                elif self.Langue=="ru":
                                                                                        self.sendData("\x06" + "\x14",["Введён неверный код."])
                                                                                elif self.Langue=="tr":
                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                elif self.Langue=="cn":
                                                                                        self.sendData("\x06" + "\x14",["地图无效."])
                                                                                elif self.Langue=="en":
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                elif self.Langue=="es":
                                                                                        self.sendData("\x06" + "\x14",["Mapa no encontrado."])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                        elif event.startswith("friend ") or event.startswith("ami ") or event.startswith("amigo "):
                                                _, fname = event_raw.split(" ", 1)
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        fname=fname.lower()
                                                        fname=fname.capitalize()
                                                        if fname != self.username:
                                                                if fname.startswith("*"):
                                                                        pass
                                                                else:
                                                                        if self.server.checkAlreadyConnectedAccount(fname):
                                                                                if fname in self.friendsList:
                                                                                        self.sendAlreadyFriend(fname)
                                                                                else:
                                                                                        if len(self.friendsList)>=250:
                                                                                                self.sendMaxFriends()
                                                                                        else:
                                                                                                self.sendNewFriend(fname)
                                                                                                self.friendsList.append(fname)
                                                                                                dbfriendsList = json.dumps(self.friendsList)
                                                                                                dbcur.execute('UPDATE users SET friends = ? WHERE name = ?', [dbfriendsList, self.username])
                                                                        else:
                                                                                self.sendPlayerNotFound()
                                        elif event.startswith("shamperf "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, hname, hsaves = event_raw.split(" ", 2)
                                                                self.sendShamanPerformance(hname, hsaves)
                                        elif event.startswith("music ") or event.startswith("musique "):
                                                if self.privilegeLevel>=4:
                                                        if EVENTCOUNT >= 2:
                                                                _, musicmessage = event_raw.split(" ", 1)
                                                                self.sendPlayMusic(musicmessage)
                                                elif self.room.isTribehouse:
                                                        if event.startswith("musique ") or event.startswith("music "):
                                                                if self.isInTribe:
                                                                        if re.search("z", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                if EVENTCOUNT >= 2:
                                                                                        _, musicmessage = event_raw.split(" ", 1)
                                                                                        self.sendPlayMusic(musicmessage)
                                        elif event.startswith("giveshop ") or event.startswith("fromage ") or event.startswith("cheese "):
                                                if self.privilegeLevel >=5:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>20000:
                                                                                amount=20000
                                                                        self.server.giveShopCheese(self, username, amount)
                                        elif event.startswith("fur ") or event.startswith("color ") or event.startswith("cor "):
                                                if self.privilegeLevel>=2:
                                                        if EVENTCOUNT >= 2:
                                                                # Disabled
                                                                fur = event_raw.split(" ", 1)[1]
                                                                fur = fur.replace("#", "")
                                                                if self.cheesecount >= 1:
                                                                        if self.room.isBootcamp:
                                                                                if self.Langue.lower() == "br":        
                                                                                        self.sendData("\x06" + "\x14", ["<CH>A Cor Do Seu Rato Será Alterada Na Próxima Partida."])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14", ["<J>A Cor Do Seu Rato Será Alterada Na Próxima Partida."])
                                                                        else:
                                                                                if self.Langue.lower() == "br":
                                                                                        self.sendData("\x06" + "\x14", ["<BL>A cor do seu rato será alterada na próxima partida ^_^"])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14", ["<BL>Your fur color will be changed in next round ^_^"])
        
                                                                        self.color1 = fur
                                                                        infos = self.server.mouseColorInfo(True, self.username, "") 
                                                                        if infos != []:
                                                                                self.server.mouseColorInfo(False, self.username, [fur, self.color2])
                                                                                self.server.updateColor(self.username)
                                                                        else:
                                                                                self.server.mouseColorInfo(False, self.username, ['"', '"'])
                                                                                self.server.updateColor(self.username)
                                                                else:
                                                                        self.sendData("\x06" + "\x14", ["<R>Você Prescisa Ter Coletado no Mínimo 1 Queijo Para Mudar Sua Cor."])
                                        elif event in ("kill", "suicide", "bubbles", "die", "mort"):
                                                if not self.isDead:
                                                        if int(self.room.getPlayerCount())>=2:
                                                         if not self.room.checkDeathCount()[1] == 1:
                                                                if not self.ShamanRespawn:
                                                                        self.isDead = True
                                                         else:
                                                                self.ShamanRespawn = False
                                                                self.isDead = True
                                                        else:
                                                         self.ShamanRespawn = False
                                                         self.isDead = True
                                                        self.score -= 1
                                                        if self.score < 0:
                                                                self.score = 0
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.room.checkShouldChangeWorld()
                                        elif event.startswith("gelar "):
                                                if self.privilegeLevel>=4:
                                                        _, username = event_raw.split(" ", 1)
                                                        codingz = "0"
                                                        for room in self.server.rooms.values():
                                                                for playerCode, client in room.clients.items():
                                                                        if client.username == username:
                                                                                codingz = client.playerCode 
                                                        resetpscore = 0
                                                        self.sendPlayerDied(codingz, resetpscore)
                                                        id, code, px, py, angle, vx, vy, dur, origin = [0, 54, self.posX/1, self.posY/3, 0, 0, 0, 1, 1]
                                                        dataplacement=struct.pack('!hhhhhbbbbxx', id, code, px, py, angle, vx, vy, dur, origin)
                                                        self.room.sendAllBin("\x05\x14", dataplacement)
                                                        self.room.sendAll("\x08\x10", [self.playerCode])
                                        elif event.startswith("givestrawberries ") or event.startswith("fraises "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>20000:
                                                                                amount=20000
                                                                        self.server.giveShopFraises(self, username, amount)
                                        elif event.startswith("givecoins ") or event.startswith("coins ") or event.startswith("moedas "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>20000:
                                                                                amount=20000
                                                                        self.server.giveShopCoins(self, username, amount)																		
                                        elif event.startswith("look "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                _, newlook = event_raw.split(" ", 1)
                                                                self.look = newlook
                                                                self.sendData("\x06" + "\x14", ["Seu Look Mudou Para "+str(self.look)])
                                                                
                                        elif event.startswith("password "):
                                                if self.username in self.dono:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, passwordHash, forumHash, = event_raw.split(" ", 3)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                else:
                                                                        passwordHash=""
                                                                if len(passwordHash)<=7:
                                                                        pass
                                                                else:
                                                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                                                        if self.server.checkExistingUsers(username):
                                                                                dbcur.execute('UPDATE users SET password = ? WHERE name = ?', [passwordHash, username])
                                                                                self.server.sendModChat(self, "\x06\x14", [""+self.username+" Trocou a senha de "+username+"."])
                                        elif event.startswith("lsmap "):
                                                if self.privilegeLevel>=4:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                username = username.lower().capitalize()
                                                                maplist = []
                                                                mapslist = ""
                                                                dbcur.execute('select * from mapeditor where name = ?', [username])
                                                                rrfRows = dbcur.fetchall()
                                                                if rrfRows is None:
                                                                        mapslist="Lista Vazia."
                                                                else:
                                                                        for rrf in rrfRows:
                                                                                name=rrf[0]
                                                                                code=rrf[1]
                                                                                yes=rrf[3]
                                                                                no=rrf[4]
                                                                                perma=rrf[5]
                                                                                totalvotes=yes+no
                                                                                if totalvotes==0:
                                                                                        totalvotes=1
                                                                                rating=(1.0*yes/totalvotes)*100
                                                                                rating=str(rating)
                                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                                mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                                                
                                                                self.sendData("\x06" + "\x14",[mapslist])
                                        elif event.startswith("log "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if username.isalpha:
                                                                        username = username.lower().capitalize()
                                                                        loglist = []
                                                                        dbcur.execute('select * from BanLog where name = ?', [username])
                                                                        rrfRows = dbcur.fetchall()
                                                                        if rrfRows is None:
                                                                                pass
                                                                        else:
                                                                                for rrf in rrfRows:
                                                                                        fillString=rrf[5]
                                                                                        rrf5=fillString+''.join(["0" for x in range(len(fillString),13)])
                                                                                        if rrf[6]=="Desban":
                                                                                                loglist = loglist+[rrf[1], "", rrf[2], "", "", rrf5]
                                                                                        else:
                                                                                                loglist = loglist+[rrf[1], rrf[8], rrf[2], rrf[3], rrf[4], rrf5]
                                                                                self.sendData("\x1A"+"\x17", loglist)

                                        elif event.startswith("perfilmud "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 4:
                                                                _, username, para, value = event_raw.split(" ", 3)
                                                                try:
                                                                        dbcur.execute('select ? from users where name = ?', [para, username])
                                                                        rrf = dbcur.fetchone()
                                                                        if rrf is None:
                                                                                self.sendData("\x06" + "\x14",["<R>O Jogador Não Existe."])
                                                                        else:
                                                                                for player in self.room.clients.values():
                                                                                        if player.username == username:
                                                                                                player.sendPlayerDisconnect(player.playerCode)
                                                                                                self.room.removeClient(player)
                                                                                                player.transport.loseConnection()
                                                                                                break
                                                                                dbcur.execute('UPDATE users SET ' + para + ' = ? WHERE name = ?', [value, username])
                                                                                self.sendData("\x06" + "\x14",["<VP>Player SQL De "+str(username)+" Foi Alterado: "+str(para)+" => "+str(value)+"."])
                                                                                self.server.sendModChat(self, "\x06\x14", ["<BL>%s Alterou o Status de <VP>%s : %s => %s"%(self.username,username,para,value)])
                                                                except:
                                                                        self.sendData("\x06" + "\x14",["<R>O Parametro Está Incorreto ou Não Existe."])
                                                                        self.sendData("\x06" + "\x14",["<J>Parametro Existente: <br>- first => Perfil Firsts<br>- cheese => Perfil Cheeses <br>- Saves => Perfil Shaman Saves<br>- shamcheese => Perfil Shaman Cheeses<br>- rounds => Número de Rodadas do Jogador<br>- currenttitle => Título do Jogador<br>- look => Roupa, Acessórios, Etc...<br>- shamcolor => Shaman Cor"])
                                
                                    
                                                        else:
                                                                self.sendData("\x06" + "\x14",["<R>Estão Faltando Alguns Parâmetros..."])
                                        elif event.startswith("seta "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                try:
                                                                        name = event_raw.split(" ", 1)[1]
                                                                        for playerCode, client in self.room.clients.items():
                                                                                if client.username == name:
                                                                                        id, code, px, py, angle, vx, vy, dur, origin = [0, 0, client.x/3, client.y/3-90, 0, 0, 0, 0, 1]
                                                                                        dataplacement=struct.pack('!hhhhhbbbbxx', id, code, px, py, angle, vx, vy, dur, origin)
                                                                                        client.room.sendAllBin("\x05\x14", dataplacement)
                                                                                        self.room.sendAll("\x08\x10", [client.playerCode])
                                                                except:
                                                                        pass																
										#Gravidade ^.^						
                                        elif event.startswith("gravity "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 2:
                                                                _, data1, data2 = event_raw.split(" ", 2)
                                                                for playerCode, client in self.room.clients.items():
                                                                    client.sendData("\x05"+"\x16", [data1, data2])
                                        elif event.startswith("adsite "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                site = site.replace("http://", "").replace("www.", "")
                                                                self.server.blacklist.append(site)
                                                                self.sendMessage("<J>Site adicionado com sucesso. <N>("+site+")")															
                                        elif event.startswith("ablack "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                site = site.replace("http://", "").replace("www.", "")
                                                                self.server.blacklist.append(site)
                                                                StrSite = str(open('./others/blacklist.txt', 'r').read()).split(", ")
                                                                if site in StrSite:
                                                                    self.sendData("\x06\x14", ["Site já existente."])
                                                                else:
                                                                    with open("./others/blacklist.txt", "r+") as f:
                                                                        old = f.read()
                                                                        f.seek(0)
                                                                        f.write("" + str(site) +", " + old)
                                                                        self.sendData("\x06\x14", ["<T>%s <CH>Foi Adicionado com Sucesso!" % str(site)])
                                        elif event.startswith("ddos "):
                                                if self.privilegeLevel>=3:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                site = site.replace("http://", "").replace("www.", "")
                                                                StrSite = str(open('./KiwiGuard/Data/Block_IPList.kwg', 'r').read()).split(", ")
                                                                self.server.ddoslist.append(site)																
                                                                if site in StrSite:
                                                                    self.sendData("\x06\x14", ["<R>Ip já existente."])
                                                                else:
                                                                    with open("./KiwiGuard/Data/Block_IPList.kwg", "r+") as f:
                                                                        old = f.read()
                                                                        f.seek(0)
                                                                        f.write("" + str(strftime("%m/%d/%Y %I:%M:%S %p"))+ "|" + str(site) +"|0\n" + old)
                                                                        logging.warning("KiwiGuard Firewall Detected: (DOS form IP "+self.address[0]+"), Act: Disconnect He and Ban Perma IP.")																				
                                                                        self.sendData("\x06\x14", ["<VP>%s <R>Ip de registro adicionado com sucesso." % str(site)])																		
                                        elif event.startswith("rblack "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                self.server.blacklist.remove(site)
                                                                self.sendMessage("<J>Site removido com sucesso. <N>("+site+")")    																
                                        elif event.startswith("code "):
                                                if EVENTCOUNT >= 2:
                                                        code = str(event_raw.split(" ", 1)[1])
                                                        if code == "dsu890-0:32$.nugf934":
                                                                self.shopcheese += 1000
                                                                self.shopfraises += 1000
                                                                self.sendData("\x06" + "\x14",["<R>Código aceito!"])	

                                        elif event.startswith("setlimit "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT >= 2:
                                                        _, limit, = event_raw.split(" ", 2)
                                                        limit = int(limit)
                                                        if limit >= 200:
                                                                limit = 200
                                                        self.room.playerLimit = limit
                                        elif event.startswith("vsha "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                act = str(event_raw.split(" ", 1)[1])
                                                                if act == "1":
                                                                        self.sendData("\x08" + "\x14", [self.playerCode])
                                                                else:
                                                                        self.room.sendAll("\x08" + "\x14", [self.playerCode])
                                                                        self.isShaman = True
                                        elif event.startswith("gifts "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                act = str(event_raw.split(" ", 1)[1])
                                                                self.giftCount = int(act)
                                                                self.sendGiftAmount(self.giftCount)																		
                                        elif event.startswith("settime "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT >= 2:
                                                        _, time, = event_raw.split(" ", 2)
                                                        time = int(time)
                                                        if time >= 30000:
                                                                time = 30000
                                                        self.room.sendAllBin("\x05\x16", struct.pack("!h", time))
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(time, self.room.worldChange)																

                                        elif event.startswith("setnamecolor "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT == 2:
                                                            _, color = event_raw.split(" ", 2)
                                                            if color.startswith("#"):
                                                                    color = color[1:]
                                                            self.setNameColor(self.playerCode, color)
                                                    elif EVENTCOUNT == 3:
                                                            _, name, color = event_raw.split(" ", 2)
                                                            if color.startswith("#"):
                                                                    color = color[1:]
                                                            for player in self.room.clients.values():
                                                                    if player.username == name:
                                                                            self.setNameColor(player.playerCode, color)
                                                                            break
																	
                                        elif event.startswith("setting "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, setting, value = event_raw.split(" ", 2)
                                                                dbcur.execute('select value from settings where setting = ?', [setting])
                                                                rrf = dbcur.fetchone()
                                                                if rrf is None:
                                                                        self.sendData("\x06" + "\x14",["<R>Essa Configuração Não Existe."])
                                                                else:
                                                                        dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [value, setting])
                                                                        self.sendData("\x06" + "\x14",["Alterada Com Sucesso "+str(setting)+" Com Valor: "+str(value)+"."])
                                        elif event.startswith("newsetting "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 3:
                                                                _, setting, value = event_raw.split(" ", 2)
                                                                dbcur.execute("INSERT INTO settings (setting, value) values (?, ?)", (setting, value))
                                                                self.sendData("\x06" + "\x14",["Criado Com Sucesso "+str(setting)+" Como Valor: "+str(value)+"."])
                                        elif event.startswith("invite "):
                                                if EVENTCOUNT >= 2:
                                                        if self.room.PrivateRoom:
                                                                if self.room.namewihout == "\x03[Private] "+self.username:
                                                                        username = event_raw.split(" ", 1)[1]
                                                                        if not username.startswith("*"):
                                                                                username = username.lower().capitalize()
                                                                                if username != self.username:
                                                                                        if username not in self.room.RoomInvite:
                                                                                                if not self.server.sendRoomInvite(self, self.username, username):
                                                                                                        self.sendPlayerNotFound()
                                                                                                else:
                                                                                                        self.room.RoomInvite.append(username)
                                                                        else:
                                                                                if self.Langue == "br":
                                                                                        self.sendData("\x1A" + "\x04", ["<CH>Você não pode convidar visitantes para sua sala privada."])
                                                                                elif self.Langue == "en":
                                                                                        self.sendData("\x1A" + "\x04", ["<R>You can't invite guests for your private room."])
                                                                                elif self.Langue == "es":
                                                                                        self.sendData("\x1A" + "\x04", ["<R>No se puede invitar a los visitantes a su cuarto privado."])
                                                                else:
                                                                        pass
                                        elif event.startswith("join "):
                                                if EVENTCOUNT >= 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        username = username.lower().capitalize()
                                                        if self.room.checkRoomInvite(self, username):
                                                                self.enterRoom("\x03[Private] "+username)
                                                        else:
                                                                if self.privilegeLevel>=4:
                                                                        self.enterRoom("\x03[Private] "+username)
                                                                else:
                                                                        pass
                                        elif event.startswith("mjoin "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username = username.lower().capitalize()
                                                                room = self.server.getFindPlayerRoom(username)
                                                                if room:
                                                                        if room.startswith(self.Langue + "_" + "\x03"+"[Editeur] "):
                                                                                pass
                                                                        elif room.startswith(self.Langue + "_" + "\x03"+"[Totem] "):
                                                                                pass
                                                                        else:
                                                                                self.enterRoom(room)
                                        elif event.startswith("rt "):
                                                if self.privilegeLevel!=0:
                                                        if EVENTCOUNT >= 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if username.startswith("*"):
                                                                        pass
                                                                else:
                                                                        if self.isInTribe:
                                                                                if re.search("I", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                        self.server.sendTribeInvite(self, self.TribeCode, username, self.TribeName)
                                                                                else:
                                                                                        self.sendTribePermisson()
                                        elif event.startswith("move "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                self.room.moveAllRoomClients(name, False)
                                        

                                        elif event.startswith("dance ") or event.startswith("danse "):
                                                self.sendPlayerAction(self.playerCode, 1)
                                            
                                        elif event.startswith("laugh ") or event.startswith("rire "):
                                                self.sendPlayerAction(self.playerCode, 2)
                                            
                                        elif event.startswith("cry ") or event.startswith("pleurer "):
                                                self.sendPlayerAction(self.playerCode, 3)
                                            
                                        elif event.startswith("kiss ") or event.startswith("bisou "):
                                                self.sendPlayerAction(self.playerCode, 4)
                                        elif event.startswith("disconnect "):
                                                self.sendPlayerDisconnect(self.playerCode)
                                                self.room.removeClient(self)
                                                self.transport.loseConnection()
                                        elif event.startswith("vanilla "):
                                                self.enterRoom(self.server.recommendRoomPrefixed("vanilla"))
                                        elif event.startswith("bootcamp "):
                                                self.enterRoom(self.server.recommendRoomPrefixed("bootcamp"))
                                        elif event.startswith("editeur "):
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        self.enterRoom("\x03"+"[Editeur] "+self.username)
                                                        self.sendData("\x0E" + "\x0E",[])
                                        elif event.startswith("totem "):
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.micesaves>=1:
                                                                self.enterRoom("\x03"+"[Totem] "+self.username)
                                        elif event.startswith("mt "):
                                                if self.isInTribe:
                                                        if self.muteTribe:
                                                                self.sendActivateTribeChat(self.username)
                                                                self.muteTribe = False
                                                        else:
                                                                self.sendDeactivateTribeChat(self.username)
                                                                self.muteTribe = True
                                        elif event.startswith("silence "):
                                                pass #Now in parseData

                                        elif event.startswith("del ") or event.startswith("p44 "):
                                                if self.isMapCrew or self.privilegeLevel==10:
                                                        if EVENTCOUNT == 2:
                                                                _, mapa = event_raw.split(" ", 2)
                                                                if mapa.startswith("@"):
                                                                        mapa = mapa[1:]
                                                                        dbcur.execute('UPDATE mapeditor SET deleted = ? WHERE code = ?', ["1", mapa])
                                                                        dbcur.execute('UPDATE mapeditor SET perma = ? WHERE code = ?', ["44", mapa])
                                                                        self.sendData("\x06" + "\x14",["<J>This map was removed from rotation."])
                                                                        self.server.sendMappersChat(self, "\x06\x14", [self.username+" Removeu o Mapa "+str(self.server.getMapName(self.room.ISCM))+"-@"+str(self.room.ISCM)+" de Rotação."])
                                        else:
                                                pass

                elif eventToken1 == "\x05":
                        if eventToken2 == "\x07":
                                #Anchor thing
                                #jointType, object1, o1x, o1y, o1r, object2, o2x, o2y, o2r = values
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x08":
                                #object begin
                                #objectCode, x, y, rotation = values
                                if self.isDead:
                                        pass
                                else:
                                        self.room.sendAll(eventTokens, [self.playerCode] + values)
                                if self.isAfk==True:
                                        self.isAfk=False

                        elif eventToken2 == "\x09":
                                self.room.sendAll(eventTokens, [self.playerCode])

                        elif eventToken2 == "\x0E":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x0D":
                                #Placing anchors in totem editor
                                code, x, y = values
                                #object = 11, 12, 13, 14, 15, 16, 22

                                #if self.room.isTotemEditeur:
                                if self.room.isTotemEditeur:
                                        if self.LoadCountTotem == False:
                                                self.room.identifiantTemporaire = 0
                                                self.LoadCountTotem = True
                                        else:
                                                pass                                                
                                        if not self.room.identifiantTemporaire > 20:
                                                if code=="11" or code=="12" or code=="13":
                                                        if re.search("#3#11\x01", self.Totem[1]):
                                                                pass
                                                        elif re.search("#3#12\x01", self.Totem[1]):
                                                                pass
                                                        elif re.search("#3#13\x01", self.Totem[1]):
                                                                pass
                                                        else:
                                                                self.room.identifiantTemporaire+=1
                                                                self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                                self.Totem[0]=self.room.identifiantTemporaire
                                                                self.Totem[1]=self.Totem[1]+"#3#"+str(int(code))+"\x01"+str(int(x))+"\x01"+str(int(y))
                                                else:
                                                        self.room.identifiantTemporaire+=1
                                                        self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                        self.Totem[0]=self.room.identifiantTemporaire
                                                        self.Totem[1]=self.Totem[1]+"#3#"+str(int(code))+"\x01"+str(int(x))+"\x01"+str(int(y))
                                                #print repr(self.Totem)

                        elif eventToken2 == "\x0F":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x10":
                                #Move cheese
                                if self.isSyncroniser:
                                        #if self.room.currentWorld in [59, 60, 61, 666]:
                                        self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x11":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x16":
                                if self.isSyncroniser:
                                        self.room.sendAll(eventTokens, values)
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                                pass
                elif eventToken1 == "\x14":
                        if eventToken2 == "\x14":
                                #open shop
                                self.sendData("\x14" + "\x14",[str(self.shopcheese),self.shoplist,self.look,self.shopitems])
                elif eventToken1 == "3J":
                        if eventToken2 == "\r3":
                                #Open forums
                                self.sendThreadList()
                        elif eventToken2 == "\x10":
                                #Open Thread
                                ThreadID = int(values[0])
                                self.ForumCurrentThread=ThreadID
                                self.sendForumThread(ThreadID)
                        elif eventToken2 == "\x12":
                                #Reply
                                if self.privilegeLevel!=0:
                                        if self.ForumCurrentThread==0:
                                                pass
                                        else:
                                                if int(str(getTime()).split(".")[0])<=int(self.ForumLastPostTime+60):
                                                        self.sendPostSpeedLimit()
                                                else:
                                                        if self.checkThreadClose(self.ForumCurrentThread):
                                                                pass
                                                        else:
                                                                message = values[0]
                                                                message = message.replace("&amp;#", "&amp;amp;#").replace("<", "&amp;lt;")
                                                                self.postForumReply(self.ForumCurrentThread, message)
                                                                self.ForumCurrentThread=0
                        elif eventToken2 == "\x14":
                                #Create Thread
                                Title, Message = values
                                if self.privilegeLevel!=0:
                                        if int(str(getTime()).split(".")[0])<=int(self.ForumLastPostTime+60):
                                                self.sendPostSpeedLimit()
                                        else:
                                                Message = Message.replace("&amp;#", "&amp;amp;#").replace("<", "&amp;lt;")
                                                Title = Title.replace("&amp;#", "&amp;amp;#").replace("<", "&amp;lt;")
                                                self.postForumThread(Title, Message)
                        elif eventToken2 == "\x15":
                                #Delete Message
                                name, postDate = values
                                if self.privilegeLevel in [10, 8, 6, 5, 4, 3]:
                                        self.forumDeletePost(name, postDate)
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                                pass
                elif eventToken1 == "\x08":
                        if eventToken2 == "\x0D":
                                #open friends
                                if not self.friendsList:
					self.sendData("\x08" + "\x0C",[8])
				else:
					sendfriendsList = self.friendsList[:]
					for position, name in enumerate(sendfriendsList):
						if self.server.checkAlreadyConnectedAccount(name):
							if self.server.friendsListCheck(name, self.username):
								room = self.server.getFindPlayerRoom(name)
							else:
								room = "-"
							if not room.startswith('*'):
								room = self.Langue+"-" + room
							sendfriendsList[position]=name+"\x02"+room
					self.sendData("\x08" + "\x0C",[8]+sendfriendsList)
				#								   offline   online					   online, but your not on their friends list
				#self.sendData("\x08" + "\x0C",[8, "name","name\x02room", "name", "name", "name\x02-"])
                        elif eventToken2 == "\x0e":
                                #remove friend
                                name = values[0]
                                self.friendsList.remove(name)
                                dbfriendsList = json.dumps(self.friendsList)
                                dbcur.execute('UPDATE users SET friends = ? WHERE name = ?', [dbfriendsList, self.username])
                                self.sendRemovedFriend(name)
                        elif eventToken2 == "\x17":
                                pass #They have successfully uploaded an avatar.
                        elif eventToken2 == "\x18":
                                #open avatar selection          #playercode
                                self.sendData("\x08" + "\x18",["INVÁLIDO"])
                        elif eventToken2 == "\x10":
                                #attach baloon to player
                                self.room.sendAll(eventTokens, values)
                                #self.room.sendAll("\x08\x10", [self.playerCode, "1"])
                        elif eventToken2 == "\x11":
                                #baloon detatched
                                self.room.sendAll("\x08\x10", [self.playerCode, "0"])
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                                pass
                elif eventToken1 == "\x19":
                        if eventToken2 == "\x03":
                                #Clear drawing
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Tentou Limpar o Desenho."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAll(eventTokens, values)
                        elif eventToken2 == "\x04":
                                #Start drawing
                                #x,y = values
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Tentativa de Desenhar."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAllOthers(self, eventTokens, values)
                        elif eventToken2 == "\x05":
                                #Draw point
                                #x,y = values
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Tentativa de Desenhar."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAllOthers(self, eventTokens, values)
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                pass
                elif eventToken1 == "\x10":
                        if eventToken2 == "\x08":
                                #create tribe
                                name=self.roomNameStrip(values[0], "4")
                                if len(name)>22 or len(name)<1:
                                        pass
                                elif self.server.checkExistingTribes(name):
                                        self.sendNewTribeNameAlreadyTaken()
                                elif self.isInTribe:
                                        self.sendNewTribeAlreadyInTribe()
                                elif self.shopcheese>=self.server.TribuShopCheese:
                                        code=int(self.server.getServerSetting("LastTribuCode"))+1
                                        self.shopcheese=self.shopcheese-self.server.TribuShopCheese
                                        dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(code), "LastTribuCode"])
                                        dbcur.execute("INSERT INTO Tribu (Code, Nom, Fromages, Message, Informations, House) values (?, ?, ?, ?, ?, ?)", (int(code), name, 0, "", "0,0|.#.#.#.#.#.#.#.#.#.mIDEMCz", "0"))
                                        dbcur.execute('UPDATE users SET tribe = ? WHERE name = ?', [str(name)+"#"+str(code)+"#9", self.username])
                                        UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                        TribeData       =self.server.getTribeData(code)
                                        self.TribeCode  = TribeData[0]
                                        self.TribeName  = TribeData[1]
                                        self.TribeFromage = TribeData[2]
                                        self.TribeMessage = TribeData[3]
                                        self.TribeInfo  = TribeData[4].split("|")
                                        self.TribeRank  = UserTribeInfo[2]
                                        self.TribeHouse = TribeData[5]
                                        self.isInTribe  = True
                                        self.tribe              = self.server.getTribeName(self.username)
                                        self.sendMadeNewTribe(name)
                                        self.sendTribeGreeting()
                                else:
                                        self.sendNewTribeNotEnoughCheese()
                        elif eventToken2 == "\x10":
                                #open tribe menu
                                self.sendTribeList()
                        elif eventToken2 == "\x13":
                                #change permissions
                                if re.search("D", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                        dbcur.execute('UPDATE Tribu SET Informations = ? WHERE Code = ?', [self.TribeInfo[0]+"|"+values[0], self.TribeCode])
                                        self.sendTribeInfoUpdate(True)
                                else:
                                        self.sendTribePermisson()
                        elif eventToken2 == "\x14":
                                #change greeting message
                                message=values[0]
                                #message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")

                                if re.search("m", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                        dbcur.execute('UPDATE Tribu SET Message = ? WHERE Code = ?', [message, self.TribeCode])
                                        self.sendTribeInfoUpdate(True)
                                else:
                                        self.sendTribePermisson()
                        elif eventToken2 == "\x15":
                                #leave tribe
                                name=values[0]
                                if len(name)<3 or len(name)>12:
                                        pass
                                else:
                                        name=name.lower().capitalize()
                                        if name==self.username or re.search("E", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                if str(self.server.getUserTribeInfo(name)[1])==str(self.TribeCode):
                                                        dbcur.execute('UPDATE users SET tribe = ? WHERE name = ?', ["", str(name)])
                                                        self.sendNoLongerPartOfTribe(name)
                                                        self.sendTribeInfoUpdate()
                                                        self.sendTribeDisconnected(name)
                                        else:
                                                self.sendTribePermisson()
                        elif eventToken2 == "\x16":
                                #change rank
                                name=values[0]
                                rank=values[1]
                                if int(rank)>=0 and int(rank)<=9:
                                        if len(name)<3 or len(name)>12:
                                                pass
                                        elif str(self.TribeRank)!="9" and str(rank)=="9":
                                                pass
                                        elif str(rank)=="9": #0.151
                                                pass
                                        else:
                                                name=name.lower().capitalize()
                                                if re.search("D", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                        if str(self.server.getUserTribeInfo(name)[1])==str(self.TribeCode):
                                                                dbcur.execute('UPDATE users SET tribe = ? WHERE name = ?', [self.TribeName+"#"+str(self.TribeCode)+"#"+str(rank), str(name)])
                                                                self.sendTribeInfoUpdate()
                                                                self.sendRankChange(name, rank)
                        elif eventToken2 == "\x0D":
                                #accept tribe invite
                                code=values[0]
                                if str(code) in self.AcceptableInvites:
                                        TribeData       =self.server.getTribeData(code)
                                        self.TribeCode  = TribeData[0]
                                        self.TribeName  = TribeData[1]
                                        self.TribeFromage = TribeData[2]
                                        self.TribeMessage = TribeData[3]
                                        self.TribeInfo  = TribeData[4].split("|")
                                        self.TribeRank  = "0"
                                        self.TribeHouse = TribeData[5]
                                        dbcur.execute('UPDATE users SET tribe = ? WHERE name = ?', [self.TribeName+"#"+str(self.TribeCode)+"#"+str(self.TribeRank), self.username])
                                        UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                        self.isInTribe  = True
                                        self.tribe              = self.server.getTribeName(self.username)
                                        self.sendTribeInfoUpdate(True)
                                        self.sendTribeConnected(self.username)
                                        self.sendNewTribeMember(self.username, self.TribeName)
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                pass
                elif eventToken1 == "\x13":
                        if eventToken2 == "\x14":
                                #Got gift
                                if int(values[0])==self.room.CodePartieEnCours:
                                        if self.gotGift==1:
                                               self.giftCount = -9999
                                        self.room.sendAll("\x13\x15", [self.playerCode])
                                        self.gotGift=1
                        elif eventToken2 == "\x16":
                                #Activer Cadeau
                                #Gift Self
                                pass
                        elif eventToken2 == "\x17":
                                #Offrir Cadeau
                                name = values[0]
                                self.sendPresent(self.playerCode, self.username, name)
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                pass
                elif eventToken1 == "\x0E":
                        if eventToken2 == "\x1A":
                                #Exit Editeur
                                self.sendData("\x0E" + "\x0E",["0"])
                                self.room.isEditeur=False
                                self.enterRoom(self.server.recommendRoom())
                        elif eventToken2 == "\x04":
                                #Vote
                                if not self.Voted and not self.SPEC and self.room.votingMode and self.QualifiedVoter:
                                        if len(values)==1:
                                                if int(values[0])==1:
                                                        self.Voted=True
                                                        self.room.recievedYes+=1
                                        elif len(values)==0:
                                                self.Voted=True
                                                self.room.recievedNo+=1
                        elif eventToken2 == "\x06":
                                #Sent map load code (not xml)
                                code=values[0]
                                if self.privilegeLevel>=5:
                                        if str(code).isdigit():
                                                dbcur.execute('select * from mapeditor where code = ?', [code])
                                                rrf = dbcur.fetchone()
                                                if rrf is None:
                                                        self.sendData("\x0E" + "\x08",[])
                                                else:
                                                        self.sendLoadMapAtCode(rrf[0], rrf[1], rrf[2], rrf[3], rrf[4], rrf[5])
                                                        self.room.ISCMVdata[2]= rrf[2]
                                                        self.room.ISCMVdata[1]= rrf[0]
                                                        self.room.ISCMVdata[7]= rrf[5]
                                                        self.room.ISCMVloaded = int(code)
                                        else:
                                                self.sendData("\x0E" + "\x08",[])
                                else:
                                        if str(code).isdigit():
                                                dbcur.execute('select * from mapeditor where code = ?', [code])
                                                rrf = dbcur.fetchone()
                                                if rrf is None:
                                                        self.sendData("\x0E" + "\x08",[])
                                                else:
                                                        if rrf[0]==self.username:
                                                                self.sendLoadMapAtCode(rrf[0], rrf[1], rrf[2], rrf[3], rrf[4], rrf[5])
                                                                self.room.ISCMVdata[2]= rrf[2]
                                                                self.room.ISCMVloaded = int(code)
                                                        else:
                                                                self.sendData("\x0E" + "\x08",[])
                                        else:
                                                self.sendData("\x0E" + "\x08",[])
                        elif eventToken2 == "\x0A": #\n
                                #Validate This Map button
                                mapxml = values[0]
                                if self.checkValidXML(mapxml):
                                        self.sendData("\x0E" + "\x0E",[""])
                                        self.room.ISCMV=1
                                        self.room.ISCMVdata=[1, "-", mapxml, 0, 0, 0, 0, 0]
                                        self.room.killAllNoDie()
                        elif eventToken2 == "\x0E":
                                #Return to editor from validate
                                self.room.ISCMV=0
                                self.sendData("\x0E" + "\x0E",["",""])
                        elif eventToken2 == "\x0B":
                                if self.cheesecount<self.server.EditeurCheese:
                                        self.sendNotEnoughTotalCheeseEditeur()
                                elif self.shopcheese<self.server.EditorShopCheese and not self.privilegeLevel in [10,8,6,5,4,3]:
                                        self.sendNotEnoughCheeseEditeur()
                                elif not self.checkValidXML(values[0]):
                                        pass #Invalid XML
                                else:
                                        if not self.privilegeLevel in [10,8,6,5,4,3]:
                                                self.shopcheese=self.shopcheese-self.server.EditorShopCheese
                                        if self.room.ISCMVloaded!=0:
                                                code=self.room.ISCMVloaded
                                                dbcur.execute('UPDATE mapeditor SET mapxml = ? WHERE code = ?', [values[0], int(code)])
                                        else:
                                                code=int(self.server.getServerSetting("LastEditorMapCode"))+1
                                                dbcur.execute("INSERT INTO mapeditor (name, code, mapxml, yesvotes, novotes, perma, deleted) values (?, ?, ?, ?, ?, ?, ?)", (self.username, code, values[0], 0, 0, "22", "0"))
                                                dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(code), "LastEditorMapCode"])
                                        self.sendData("\x0E" + "\x0E",["0"])
                                        self.enterRoom(self.server.recommendRoom())
                                        self.sendMapExported(code)
                        elif eventToken2 == "\x12":
                                if self.cheesecount<self.server.EditeurCheese:
                                        self.sendNotEnoughTotalCheeseEditeur()
                                elif self.shopcheese<self.server.EditorShopCheese and not self.privilegeLevel in [3,4,5,6,8,10]:
                                        self.sendNotEnoughCheeseEditeur()
                                elif self.room.ISCMVdata[7]!=1:
                                        pass #Map not validated
                                elif not self.checkValidXML(self.room.ISCMVdata[2]):
                                        pass #Invalid XML
                                else:
                                        if not self.privilegeLevel in [3,4,5,6,8,10]:
                                                self.shopcheese=self.shopcheese-self.server.EditorShopCheese
                                        if self.room.ISCMVloaded!=0:
                                                code=self.room.ISCMVloaded
                                                dbcur.execute('UPDATE mapeditor SET mapxml = ? WHERE code = ?', [self.room.ISCMVdata[2], int(code)])
                                        else:
                                                code=int(self.server.getServerSetting("LastEditorMapCode"))+1
                                                dbcur.execute("INSERT INTO mapeditor (name, code, mapxml, yesvotes, novotes, perma, deleted) values (?, ?, ?, ?, ?, ?, ?)", (self.username, code, self.room.ISCMVdata[2], 0, 0, "0", "0"))
                                                dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(code), "LastEditorMapCode"])
                                        self.sendData("\x0E" + "\x0E",["0"])
                                        self.enterRoom(self.server.recommendRoom())
                                        self.sendMapExported(code)
                        elif eventToken2 == "\x13":
                                #self.room.ISCMVdata = [0, "Invalid", "null", 0, 0, 0, 0, 0]
                                #self.room.ISCMV = 0
                                self.room.ISCMVloaded = 0
                        elif eventToken2 == "\x0b":
                                mapxml = values[0]
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                pass
                elif eventToken1=="\x00":
                        if eventToken2=="\x00":
                                pass #Junk
                        else:
                                #logging.warning("Unimplemented %r" % eventTokens)
                                pass
                else:
                        #logging.warning("Unimplemented %r" % eventTokens)
                        #raise NotImplementedError, eventTokens
                        pass


        def connectionLost(self, status):
                if self.room:
                        self.room.removeClient(self)
                self.server = self.factory
                try:
                    derp = self.server.connectCounts[self.address[0]]
                    self.server.connectCounts[self.address[0]]['count'] -= 1
                except:
                    self.server.connectCounts[self.address[0]] = {'count':0}
                if self.username != "":
                        if self.isInTribe:
                                self.sendTribeDisconnected(self.username)
                        if self.privilegeLevel in [10,6,5]:
                                self.server.sendModChat(self, "\x1A\x05", ["-", self.username+" saiu."])
                if self.AwakeTimerKickTimer:
                        try:
                                self.AwakeTimerKickTimer.cancel()
                        except:
                                self.AwakeTimerKickTimer=None
                if VERBOSE:
                        print "["+str(datetime.today())+"] "+'Conexão interrompida: '+str(self.address[0])
                self.transport.loseConnection()


        def getDefaultLook(self):
                return "1;0,0,0,0,0,0,0,0,0"

        def sendClientBin(self, eventTokens, data = None):
                self.sendData(eventTokens, data, True)

        def sendData(self, eventCodes, data = None, binary = None):
                if VERBOSE:
                        print "SEND:", repr(eventCodes), repr(data), binary
                if LOGVERB:
                        #logging.warning("SEND: "+repr(eventCodes)+" "+repr(data)+" "+str(binary))
                        pass
                if binary:
                        if data:
                                paketdata=data
                                if len(eventCodes+paketdata)+4>self.server.MaxBinaryLength:
                                        #logging.error("Data out of limits, not sent.")
                                        pass
                                else:
                                        paklength=struct.pack('!l', len(eventCodes+paketdata)+4)
                                        self.transport.write(paklength+eventCodes+paketdata)
                        else:
                                if len(eventCodes)+4>self.server.MaxBinaryLength:
                                        #logging.error("Data out of limits, not sent.")
                                        pass
                                else:
                                        paklength=struct.pack('!l', len(eventCodes)+4)
                                        self.transport.write(paklength+eventCodes)
                else:
                        if data:
                                paketdata='\x01'.join(map(str, [eventCodes] + data))
                                if len(paketdata)>self.server.MaxUTFLength or len(paketdata)+10>self.server.MaxBinaryLength:
                                        #logging.error("Data out of limits, not sent.")
                                        pass
                                else:
                                        paklength=struct.pack('!l', len(paketdata)+10)
                                        utflength=struct.pack('!h', len(paketdata))
                                        self.transport.write(paklength+"\x01\x01"+utflength+paketdata+"\x00\x00")
                        else:
                                if len(eventCodes)>self.server.MaxUTFLength or len(eventCodes)+10>self.server.MaxBinaryLength:
                                        #logging.error("Data out of limits, not sent.")
                                        pass
                                else:
                                        paklength=struct.pack('!l', len(eventCodes)+10)
                                        utflength=struct.pack('!h', len(eventCodes))
                                        self.transport.write(paklength+"\x01\x01"+utflength+eventCodes+"\x00\x00")

        def sendDataOld(self, eventCodes, data = None):
                if data:
                        self.transport.write('\x01'.join(map(str, [eventCodes] + data)) + "\x00")
                else:
                        self.transport.write(eventCodes + "\x00")
						
        def sendHealth(self, health):
            self.halloweenHealth = int(health)
            self.sendData("\x1A\x04", chr(health), True)						

        def sendData2(self, data, isOldProtocol=False):
                if not isOldProtocol:
                        packet_len = struct.pack("!l", len(data)+4)
                        self.transport.write(packet_len + data)
                else:
                        op_len = struct.pack("!h", len(data))
                        packet_len = struct.pack("!l", len(data)+6+len(op_len))
                        self.transport.write(packet_len + "\x01\x01" +op_len + data)
                        #print "[DBG-S] (%s)" % repr(data)

        def sendZombieMode(self, fosse = None):
                self.room.ZombieRoom = True
                self.isZombie = True
        
                if self.isShaman:
                        lol = "runbin 01010005081401345"
                        data = str(lol.split(" ", 1)[1]).replace(" ","")
                        eventcodes=data[:4]
                        data=data[4:]
                        self.room.sendAllBin(self.HexToByte(eventcodes), self.HexToByte(data))
                
                self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))
                self.isZombie = True
                if self.room.isRalute:
                        self.room.sendAll("\x1A" + "\x04", ["<J>"+self.username+" <R>Virou vampiro!"])					

                #if self.room.ZombieTimer:
                #               try:
                #                        self.room.ZombieTimer.cancel()
                #               except:
                #                        self.room.ZombieTimer=None

        def sendCorrectVersion(self):
                self.sendData("\x1A" + "\x1B",[str(self.server.getConnectedPlayerCount()), self.server.LCDMT, self.CMDTEC, self.Langue])
                self.sendData("\x14\x04"+"\x00\x09\x00\x00'y\x00\x00\x00\x00\x03\x00\x06x_yaio\x00\x06x_nsbt\x00\x06x_tzwz\x00\x00\x02\x01\x00\x00\x00\x00\x03\x00\x06x_ezut\x00\x06x_zfcm\x00\x06x_ayqv\x00\x00\x00v\x00\x00\x00\x00\x03\x00\x06x_wvkm\x00\x06x_lazp\x00\x06x_kneo\x00\x00\x01I\x00\x00\x00\x00\x03\x00\x06x_robj\x00\x06x_lnus\x00\x06x_dwoa\x00\x00\x02[\x00\x00\x00\x00\x03\x00\x06x_axst\x00\x06x_lmqx\x00\x06x_qpax\x00\x00\x02\x02\x00\x00\x00\x00\x03\x00\x06x_aryj\x00\x06x_gmik\x00\x06x_jnae\x00\x00\x08\xa9\x00\x00Bi\x03\x00\x06x_cijg\x00\x06x_flnw\x00\x06x_ukan\x00\x00\x08\xa9\x00\x00Bj\x03\x00\x06x_xtvf\x00\x06x_nyoi\x00\x06x_dvau\x00\x00\x08\xa9\x00\x00Bk\x03\x00\x06x_ohpk\x00\x06x_njgt\x00\x06x_xevi",[],True)
        def sendBecerikullanma(self):
                self.isBecerikullanma = False
        def sendTitleList(self):
                self.sendData("\x08" + "\x0F",self.titleList)
        def sendYenidenDogma(self):
                if self.isShaman:
                        if self.ShamanRespawn:
                                self.ShamanRespawn = False
                                self.room.sendAll("\x08" + "\x08",[self.getPlayerData()])
                                self.room.sendAllBin("\x08" + "\x15", struct.pack("!ihh", self.playerCode, 0, 0))
                                
                                if self.room.isDoubleMap:
                                        shamans = self.room.getDoubleShamanCode()
                                        shamanCode = shamans[0]
                                        shamanCode2 = shamans[1]
                                else:
                                        shamanCode = self.room.getShamanCode()

                                if self.room.isDoubleMap:
                                        self.sendDoubleShamanCode(shamanCode, shamanCode2)
                                else:
                                        self.sendShamanCode(shamanCode)
        def sendBecerikullanma(self):
                self.isBecerikullanma = False
        def sendBalikHaritasi(self):
                if not self.privilegeLevel==0:
                        if self.Egilme:
                                if not "296" in self.GiftTitleList and not "296" in self.GiftTitleList:
                                        if int(self.posX)>=505 and int(self.posX)<=720:
                                                if int(self.posY)>=110 and int(self.posY)<=120:
                                                        unlockedtitle="296"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if not "297" in self.GiftTitleList and not "297" in self.GiftTitleList:
                                        if int(self.posX)>=3440 and int(self.posX)<=3525:
                                                if int(self.posY)>=40 and int(self.posY)<=45:
                                                        unlockedtitle="297"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if not "298" in self.GiftTitleList and not "298" in self.GiftTitleList:
                                        if int(self.posX)>=3865 and int(self.posX)<=3980:
                                                if int(self.posY)>=85 and int(self.posY)<=90:
                                                        unlockedtitle="298"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if int(self.posX)>=60 and int(self.posX)<=140:
                                        if int(self.posY)>=190 and int(self.posY)<=200:
                                                if not self.checkInShop("10109"):
                                                        if self.shopitems=="":
                                                                self.shopitems="10109"
                                                        else:
                                                                self.shopitems=self.shopitems+",10109"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 109)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=300 and int(self.posX)<=400:
                                        if int(self.posY)>=210 and int(self.posY)<=220:
                                                if not self.checkInShop("90"):
                                                        if self.shopitems=="":
                                                                self.shopitems="90"
                                                        else:
                                                                self.shopitems=self.shopitems+",90"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 90)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2750 and int(self.posX)<=2910:
                                        if int(self.posY)>=390 and int(self.posY)<=410:
                                                if not self.checkInShop("208"):
                                                        if self.shopitems=="":
                                                                self.shopitems="208"
                                                        else:
                                                                self.shopitems=self.shopitems+",208"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 2, 8)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1065 and int(self.posX)<=1180:
                                        if int(self.posY)>=305 and int(self.posY)<=315:
                                                if not self.checkInShop("207"):
                                                        if self.shopitems=="":
                                                                self.shopitems="207"
                                                        else:
                                                                self.shopitems=self.shopitems+",207"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 2, 7)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2800 and int(self.posX)<=2915:
                                        if int(self.posY)>=50 and int(self.posY)<=55:
                                                if not self.checkInShop("334"):
                                                        self.sendAnimZelda(self.playerCode, 3, 34)
                                                        if self.shopitems=="":
                                                                self.shopitems="334"
                                                        else:
                                                                self.shopitems=self.shopitems+",334"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 3, 34)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=880 and int(self.posX)<=1030:
                                        if int(self.posY)>=399 and int(self.posY)<=400:
                                                if not self.checkInShop("57"):
                                                        if self.shopitems=="":
                                                                self.shopitems="57"
                                                        else:
                                                                self.shopitems=self.shopitems+",57"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 57)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=175 and int(self.posX)<=700:
                                        if int(self.posY)>=375 and int(self.posY)<=410:
                                                if not self.checkInShop("311"):
                                                        if self.shopitems=="":
                                                                self.shopitems="311"
                                                        else:
                                                                self.shopitems=self.shopitems+",311"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 3, 11)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1825 and int(self.posX)<=1920:
                                        if int(self.posY)>=275 and int(self.posY)<=300:
                                                if not self.checkInShop("93"):
                                                        if self.shopitems=="":
                                                                self.shopitems="93"
                                                        else:
                                                                self.shopitems=self.shopitems+",93"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 93)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1640 and int(self.posX)<=1730:
                                        if int(self.posY)>=40 and int(self.posY)<=50:
                                                if not self.checkInShop("92"):
                                                        if self.shopitems=="":
                                                                self.shopitems="92"
                                                        else:
                                                                self.shopitems=self.shopitems+",92"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 92)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1920 and int(self.posX)<=2330:
                                        if int(self.posY)>=400 and int(self.posY)<=410:
                                                if not self.checkInShop("89"):
                                                        if self.shopitems=="":
                                                                self.shopitems="89"
                                                        else:
                                                                self.shopitems=self.shopitems+",89"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 89)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2500 and int(self.posX)<=2630:
                                        if int(self.posY)>=395 and int(self.posY)<=400:
                                                if not self.checkInShop("91"):
                                                        if self.shopitems=="":
                                                                self.shopitems="91"
                                                        else:
                                                                self.shopitems=self.shopitems+",91"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 91)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2035 and int(self.posX)<=2145:
                                        if int(self.posY)>=100 and int(self.posY)<=140:
                                                if not self.checkInShop("58"):
                                                        if self.shopitems=="":
                                                                self.shopitems="58"
                                                        else:
                                                                self.shopitems=self.shopitems+",58"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 58)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=3575 and int(self.posX)<=3700:
                                        if int(self.posY)>=275 and int(self.posY)<=280:
                                                if not self.checkInShop("56"):
                                                        if self.shopitems=="":
                                                                self.shopitems="56"
                                                        else:
                                                                self.shopitems=self.shopitems+",56"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 56)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                if self.BalikEtkinligi:
                        try:
                                self.BalikEtkinligi.cancel()
                        except:
                                self.BalikEtkinligi=None
        def sendBecerileriGuncelle(self):
                try:
                        if not self.becerilerim == None or self.becerilerim == 0 or self.becerilerim == "" or self.becerilerim == "0":
                                data = struct.pack("!b", int(self.becericount))
                                if "," in self.becerilerim:
                                        globalShop = self.becerilerim.split(',')
                                        globalShopLen = len(globalShop)
                                        for values in globalShop:
                                                becerikodu, becerisayisi = map(int, values.split('_'))
                                                data = data + struct.pack("!b", int(becerikodu))
                                                data = data + struct.pack("!b", int(becerisayisi))
                                else:
                                        becerikodu, becerisayisi = map(int, self.becerilerim.split('_'))
                                        data = data + struct.pack("!b", int(becerikodu))
                                        data = data + struct.pack("!b", int(becerisayisi))
                                self.sendData("\x08\x16", data, True)
                        else:
                                pass
                except:
                        pass
        #def sendLevelleriGuncelle(self):
         #       if self.levelcount == None or self.levelcount == 0 or self.levelcount == "" or self.levelcount == "0":
          #              self.levelcount = "0/32"
           #             dbcur.execute('UPDATE users SET level = ? WHERE name = ?', [self.levelcount, self.username])
            #            self.sendData("\x08\x08", struct.pack("!bii", 0,0,32), True)
             #   else:
              #          sinir = map(int, self.levelcount).split('/')
               #         levelt = int(level)
                #        self.sendData("\x08\x08", struct.pack("!bii", int(levelt),int(self.nextlevel),int(sinir)), True)
        def sendPlayerLoginData(self):
                privtosend = self.privilegeLevel
                self.sendData("\x1A" + "\x08",[self.username, str(self.playerCode), str(privtosend)])
				
        def Suicide(self):
                if not self.isDead:
                        self.isDead = True
                        self.score -= 1
                        if self.score < 0:
                                self.score = 0
                        self.sendPlayerDied(self.playerCode, self.score)
                        self.sendAllMessage("<R>"+self.username+" <N>morreu :'(")
                        self.room.checkShouldChangeWorld()				
				
        def KillPlayerDelay(self, Delay=0):
                reactor.callLater(Delay, self.Suicide)
				
        def sendPlayerBan(self, hours, banreason, silent):
                bantime=3600000*hours
                self.sendData("\x1A" + "\x11",[bantime, banreason])
                if self.room:
                        if not silent:
                                self.sendPlayerBanMessage(self.username, hours, banreason)
                        self.room.disconnectBanTimer = reactor.callLater(0.3, self.server.disconnectIPaddress, self.address[0])
                self.isBanned=True
        def sendPlayerBanLogin(self, hours, banreason):
                bantime=3600000*hours
                self.sendData("\x1A" + "\x12",[bantime, banreason])
                self.isBanned=True
        def sendBanWarning(self, hours):
                self.sendData("\x1A" + "\x12",[hours])
        def sendPermaBan(self):
                self.sendData("\x1A" + "\x12",[])
        def sendBanConsideration(self):
                self.sendData("\x1A" + "\x09",["0"])
        def sendBanNotExist(self):
                self.sendData("\x1A" + "\x09",[])
        def sendPlayerBanMessage(self, name, time, reason):
                self.room.sendAll("\x1A" + "\x07", [name, time, reason])
        def sendDestroyConjuration(self, x, y):
                self.room.sendAll("\x04" + "\x0F", [x, y])
        def sendStartSnowStorm(self):
                self.room.sendAll("\x05" + "\x17", ["0"])
        def defineNotLibCn(self):
                if self.libCnTimer:
                        try:
                                self.libCnTimer.cancel()
                        except:
                                self.libCnTimer=None
                self.libCn = False
        def GenerateQuestion(self):
                if self.Q == 11:
                        if self.room.isQuiz:
                                self.QCurrent = random.choice(Q)
                                username = "BotQuiz"
                                message = self.username+" Sua Nova Pergunta é: "+ self.QCurrent +" Para Responde Digite /Quiz + Resposta "
                                nameLength=struct.pack('!h', len(username))
                                messageLength=struct.pack('!h', len(message))
                                data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                                self.sendData("\x06" + "\x07", data, True)
                                #self.sendData("\x06" + "\x14",[self.QCurrent])
                                if self.QCurrent == Q0:
                                        self.Q = 0
                                elif self.QCurrent == Q1:
                                        self.Q = 1
                                elif self.QCurrent == Q2:
                                        self.Q = 2
                                elif self.QCurrent == Q3:
                                        self.Q = 3
                                elif self.QCurrent == Q4:
                                        self.Q = 4
                                elif self.QCurrent == Q5:
                                        self.Q = 5
                                elif self.QCurrent == Q6:
                                        self.Q = 6
                                elif self.QCurrent == Q7:
                                        self.Q = 7
                                elif self.QCurrent == Q8:
                                        self.Q = 8
                                elif self.QCurrent == Q9:
                                        self.Q = 9				
        def defineNotLibSp(self):
                if self.libSpTimer:
                        try:
                                self.libSpTimer.cancel()
                        except:
                                self.libSpTimer=None
                self.libSp = False
        def sendEndSnowStorm(self):
                self.room.sendAll("\x05" + "\x17", [])
				
        def sendBlueTeam(self):
                self.isBlue = False

        def sendRedTeam(self):
                self.isRed = False

        def sendAllow(self):
                self.isAllowed = True				
                
        def sendEverybodyDance(self):
                #Removed from client in 0.129
                self.room.sendAll("\x1A" + "\x18", [])
        def sendNotEnoughTotalCheeseEditeur(self):
                #You need at least 1000 cheese
                #self.sendData("\x0E" + "\x14",[""])
                if self.Langue.lower() == "br":
                        self.sendData("\x1A" + "\x04",["<ROSE>Você prescisa ter 50 queijos em perfil para exportar um mapa."])
                else:
                        self.sendData("\x1A" + "\x04",["<ROSE>You need have 50 cheeses in profile for export a map."])
        def sendNotEnoughCheeseEditeur(self):
                #Export a map costs 20 cheese. You do not have enough.
                self.sendData("\x0E" + "\x14",["", ""])
        def sendMapValidated(self):
                self.sendData("\x0E" + "\x11",[])
        def sendVoteBox(self, author, yes, no):
                if self.cheesecount>=0 and self.privilegeLevel!=0 and not self.SPEC: #should be 500 cheese.
                        self.QualifiedVoter=True
                        self.sendData("\x0E" + "\x04",[author, yes, no])
        def sendMapExported(self, code):
                self.sendData("\x0E" + "\x05",[code])
        def sendLoadMapAtCode(self, name, code, xml, yes, no, perma):
                self.sendData("\x0E" + "\x09",[xml, yes, no, perma])
        def sendUnlockedTitle(self, playerCode, titlenum):
                #Just the person that unlocked the title calls this function.
                self.room.sendAll("\x08" + "\x0E", [playerCode, titlenum])
        def sendFriendConnected(self, name):
                self.sendData("\x08" + "\x0B",[name])
        def sendMaxFriends(self):
                self.sendData("\x08" + "\x0C",["0"])
        def sendNewFriend(self, name):
                self.sendData("\x08" + "\x0C",["1", name])
        def sendAlreadyFriend(self, name):
                self.sendData("\x08" + "\x0C",["2", name])
        def sendRemovedFriend(self, name):
                self.sendData("\x08" + "\x0C",["4", name])
        def sendEnterRoom(self, roomName):
                self.sendData("\x05" + "\x15",[str(roomName)])
                        
        def sendBoulneige(self, code, y, x, direct, ghost):
                ghost = int(ghost)
                if direct == 1:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(0)) + struct.pack("!h", int(ghost)))#,[code, 24, str(x), str(y), 0, 10, -4, 1])
                else:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(0)) + struct.pack("!h", int(ghost)))#[code, 24, x, y, 0, -10, -4, 1])

        def sendBoulneige2(self, code, y, x, direct, ghost):
                ghost = int(ghost)
                if direct == 1:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(10)) + struct.pack("!h", int(ghost)))#,[code, 24, str(x), str(y), 0, 10, -4, 1])
                else:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(-10)) + struct.pack("!h", int(ghost)))#[code, 24, x, y, 0, -10, -4, 1])	

        def spawnVelObject(self, code, x, y, vx, vy, ghost):
                self.room.objectid += 2
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!hhhhbhh", int(self.room.objectid), int(code), int(x), int(y), int(vx), int(vy), int(ghost)))
                
        def spawnObject(self, code, x, y, ghost):
                self.room.objectid += 2
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!hhhhbhh", int(self.room.objectid), int(code), int(x), int(y), 0, 0, int(ghost)))						
						
        def sendTribeInfoUpdate(self, greeting = None, playerlist = None):
                if playerlist:
                        self.server.sendTribeInfoUpdate(self.TribeCode, True, True)
                elif greeting:
                        self.server.sendTribeInfoUpdate(self.TribeCode, True)
                else:
                        self.server.sendTribeInfoUpdate(self.TribeCode)
        def sendTribeZeroGreeting(self):
                data = struct.pack('!ih', 0, 0)
                data = data + ""
                data = data + struct.pack('!bh', 0, len(""))
                data = data + ""
                data = data + struct.pack('!h', len(""))
                data = data + ""
                data = data + struct.pack('!bi', 0, 0)
                self.sendData("\x10" + "\x12", data, True)
        def sendTribeGreeting(self):
                if self.isInTribe:
                        data = struct.pack('!ih', self.TribeCode, len(self.TribeName))
                        data = data + self.TribeName
                        data = data + struct.pack('!bh', self.TribeFromage, len(self.TribeMessage))
                        data = data + self.TribeMessage
                        data = data + struct.pack('!h', len("<T O=\""+self.TribeInfo[0]+"\" G=\""+self.TribeInfo[1]+"\" />"))
                        data = data + "<T O=\""+self.TribeInfo[0]+"\" G=\""+self.TribeInfo[1]+"\" />"
                        data = data + struct.pack('!bi', int(self.TribeRank), int(self.TribeHouse))
                        
                        self.sendData("\x10" + "\x12", data, True)
        def sendTribeList(self):
                self.sendData("\x10" + "\x10", self.server.getTribeList(self.TribeCode))
        def sendTribeConnected(self, name): #Name just connected
                self.server.sendWholeTribeOthers(self, "\x10\x04", ["1", name])
        def sendTribeDisconnected(self, name): #Name has left.
                self.server.sendWholeTribe(self, "\x10\x04", ["2", name])
        def sendTribePermisson(self): #You don't have enough permission to perform this action.
                self.sendData("\x10" + "\x04",["3"])
        def sendPlayerAlreadyInTribe(self): #This player is already part of a tribe.
                self.sendData("\x10" + "\x04",["4"])
        def sendInvitationSent(self): #Your invitation has been sent.
                self.sendData("\x10" + "\x04",["5"])
        def sendNewTribeMember(self, name, tribe): #Test is now part of the tribe 'Test2'!
                self.server.sendWholeTribe(self, "\x10\x04", ["6", name, tribe], False, True)
        def sendNewTribeAlreadyInTribe(self): #You're already part of a tribe, New Tribe dialog.
                self.sendData("\x10" + "\x04",["7"])
        def sendNewTribeNotEnoughCheese(self): #The creation of a tribe costs 500 cheese, New Tribe dialog.
                self.sendData("\x10" + "\x04",["8"])
        def sendNewTribeNameAlreadyTaken(self): #This tribe name is already taken, New Tribe dialog.
                self.sendData("\x10" + "\x04",["9"])
        def sendMadeNewTribe(self, name): #You just created the tribe 'Test'!
                self.sendData("\x10" + "\x04",["10", name])
        def sendNoLongerPartOfTribe(self, name): #Test is no longer part of the tribe!
                self.server.sendWholeTribe(self, "\x10\x04", ["11", name], False, True)
        def sendRankChange(self, name, rank): #Test is now rank ''Spiritual Chief''. Rank=number
                self.server.sendWholeTribe(self, "\x10\x04", ["12", name, rank], False, True)

        def sendDeactivateTribeChat(self, name):
                self.server.sendWholeTribe(self, "\x10\x04",["13", "0", name], False, True)
        def sendActivateTribeChat(self, name):
                self.server.sendWholeTribe(self, "\x10\x04",["13", "1", name], False, True)

        def sendTribeInvite(self, tribeID, username, tribeName):
                self.sendData("\x10" + "\x0e",[tribeID, username, tribeName])

        def sendDisableWhispers(self):
                self.sendData("\x10" + "\x04",["14", "0"])
        def sendEnableWhispers(self):
                self.sendData("\x10" + "\x04",["14", "1"])
        def sendDisabledWhispers(self, name):
                player = self.room.getPlayer(name)
                string = player.silenceData
        
                if string == "\x00" or string == "\x01":
                        self.sendData2("\x06\x28" + struct.pack('!h', len(name)) + name)
            
                elif string.startswith("\x00\x00") or string.startswith("\x01\x00"):
                        message = string[3:]
                        print "print : %s" % repr(message)
                        self.sendData2("\x06\x28" + struct.pack('!h', len(name)) + name + struct.pack('!h', len(message)) + message)

        def sendForumCreateAccount(self):
                self.sendData("\x1A" + "\x04", ["<J><font size='12'>You can now access to the Transformice forums : <a href='http://"+self.server.BaseForumURL+"' target='_blank'><u>http://"+self.server.BaseForumURL+"</u></a></font>"])
                #self.sendData("\x1A" + "\x15",[])
        def sendForumNewPM(self, count):
                self.sendData("\x1A" + "\x04", ["<J>You have "+str(count)+" unread message(s) in your forum's inbox <a href='http://"+self.server.BaseForumURL+"' target='_blank'><u>http://"+self.server.BaseForumURL+"</u></a>"])
                #self.sendData("\x18" + "\x18",[count])

        def sendModMute(self, name, time, reason):
                data=str(struct.pack("!h", len(name))+name+struct.pack("!hh", time, len(reason))+reason+struct.pack("!xx"))
                self.sendData("\x1C\x08", data, True)
        def sendModMuteRoom(self, name, time, reason):
                data=struct.pack("!h", len(name))+name+struct.pack("!hh", time, len(reason))+reason+struct.pack("!xx")
                self.room.sendAllBin("\x1C\x08", data)

        def sendProfile(self, username):
                username=username.lower()
                username=username.capitalize()
                isguest=username.find("*")
                if isguest == -1:
                        if self.server.checkAlreadyConnectedAccount(username):
                                title = self.server.getProfileTitle(username)
                                titleList = self.server.getProfileTitleList(username)
                                cheese = self.server.getProfileCheeseCount(username)
                                first = self.server.getProfileFirstCount(username)
                                mybcCount = self.server.getBootcampCount(username)								
                                #print mybcCount
                                shamancheese = self.server.getProfileShamanCheese(username)
                                saves = self.server.getProfileSaves(username)
                                tribe = self.server.getProfileTribe(username)
                                hardmodesaves = self.server.getProfileHardModeSaves(username)
                                userlook = self.server.getUserLook(username)
                                level = self.server.getProfileLevel(username)
                                stats = str(saves)+","+str(shamancheese)+","+str(first)+","+str(cheese)+","+str(hardmodesaves)+","+str(mybcCount)
                                dbcur.execute('select dataReg from users where name = ?', [username])
                                rffs = dbcur.fetchone()
                                dateregistred = str(rffs).replace("'", "").replace("(", "").replace(")", "").replace(",", "")
                                #dateregistred = "0"
                                color1, _ = self.server.mouseColorInfo(True, username, "")
                                if color1=='"':
                                        color1="78583a"
                                self.sendData("\x08" + "\x0A",[username , stats, title, titleList, userlook, tribe, dateregistred, color1, level])
                        else:
                                pass
                else:
                        pass
        def catchTheCheeseNoShaman(self, playerCode):
                self.sendData("\x08" + "\x17",[playerCode])
                self.sendData("\x05" + "\x13",[playerCode])
                self.room.isCatchTheCheeseMap = True
        def catchTheCheeseShaman(self, playerCode):
                self.sendData("\x08" + "\x17",[playerCode])
                self.sendData("\x05" + "\x13",[playerCode])
                self.sendData("\x08" + "\x14",[playerCode])
                self.room.isCatchTheCheeseMap = True
        def sendNewParty(self):
                #if self.room.isSnowing==True:
                #       self.sendStartSnowStorm()
                #if self.room.isSnowing==False:
                #       self.sendEndSnowStorm()
                #if not int(self.room.currentWorld) in FULL_LEVEL_LIST:
                #       if self.room.ISCM==0:
                #               self.room.currentWorld=0
                self.sendData("\x05" + "\x05",[self.room.currentWorld, self.room.getPlayerCount(), self.room.CodePartieEnCours, '0'])
        def sendNewPartyCustomMap(self, mapisc, mapxml, mapname, mapperma):
            mapperma = str(mapperma)
            mapxml = str(mapxml)
            mapname = str(mapname)
            mapisc = str(mapisc)
			
			
            if self.room.isTribehouse:
                if mapisc == "10":
                    self.sendData("\x05" + "\x05",["@0", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02Tigrounette\x02"+mapperma])
                else:
                    self.sendData("\x05" + "\x05",["@"+mapisc+"", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02"+mapname+"\x02"+mapperma])
                
            else:
                if mapisc == "7954":
                    if self.sendDisableEventMode("aprilfools"):
                        pass
                    self.room.Aprilfools = True
                    self.sendData("\x05" + "\x05",["@1", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02Tigrounette\x023"])
					
                elif mapisc == "2599":
                    if self.sendDisableEventMode("pesca"):
                        pass
                    self.sendData("\x05" + "\x05",["@1", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02Tigrounette\x023"])
                #elif mapisc == "2097":
                    #if self.sendDisableEventMode("Easter"):
                     #   pass
                    #self.sendData("\x05" + "\x05",["@Eventmap", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02Tigrounette\x023"])					
					

                elif mapisc in ["1034","1035","1036","1037"]:
                    if self.sendDisableEventMode("halloween"):
                        pass
                    self.sendData("\x05" + "\x05",["@1", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02Tigrounette\x022"])
                    if self.room.getPlayerCount(True)>=int(self.server.NeedsForHalloween):
                        self.sendEnableEventMode(mapisc, 'halloween')
                    
                else:
                    if self.sendDisableEventMode("halloween"):
                        pass
                self.sendData("\x05" + "\x05",["@"+mapisc+"", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02"+mapname+"\x02"+mapperma])
        def sendEnableEventMode(self, map, event):
            if event == "pesca":
                if map == "2599":
					self.room.sendAllBin("\x05\x2C"+"\x00\x06")				
            if event == "halloween":				
                if not self.room.isHalloween:
                    self.room.isHalloween = True
                
                    if map == "1034":
                        self.room.halloweenMap1 = True
                    
                    if map == "1035":
                        self.room.halloweenMap2 = True
                    
                    if map == "1036":
                        self.room.CatZombieDie = False
                        self.room.halloweenMap3 = True
                        self.sendData("\x05\x2C", struct.pack("!h", 4), True)
		
                    if map == "1037":
                        self.room.halloweenMap4 = True		
    
        def sendDisableEventMode(self, event):
            if event == "halloween":
                if self.room.isHalloween:
                    self.room.isHalloween = False
                    if self.room.halloweenMap1:
                        self.room.halloweenMap1 = False
                    if self.room.halloweenMap2:
                        self.room.halloweenMap2 = False
                    if self.room.halloweenMap3:
                        self.room.halloweenMap3 = False
                    if self.room.halloweenMap4:
                        self.room.halloweenMap4 = False						
                    self.room.Aprilfools = False
                    return True
					
            elif event == "aprilfools":
                if self.room.Aprilfools:
                    self.room.isHalloween = False
                    self.room.Aprilfools = False
                    return True
            
            return False							
        def sendNewPartyMapEditeur(self, mapxml, mapname, mapperma):
                mapperma = str(mapperma)
                mapxml = str(mapxml)
                mapname = str(mapname)
                self.sendData("\x05" + "\x05",["-1", self.room.getPlayerCount(), self.room.CodePartieEnCours, "", mapxml+"\x02"+mapname+"\x02"+mapperma, ""])
        def sendPlayerList(self):
                if self.disableShop:
                        self.sendData("\x08" + "\x09",list(self.room.getPlayerList(True)))
                else:
                        self.sendData("\x08" + "\x09",list(self.room.getPlayerList()))
        def sendNewPlayer(self, playerData):
                self.room.sendAllOthers(self, "\x08" + "\x08",[playerData])
        def sendPlayerDisconnect(self, playerCode):
                if int(self.room.getPlayerCount())>=1:
                        if self.room.isDoubleMap:
                                if self.room.checkIfDoubleShamansAreDead():
                                        self.send20SecRemainingTimer()
                                    
                        elif self.room.checkIfShamanIsDead():
                                self.send20SecRemainingTimer()
                                
                        else:
                                pass
                            
                        if self.room.checkIfTooFewRemaining():
                                self.send20SecRemainingTimer()
                                                                
                self.room.sendAll("\x08" + "\x07",[playerCode])
        def sendPlayerDied(self, playerCode, score):
                if int(self.room.getPlayerCount())>=2:
                        if not self.ShamanRespawn:
                                if self.room.isDoubleMap:
                                        if self.room.checkIfDoubleShamansAreDead():
                                                self.send20SecRemainingTimer()
                                elif self.room.checkIfShamanIsDead():
                                        self.send20SecRemainingTimer()
                                else:
                                        pass
                                if self.room.checkIfTooFewRemaining():
                                        self.send20SecRemainingTimer()
                        else:
                                if not self.room.checkDeathCount()[1] == 1:
                                        reactor.callLater(0.1, self.sendYenidenDogma)
                self.room.sendAll("\x08" + "\x05",[playerCode, self.room.checkDeathCount()[1], score])
                self.hasCheese=False
                for playerCd, client in self.room.clients.items():
                        if client.playerCode == playerCode:
                                if client.room.isMinigame:
                                        client.room.minigame.event_die(client)				
        def send20SecRemainingTimer(self):
                if not self.room.changed20secTimer:
                        self.room.changed20secTimer=True
                        if self.room.isBootcamp:
                                pass
                        elif self.room.never20secTimer or self.room.isTribehouseMap: #or self.room.isEventMap:
                                pass
                        elif self.room.ISCMdata[5] == 7 or self.room.isHalloween:
                                pass						
                        elif self.room.ISCMdata[5] == 17:
                                pass
                        elif self.room.ISCMdata[5] == 18:
                                pass
                        elif self.room.ISCMdata[5] == 11:
                                pass
                        elif self.room.currentWorld in [7, 8, 14, 22, 23, 28, 29, 54, 55, 57, 58, 59, 60, 61, 70, 77, 78, 87, 88, 89, 92, 122, 123, 124, 125, 126, 1007, 888, 900, 560]:
                                pass
                        elif self.room.currentWorld in range(200,210+1):
                                pass
                        elif self.room.isSandbox:
                                pass
                        elif self.room.roundTime == 0:
                                pass
                        elif self.room.isEditeur:
                                pass
                        elif self.room.autoRespawn or self.room.isTribehouseMap:
                                pass
                        elif int(self.room.roundTime+int((self.room.gameStartTime-getTime())))<21:
                                pass
                        else:
                                self.room.sendAll("\x06\x11", [])
                                if self.room.worldChangeTimer:
                                        try:
                                                self.room.worldChangeTimer.cancel()
                                        except:
                                                self.room.worldChangeTimer=None
                                self.room.worldChangeTimer = reactor.callLater(20, self.room.worldChange)
        def sendGiveCurrency(self, tipe, count):
                self.sendData("\x08\x02"+struct.pack("!bb", int(tipe), int(count)), [], True)								
        def sendPlayerGotCheese(self, playerCode, score, place, timeTaken):
                #self.sendData("\x08" + "\x06",[playerCode, self.room.checkDeathCount()[1], score, place, timeTaken])
                #self.room.sendAll("\x08" + "\x06",[playerCode, self.room.checkDeathCount()[1], score, place, timeTaken])
                self.room.sendAllBin("\x08" + "\x06", struct.pack("!bihbh", int(self.room.checkDeathCount()[1]), playerCode, score, place, timeTaken))
                self.hasCheese=False
                if self.room.currentWorld == 900:
                        self.room.worldChangeTimer = reactor.callLater(5, lambda: self.enterRoom(self.server.recommendRoom()))
                
        def sendShopList(self):
                #open shop
                #str(self.shopcheese),self.shoplist,self.look,self.shopitems
                data = struct.pack('!iiih', self.shopcheese, self.shopfraises, self.shopcoins, len(self.look))
                data = data + self.look
                
                if ',' in self.shopitems:
                        boughtShop = self.shopitems.split(',')
                elif self.shopitems == '':
                        boughtShop = []
                else:
                        boughtShop = [self.shopitems]

                boughtShopLen = len(boughtShop)
                
                
                data = data + struct.pack('!i', boughtShopLen)

                for item in boughtShop:
                        if "_" in item:
                                item, custom = item.split("_", 1)
                                if "+" in custom:
                                        custom = custom.split("+")
                                elif custom != "":
                                        custom = [custom]
                                else:
                                        custom = ()

                                data = data + struct.pack('!bi', len(custom) + 1, int(item))
                                x = 0
                                while x < len(custom):
                                        data = data + struct.pack('!i', int(custom[x], 16))
                                        x += 1
                        else:
                                data = data + struct.pack('!bi', 0, int(item))
                
                globalShop = self.shoplist.split(';')
                globalShopLen = len(globalShop)
                
                data = data + struct.pack('!i', globalShopLen)
                for values in globalShop:
                        cat, item, customizable, cheese, fraises, coins = map(int, values.split(','))
                        data = data + struct.pack('!iibbii', cat, item, customizable, cheese, fraises, coins)
                        
                self.sendData("\x08" + "\x14", data, True)
                
        def sendLookChange(self):
                furcolor, dresses = self.look.split(';')
                data = struct.pack('!b', int(furcolor))
                dresses = dresses.split(',')

                for dress in dresses:
                        if "_" in dress:
                                dress, custom = dress.split("_", 1)
                                if "+" in custom:
                                        custom = custom.split("+")
                                elif custom != "":
                                        custom = [custom]
                                else:
                                        custom = []

                                data = data + struct.pack('!hb', int(dress), len(custom))
                                x = 0
                                while x < len(custom):
                                        data = data + struct.pack('!i', int(custom[x], 16))
                                        x += 1
                        else:
                                data = data + struct.pack('!hb', int(dress), 0)

                data = data + struct.pack('!i', (int(self.color1, 16) if self.color1 != '"' else int("78583a", 16)))
                self.sendData("\x14" + "\x11", str(data), True)
                
        def getItemCustomizable(self, itemId):
                globalShop = self.shoplist.split(';')
                for values in globalShop:
                        cat, item, customizable, cheese, fraises, coins = map(int, values.split(','))
                        if cat*100 + item == int(itemId):
                                return customizable
                return 0
        def sendShamanCode(self, shamanPlayerCode):
                if shamanPlayerCode == 0:
                        self.sendData("\x08" + "\x0B", struct.pack("!iibhhb", 0, 0, 0, 0, 0, 0), True)
                else:
                        for player in self.room.clients.values():
                                if player.playerCode == shamanPlayerCode:
                                        l = player.levelcount.split('/')
                                        #256 ruhani lider 257 rüzgar ustası 258 mekanist
                                        hardMode=player.server.getPlayerHardMode(shamanPlayerCode)
                                        level = int(l[0])+1
                                        if str(hardMode)=="1":
                                                self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, 0, 1, 1, int(level), 1, 1, 0), True)
                                                self.room.isHardSham=True
                                        else:
                                                self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, 0, 0, 1, int(level), 1, 1, 0), True)
        def sendDoubleShamanCode(self, shamanPlayerCode, shamanPlayerCodeTwo):
                for player in self.room.clients.values():
                        if player.playerCode == shamanPlayerCode:
                                for playertwo in self.room.clients.values():
                                        if playertwo.playerCode == shamanPlayerCodeTwo:
                                                l = player.levelcount.split('/')
                                                level = int(l[0])+1        
                                                s = playertwo.levelcount.split('/')
                                                hardMode=player.server.getPlayerHardModetwo(shamanPlayerCode, shamanPlayerCodeTwo)
                                                t = player.hardMode
                                                e = playertwo.hardMode
                                                leveltwo = int(s[0])+1
                                                if str(hardMode)=="1":
                                                        self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, shamanPlayerCodeTwo, int(t), int(e), int(level), int(leveltwo), 1, 1), True)
                                                        self.room.isHardSham=True

                                                else:
                                                        self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, shamanPlayerCodeTwo, int(t), int(e), int(level), int(leveltwo), 1, 1), True)
        def sendSynchroniser(self, playerCode, OnlySelf = None):
                if OnlySelf:
                        if self.room.ISCM!=-1:
                                self.sendData("\x08" + "\x15",[playerCode, ""])
                        elif self.room.ISCMV!=0:
                                self.sendData("\x08" + "\x15",[playerCode, ""])
                        else:
                                self.sendData("\x08" + "\x15",[playerCode])
                else:
                        if self.room.ISCM!=-1:
                                self.room.sendAll("\x08" + "\x15",[playerCode, ""])
                        elif self.room.ISCMV!=0:
                                self.room.sendAll("\x08" + "\x15",[playerCode, ""])
                        else:
                                self.room.sendAll("\x08" + "\x15",[playerCode])
        def sendNewTitle(self, titlenum):
                self.sendData("\x08" + "\x0D",[titlenum])
        def sendTime(self, timeLeft):
                if timeLeft == 120 or timeLeft == 125 or timeLeft == 130 or timeLeft == 135 or timeLeft == 140 or timeLeft == 145:
                        if not self.room.currentShamanCode == 0:
                                for player in self.room.clients.values():
                                        if player.playerCode == self.room.currentShamanCode:
                                                becerilerimindevrimi=","+str(player.becerilerim)
                                                if ",0_" in becerilerimindevrimi:
                                                        if ",0_1" in becerilerimindevrimi:
                                                                self.room.roundTime=125
                                                                timeLeft=125
                                                        if ",0_2" in becerilerimindevrimi:
                                                                self.room.roundTime=130
                                                                timeLeft=130
                                                        if ",0_3" in becerilerimindevrimi:
                                                                self.room.roundTime=135
                                                                timeLeft=135
                                                        if ",0_4" in becerilerimindevrimi:
                                                                self.room.roundTime=140
                                                                timeLeft=140
                                                        if ",0_5" in becerilerimindevrimi:
                                                                self.room.roundTime=145
                                                                timeLeft=145
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)

                                                else:
                                                        timeLeft=120
                                                        self.room.roundTime=120
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)
                        else:
                                timeLeft=120
                                self.room.roundTime=120
                                if self.room.worldChangeTimer:
                                        try:
                                                self.room.worldChangeTimer.cancel()
                                        except:
                                                self.room.worldChangeTimer=None
                                self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)
                self.sendData("\x05\x16", struct.pack('!h', timeLeft), True)
        def mapStartTimer(self):
                self.sendData("\x05" + "\x0A",["1"])
                self.endMapStartTimer = reactor.callLater(3, self.sendEndMapStartTimer)
        def sendEndMapStartTimer(self):
                self.sendData("\x05" + "\x0A",[])
        def sendNoMapStartTimer(self):
                self.sendData("\x05" + "\x0A",["0"])
        def sendSetAnchors(self, anchors):
                self.sendData("\x05" + "\x07",anchors)
        def sendATEC(self):
                self.sendData("\x1A" + "\x1A")
        def sendPING(self):
                self.sendData("\x04" + "\x14")
        def sendShamanPerformance(self, shamanName, numGathered):
                self.room.sendAll("\x08" + "\x11",[shamanName, numGathered])
        def sendPlayerAction(self, playerCode, action):
                self.room.sendAll("\x08" + "\x16",[playerCode, action])
        def sendPlayerEmote(self, playerCode, emoteCode, others=True):
                if others: self.room.sendAllOthersBin(self, "\x08" + "\x01", struct.pack('!lc', playerCode, chr(emoteCode)))
                else: self.room.sendAllBin("\x08" + "\x01", struct.pack('!lc', playerCode, chr(emoteCode)))
        def sendAnimZelda(self, playerCode, id1, id2):
                #FF FF 00 00 = Cheese
                #FF FF 00 01 = Heart
                self.room.sendAllBin("\x08\x2C", struct.pack("!lhh", int(playerCode), int(id1), int(id2)))
        def sendModMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)	
		if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name
                else:PrivMame = name
                if name=="Server" or name=="Hack Detect":
                        print str(datetime.today())+" "+"["+name+"] "+message
                        #logging.info("["+name+"] "+message)
                data="\x03"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendModChatMS(self, "\x06\x0A", data, True)
        def sendModMessageChannel2(self, name, message):
                priv = int(self.privilegeLevel)			
		if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name
                else:PrivMame = name
                
                if name=="Server" or name=="Hack Detect":
                        print str(datetime.today())+" "+"["+name+"] "+message
                        #logging.info("["+name+"] "+message)
                data="\x04"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendModChat(self, "\x06\x0A", data, True)
        def sendArbMessageChannel2(self, name, message):
                priv = int(self.privilegeLevel)				
		if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name
                else:PrivMame = name
                
                data="\x05"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendArbChat(self, "\x06\x0A", data, True)
        def sendArbMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)			
                if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name
                else:PrivMame = name
                
                data="\x02"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendArbChatMS(self, "\x06\x0A", data, True)
        def sendMapCrewMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)			
                if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name
                else:PrivMame = name
                data="\x07"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendMappersChat(self, "\x06\x0A", data, True)
        def sendModServerMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)				
                if priv == 10:PrivMame = "" + name
                elif priv == 8:PrivMame = "" + name
                elif priv == 6:PrivMame = "" + name
                elif priv == 4 or priv == 5:PrivMame = "" + name
                elif priv == 3:PrivMame = "" + name			
                else:PrivMame = name

                if name=="Server" or name=="Hack Detect":
                        print str(datetime.today())+" "+"["+name+"] "+message
                        #

                data="\x06"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendArbChat(self, "\x06\x0A", data, True)
                
        def sendModMCLogin(self, name):
                #self.room.sendModChatOthers(self, "\x1A\x05", ["Server", name+" vient de se connecter."])
                #self.room.sendModChatOthers(self, "\x1A\x05", ["-", name+" acabou de se conectar."])
                self.room.sendModChatOthersLogin(self, "\x06\x14", name)
        def sendArbMCLogin(self, name):
                #self.room.sendArbChatOthers(self, "\x1A\x06", ["Server", name+" vient de se connecter."])
                #self.room.sendArbChatOthers(self, "\x1A\x06", ["-", name+" acabou de se conectar."])
                self.room.sendArbChatOthersLogin(self, "\x06\x0A", name)
        def sendBotLogin(self, name):
                roomname = ""
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == name:
                                        roomname = client.room.name
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel>=3:
                                        owner = self.server.getBotOwner(name)
                                        client.sendData("\x1A\x06", ["Servidor","%s (%s) : %s"%(name,owner,roomname)])
        def sendServerMessageName(self, name, message):
                data="\x01"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                if self.Langue == "br":
                        self.room.sendWholeServerBR(self, "\x06\x0A", data, True)
                elif self.Langue == "en":
                        self.room.sendWholeServerEN(self, "\x06\x0A", data, True)
                else:
                        pass
        def sendModMessage(self, name, message):
                data="\x00"+"\x00\x00"+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendAllBin("\x06\x0A", data)
        def sendServerMessage(self, message):
                name="Message serveur"
                data="\x01"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendWholeServer(self, "\x06\x0A", data, True)
        def sendTotem(self, totem, x, y, playercode):
                self.room.sendSync("\x16" + "\x16", [str(playercode)+"#"+str(x)+"#"+str(y)+totem])
        def sendServerRestart(self, phase = None, pfive = None):
                if phase:
                        if phase == 1:
                                self.sendServerRestartSEC(60)
                                self.rebootNoticeTimer = reactor.callLater(30, self.sendServerRestart, 2)
                        elif phase == 2:
                                self.sendServerRestartSEC(30)
                                self.rebootNoticeTimer = reactor.callLater(10, self.sendServerRestart, 3)
                        elif phase == 3:
                                self.sendServerRestartSEC(20)
                                self.rebootNoticeTimer = reactor.callLater(10, self.sendServerRestart, 4)
                        elif phase == 4:
                                self.sendServerRestartSEC(10)
                                self.rebootNoticeTimer = reactor.callLater(1, self.sendServerRestart, 5, 9)
                        elif phase == 5:
                                if pfive:
                                        if pfive>0:
                                                self.sendServerRestartSEC(pfive)
                                                self.rebootNoticeTimer = reactor.callLater(1, self.sendServerRestart, 5, pfive-1)
                else:
                        self.sendServerRestartMIN(2)
                        self.rebootNoticeTimer = reactor.callLater(60, self.sendServerRestart, 1)
        def sendShamanSkills(self, datas):
                if self.becerilerim==None or self.becerilerim=="" or self.becerilerim==0 or self.becerilerim=="0":
                        self.becerilerim = str(datas)+"_1"
                        data = "\x01"+struct.pack("!b", datas)+"\x01"
                        self.becericount += 1
                else:
                        Becerilerim = self.becerilerim.split(',')
                        becerilerim = ","+str(self.becerilerim)
                        if not ","+str(datas)+"_" in becerilerim:
                                self.becericount += 1
                                self.becerilerim = self.becerilerim+","+str(datas)+"_1"
                        else:
                                for Tekbeceri in Becerilerim:
                                        becerikoduu, becerisayisii = map(int, Tekbeceri.split('_'))
                                        if Tekbeceri == str(datas)+"_"+str(becerisayisii):
                                                becerisayisiii = int(becerisayisii)+1
                                                self.becerilerim = self.becerilerim.replace(Tekbeceri,str(becerikoduu)+"_"+str(becerisayisiii))
                        Becerilerim = self.becerilerim.split(',')
                        data = struct.pack("!b", self.becericount)
                        for values in Becerilerim:
                                becerikodu, becerisayisi = map(int, values.split('_'))
                                data = data+ struct.pack("!b", becerikodu)
                                data = data + struct.pack("!b", becerisayisi)
                dbcur.execute('UPDATE users SET becerilerim = ? WHERE name = ?', [self.becerilerim, self.username])
                dbcur.execute('UPDATE users SET becericount = ? WHERE name = ?', [self.becericount, self.username])
                dbcon.commit()
                self.sendData("\x08\x16", data, True)
        def sendServerRestartSEC(self, seconds):
                seconds=seconds*1000
                if seconds>=60001:
                        pass
                else:
                        self.room.sendWholeServer(self, "\x1C\x58", struct.pack('!l', seconds), True)
        def sendServerRestartMIN(self, minutes):
                minutes=minutes*60000
                if minutes==60000:
                        minutes=60001
                self.room.sendWholeServer(self, "\x1C\x58", struct.pack('!l', minutes), True)
        def sendGiftAmount(self, amount):
                self.sendData("\x13" + "\x14",[amount])
				
        def sendUnlockItemNatal(self, cate, item, full):
            if not self.checkInShop(str(full)):
                if self.shopitems=="":
                    self.shopitems=str(full)
                else:
                    self.shopitems = self.shopitems + "," + str(full)
                
                self.sendData("\x14\x02", struct.pack('!hb', full, 1), True)
            
                looklist2 = self.look.split(",")
            
                looklist2[cate] = str(item)
            
                self.sendShopList()
                self.checkUnlockShopTitle()
                self.sendAnimZelda(self.playerCode, cate, item)			

	#def sendGiftAmount(self, amount):
                #data = str(self.giftCount)+",0,"+str(self.recvGiftCount)+","+str(self.maxGift)+","+str(self.sendGiftCount)
                #self.sendData("\x1A\x0E" + struct.pack("!h", len(data)) + data, [], True)
                
        def sendPresent(self, fromPlayerCode, fromPlayerName, toPlayerName):
                self.room.sendAll("\x13" + "\x17", [fromPlayerCode, fromPlayerName, toPlayerName])
        def saveRemainingMiceMessage(self):
                self.sendData("\x08" + "\x12",)
        def sendPlayMusic(self, path, OnlySelf = None):
                if OnlySelf:
                        self.sendData("\x1A" + "\x0C",[path])
                else:
                        self.room.sendAll("\x1A" + "\x0C",[path])
        def sendStopMusic(self):
                self.room.sendAll("\x1A" + "\x0C",[])
        def sendSentPrivMsg(self, username, message):
                nameLength=struct.pack('!h', len(username))
                messageLength=struct.pack('!h', len(message))
                data="\x00"+nameLength+username+"\x00"+messageLength+message+"\x00"
                self.sendData("\x06" + "\x07", data, True)
                #self.sendData("\x06" + "\x07",[message, username])
        def sendRecievePrivMsg(self, username, message, cmmy):
                nameLength=struct.pack('!h', len(username))
                messageLength=struct.pack('!h', len(message))
                if cmmy == "br":
                        cmm = "\x03"
                else:
                        cmm = "\x00"
                data="\x01"+nameLength+username+cmm+messageLength+message+"\x00"
                self.sendData("\x06" + "\x07", data, True)
                #self.sendData("\x06" + "\x07",[message, username, "x"])
        def sendPlayerNotFound(self):
                #self.sendData("\x06" + "\x07")
                pass
        def sendHardMode(self, mode):
                if str(mode)=="1":
                        data="\x01\x00\x00"
                else:
                        data="\x00\x00\x00"
                self.sendData("\x1C" + "\x0A", data, True)
        def sendNewHat(self):
                #"Woooohoooo! New hat available!"
                self.room.sendWholeServer(self, "\x1C\x1C", "\x00\x00", True)
        def sendTotemItemCount(self, number):
                if self.room.currentWorld==444:
                        self.sendData("\x1C" + "\x0B", struct.pack('!h', number*2)+"\x00\x00", True)
        #def sendSumirCn(self, number):
         #               self.sendData("\x1C" + "\x0B", struct.pack('!h', number*2)+"\x00\x00", True)						

        def sendEmailValidatedDialog(self):
                self.sendData("\x1C"+"\x0C", "\x01", True)
        def sendEmailRequestedCodeForChange(self):
                self.sendData("\x1C"+"\x28", "\x01", True)
        def sendRecoveryEmailValidatedDialog(self):
                self.sendData("\x1C"+"\x28", "\x02", True)
        def sendEmailRequestedCodeForChangeInvalid(self):
                self.sendData("\x1C"+"\x28", "\x00", True)
        def sendEmailCodeInvalid(self):
                self.sendData("\x1C"+"\x0C", "\x00", True)
        def sendEmailValidated(self):
                self.sendData("\x1C"+"\x0D", "\x01", True)
        def sendEmailDialog(self):
                self.sendData("\x1C"+"\x0F", "", True)
        def sendEmailSent(self):
                self.sendData("\x1C"+"\x10", "\x01", True)
        def sendEmailAddrAlreadyUsed(self):
                self.sendData("\x1C"+"\x10", "\x00", True)

        def sendThreadList(self):
                dbcur.execute('select * from ForumThread')
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        ThreadList=[]
                        for rrf in rrfRows:
                                if rrf[6]=="True":
                                        DeletedThread=True
                                elif rrf[7]=="True":
                                        ClosedThread=True
                                else:
                                        #                                                                        Blank, Blank, Ava, Title, Date,   Post Count,                                    Username, ID     ID
                                        ThreadList.append(['\x02'.join(map(str,["", "", rrf[2], rrf[3], rrf[4], self.getThreadPostCount(rrf[0]), rrf[1], rrf[0]])),rrf[0]])
                        SendThreadList=[]
                        ThreadList=sorted(ThreadList, key=lambda Entry: Entry[1], reverse=True)
                        for Thread in ThreadList:
                                SendThreadList.append(Thread[0])
                        self.sendData("\x18"+"\x0F", SendThreadList)
        def sendForumThread(self, ID):
                dbcur.execute('select * from ForumThread where ID = ?', [int(ID)])
                rrf = dbcur.fetchone()
                if rrf is None:
                        pass
                else:
                        if rrf[7]=="True":
                                ClosedThread=True
                        else:
                                ClosedThread=False
                        if rrf[6]=="True":
                                DeletedThread=True
                        else:
                                DeletedThread=False
                rrf=None
                rrfRows=None
                if not DeletedThread:
                        dbcur.execute('select * from ForumPost where ThreadID = ?', [int(ID)])
                        rrfRows = dbcur.fetchall()
                        if rrfRows is None:
                                PostList=[]
                        else:
                                PostList=[]
                                for rrf in rrfRows:
                                        if rrf[7]=="True":
                                                pass
                                        else:
                                                #                                                                       Date  ,Name  ,Ava   ,Post  ,MouseTitle  #PostID
                                                Title=self.server.getCurrentTitle(rrf[2])
                                                if not int(Title) in range(0, 50+1)+[440, 444]:
                                                        Title=0
                                                PostList.append(['\x02'.join(map(str,[rrf[3],rrf[2],rrf[4],rrf[5],Title])), rrf[1]])
                        SendPostList=[]
                        PostList=sorted(PostList, key=lambda Entry: Entry[1])
                        for Post in PostList:
                                SendPostList.append(Post[0])
                        if ClosedThread:
                                pass #self.sendData("\x18"+"\x11", SendPostList)
                        else:
                                self.sendData("\x18"+"\x10", SendPostList)
        def sendPostSpeedLimit(self):
                #YOU MUST WAIT AT LEAST 60 SECONDS
                self.sendData("\x18"+"\x0E",)
        def getThreadPostCount(self, ID):
                Count=0
                dbcur.execute('select * from ForumPost where ThreadID = ?', [int(ID)])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        for rrf in rrfRows:
                                if rrf[7]=="True":
                                        pass
                                else:
                                        Count+=1
                return Count
        def checkThreadClose(self, ID):
                Status=False
                dbcur.execute('select Deleted from ForumThread where ID = ?', [int(ID)])
                rrf = dbcur.fetchone()
                if rrf is None:
                        pass
                else:
                        if rrf[0]=="True":
                                Status=True
                        else:
                                pass
                return Status
        def postForumReply(self, ThreadID, Message):
                PostDate=str(getTime()).split(".")[0]
                self.ForumLastPostTime=int(PostDate)
                PostID=int(self.server.getServerSetting("ForumLastPostID"))+1
                dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(PostID), "ForumLastPostID"])
                dbcur.execute("insert into ForumPost (ThreadID, PostID, Username, Date, Avatar, Post, TitleNum, Deleted) values (?, ?, ?, ?, ?, ?, ?, ?)", (int(ThreadID), int(PostID), self.username, PostDate, "0", Message, self.titleNumber, "False"))
                self.sendThreadList()
                self.sendForumThread(ThreadID)
        def postForumThread(self, Title, Message):
                PostDate=str(getTime()).split(".")[0]
                self.ForumLastPostTime=int(PostDate)
                ThreadID=int(self.server.getServerSetting("ForumLastThreadID"))+1
                PostID=int(self.server.getServerSetting("ForumLastPostID"))+1
                dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(ThreadID), "ForumLastThreadID"])
                dbcur.execute('UPDATE settings SET value = ? WHERE setting = ?', [str(PostID), "ForumLastPostID"])
                dbcur.execute("insert into ForumThread (ID, Username, Avatar, Title, Date, ReplyCount, Deleted, Locked) values (?, ?, ?, ?, ?, ?, ?, ?)", (int(ThreadID), self.username, "0", Title, PostDate, 0, "False", "False"))
                dbcur.execute("insert into ForumPost (ThreadID, PostID, Username, Date, Avatar, Post, TitleNum, Deleted) values (?, ?, ?, ?, ?, ?, ?, ?)", (int(ThreadID), int(PostID), self.username, PostDate, "0", Message, self.titleNumber, "False"))
                self.sendThreadList()
        def forumDeletePost(self, Name, PostDate):
                dbcur.execute('select * from ForumPost where Username = ? and Date = ?', [Name, PostDate])
                rrf = dbcur.fetchone()
                if rrf is None:
                        pass
                else:
                        PostInfo=list(rrf)
                rrf=None
                rrfRows=None
                ID=PostInfo[0]
                dbcur.execute('select * from ForumPost where ThreadID = ?', [int(ID)])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        PostList=[]
                else:
                        PostList=[]
                        for rrf in rrfRows:
                                if rrf[7]=="True":
                                        pass
                                else:
                                        PostList.append(['\x02'.join(map(str,[rrf[3],rrf[2],rrf[4],rrf[5],"0"])), rrf[1]])
                SendPostList=[]
                PostList=sorted(PostList, key=lambda Entry: Entry[1])
                if PostList[0][1]==PostInfo[1]:
                        dbcur.execute('UPDATE ForumThread SET Deleted = ? WHERE ID = ?', ["True", int(ID)])
                        dbcur.execute('UPDATE ForumPost SET Deleted = ? WHERE PostID = ?', ["True", int(PostInfo[1])])
                        self.sendThreadList()
                else:
                        dbcur.execute('UPDATE ForumPost SET Deleted = ? WHERE PostID = ?', ["True", int(PostInfo[1])])
                        self.sendThreadList()

        def checkEmailAddrrsSelf(self, EmailAddr, username):
            dbcur.execute('select Email from users where name = ?', [username])
            rrfRows = dbcur.fetchall()
            if rrfRows[0] is None:
                return False
            else:
                if rrfRows[0]==str(EmailAddr):
                    return True
                else:
                    return False						
						
        def checkDuplicateEmail(self, address):
                dbcur.execute('select Email from users')
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        EList=[]
                else:
                        EList=[]
                        for rrf in rrfRows:
                                if rrf[0]=="None":
                                        pass
                                else:
                                        EList.append(str(rrf[0]).lower())
                if address.lower() in EList:
                        return True
                else:
                        return False
        def checkValidEmail(self, address):
                if not re.search("@", address):
                        print "3980"
                        return False
                elif not re.search("\.", address):
                        print "3983"
                        return False
                else:
                        t1=address.split("@")
                        t2=t1[1].split(".")
                        address=[]
                        address.append(t1[0])
                        address.append(t2[0])
                        address.append(t2[1])
                        #address = [Name,Domain,Ext]
                        if len(address[2])>6:
                                print "3992"
                                return False
                        address[1]=address[1].lower()
                        #if not str(address[1]).lower() in ["gmx","live","gmail","yahoo","hotmail","rr","comcast","bellsouth"]:
                        #       print "3996"
                        #       return False
                        if address[0].lower() in ["admin", "administrator", "support", "nospam", "spam", "tech", "techsupport", "noreply", "automatic", "yahoo", "microsoft", "live", "hotmail", "google", "gmail", "gmx"]:
                                print "3999"
                                return False
                        return True

        def getPlayerData(self, Noshop = False):
                if Noshop:
                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, "78583a", "95d9d6", 0]))
                        if self.room:
                                return '#'.join(map(str,[self.username, self.playerCode, 0, 0, self.score, int(self.hasCheese), self.titleNumber, self.avatar, "10;0", self.forumid, '0', '0', 0]))
                        else:
                                if self.room.isBootcamp or self.room.getPlayerCount()>=100:
                                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, '78583a', '95d9d6']))
                                if self.room.isHalloween and self.room.getPlayerCount(True)>=int(self.server.NeedsForHalloween):
                                         return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, '78583a', '95d9d6', 0]))
                                else:
                                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, self.look, self.forumid, self.color1, self.color2, 0]))
                else:
                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, self.look, self.forumid, self.color1, self.color2, 0]))

        def getPlayerDataDir(self):
                return '#'.join(map(str,[self.username, self.playerCode, 0, 0, self.score, int(self.hasCheese), self.titleNumber, self.avatar, "10;0", self.forumid, '0', '0', 0]))
        def enterRoom(self, roomName):
                roomName = roomName.replace("<", "&amp;lt;")
                self.roomname = roomName

                if roomName.startswith(self.Langue + "_" + "\x03"+"[Editeur] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Editeur] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        if editeurnamecheck != self.username:
                                self.transport.loseConnection()
                if roomName.startswith(self.Langue + "_" + "\x03"+"[Totem] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Totem] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        if editeurnamecheck != self.username:
                                self.transport.loseConnection()
                if roomName.startswith(self.Langue + "_" + "\x03"+"[Private] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Private] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        elif self.room.checkRoomInvite(self, editeurnamecheck):
                                pass
                        elif self.privilegeLevel==10 or self.privilegeLevel==8 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                pass
                        else:
                                self.transport.loseConnection()	
                if roomName.startswith("quiz"):
                        self.QCurrent = random.choice(Q)
                        username = "BotQuiz"
                        message = self.username+" Sua pergunta é: "+ self.QCurrent +" Para responde digite /quiz + resposta "
                        nameLength=struct.pack('!h', len(username))
                        messageLength=struct.pack('!h', len(message))
                        data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                        self.sendData("\x06" + "\x07", data, True)
                        #self.sendData("\x06" + "\x14",[self.QCurrent])
                        if self.QCurrent == Q0:
                                self.Q = 0
                        elif self.QCurrent == Q1:
                                self.Q = 1
                        elif self.QCurrent == Q2:
                                self.Q = 2
                        elif self.QCurrent == Q3:
                                self.Q = 3
                        elif self.QCurrent == Q4:
                                self.Q = 4
                        elif self.QCurrent == Q5:
                                self.Q = 5
                        elif self.QCurrent == Q6:
                                self.Q = 6
                        elif self.QCurrent == Q7:
                                self.Q = 7
                        elif self.QCurrent == Q8:
                                self.Q = 8
                        elif self.QCurrent == Q9:
                                self.Q = 9										
                if roomName.startswith("baffbotffa"):
                        username = "BotBaffbotffa"
                        message = self.username+" Bem-vindo à Sala Baffbotffa! Instruções: Abaixe-se Para Soltar um Cn! (CANNON) tente não morrer! depois de 10 fases quem tiver mais pontos ganha a partida! bom jogo! que vença o melhor!"
                        nameLength=struct.pack('!h', len(username))
                        messageLength=struct.pack('!h', len(message))
                        data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                        self.sendData("\x06" + "\x07", data, True)
                if roomName.startswith("New"):
                        self.look = "22;0,0,0,0,0,0,0,0"
                if roomName.startswith("spgame"):						
                        self.sendData("\x1A" + "\x04",["<V>Bem-vindo À Sala SPGAME! <VP>Você Poderá Soltar 1 Spirit a Cada 1 Segundo,<R> O Vencedor Ganhará Pontos Para Vencer A Partida.<BR><J> APERTE TAB<R> PARA MAIS INFORMAÇÕES!"])												
                if roomName.startswith("Spgame"):						
                        self.sendData("\x1A" + "\x04",["<V>Bem-vindo À Sala SPGAME! <VP>Você Poderá Soltar 1 Spirit a Cada 1 Segundo,<R> O Vencedor Ganhará Pontos Para Vencer A Partida.<BR><J> APERTE TAB<R> PARA MAIS INFORMAÇÕES!"])
                if roomName.startswith("ballon"):						
                        self.sendData("\x1A" + "\x04",["<V>Bem-vindo À Sala Ballon!"])
                if roomName.startswith("quiz"):
                        self.sendData("\x1A" + "\x04", ["<font color='#FF3E96'>Bem-vindo ao Quiz <font color='#00FF7F'>Cada Rodada o Bot Irá Solicitar Uma Pergunta, Você Terá Que Respondela Corretamente Com Reposta ou /Quiz + Resposta Preste Atenção Algumas Vezes Poderá Ter Prêmios Envolvidos No Game."]) 												
                if roomName.startswith("racing"):
                        username = "BotRacing"
                        message = " Bem-vindo à Sala Racing! Tempo Máximo Na Sala: 60s"
                        nameLength=struct.pack('!h', len(username))
                        messageLength=struct.pack('!h', len(message))
                        data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                        self.sendData("\x06" + "\x07", data, True)	
                if roomName.startswith("ralute"):
                        username = "BotRalute"
                        message = "Olá "+self.username+" Bem-vindo à Sala Ralute (Novo Mini-Game)!  OBS: Alguem virara vampiro em 30 segundos! fique atento! Para ver o Ranking digite /raluterank"
                        nameLength=struct.pack('!h', len(username))
                        messageLength=struct.pack('!h', len(message))
                        data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                        self.sendData("\x06" + "\x07", data, True)							
                if roomName.startswith("defilante"):
                        username = "BotDefilante"
                        message = self.username+" Bem-vindo à Sala Defilante! Pegue o Máximo de (+1) Possivéis Para Que Possa Ganhar Asas!"
                        nameLength=struct.pack('!h', len(username))
                        messageLength=struct.pack('!h', len(message))
                        data="\x01"+nameLength+username+"\x06"+messageLength+message+"\x00"
                        self.sendData("\x06" + "\x07", data, True)
                if roomName.startswith("football"):
                        self.sendMessage("<BL>Bem vindo a sala <J>Football<BL>. Jogue uma partida com seus amigos (6 minutos) e divirta-se! Aperte <J>TAB<BL> ou digite <J>/join<BL> para saber como entrar em um time.<br>Minigame criado por <VP>Crew<BL> e <J>Gsoares<BL>.")						

                if roomName.startswith("*"):
                        pass
                elif roomName.startswith("en_") and self.privilegeLevel>=5:
                        pass
                elif roomName.startswith("tr_") and self.privilegeLevel>=5:
                        pass
                elif roomName.startswith("da_") and self.privilegeLevel>=5:
                        pass
                elif roomName.startswith("ru_") and self.privilegeLevel>=5:
                        pass
                elif roomName.startswith("cn_") and self.privilegeLevel>=5:
                        pass  
                elif roomName.startswith("es_") and self.privilegeLevel>=5:
                        pass  
                elif roomName.startswith("pt_") and self.privilegeLevel>=5:
                        pass  
                elif roomName.startswith("sv_") and self.privilegeLevel>=5:
                        pass  
                elif roomName.startswith("fr_") and self.privilegeLevel>=5:
                        pass  
                elif roomName.startswith("br_") and self.privilegeLevel>=5:			
                        pass  
                elif roomName.startswith("en_") and self.privilegeLevel>=5:
                        pass  
                else:
                        roomName = self.Langue + "_" + roomName

                self.roomname = roomName

                if roomName in self.server.rooms:
                        if self.server.rooms[roomName].getPlayerCount() >= self.server.rooms[roomName].playerLimit:
                                if self.privilegeLevel not in [3,4,5,6,8,10]:
                                        if roomName.isdigit:
                                                self.enterRoom(self.server.recommendRoom(roomName))
                                        else:
                                                self.enterRoom(self.server.recommendRoomPrefixed(roomName))
                                        return
                
                if self.room:
                        if self.AwakeTimerKickTimer:
                                try:
                                        self.AwakeTimerKickTimer.cancel()
                                except:
                                        self.AwakeTimerKickTimer=None
                        self.room.removeClient(self)

                self.resetPlay()
                self.score = 0

                self.sendEnterRoom(roomName)
                self.LoadCountTotem = False
                #print str(datetime.today())+" "+"Entrada Na Sala: %s - %s" % (roomName, self.username)
                self.server.addClientToRoom(self, roomName)

        def AwakeTimerKick(self):
                if self.isBot:
                        pass
                else:
                        print "AwakeTimer kicked "+self.address[0]+"!"
                        if self.room:
                                self.updateSelfSQL()
                                self.sendPlayerDied(self.playerCode, self.score)
                                self.room.removeClient(self)
                        self.transport.loseConnection()
        def sendAnuncio(self):
                self.sendMessage("<ROSE>[Atenção] Chame Seus amigos para jogar TransforVida versão 1.96!</font></b>")        
        def sendGoroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#DE4747'>Comecem!"])
                self.libCn = False
                self.sendMsgDuck = False
        def sendUmroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>1..."])
        def sendDoisroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>2..."])
        def sendTresroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>3..."])
        def sendInfectionroom(self):
                self.sendMessage("<J>[GAME] <font color='#ffffff'>Um rato foi infectado, cuidado!")
                self.libcn = True
                self.room.isZombieRoom = True                                        
                self.sendMsgDuck = False				
        def sendGoooroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>[JOGO] Você recebeu uma ratapulta. CAAAAAAAAAAAARREGUE !"])
                self.libcn = True
                self.sendMsgDuck = False
        def sendGooratapult(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>[JOGO] Você recebeu uma ratapulta. CAAAAAAAAAAAARREGUE !"])
                self.libCn = False	
                self.sendMsgDuck = False				
        def sendUmmmroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>★ [JOGO] O jogo vai começar em 1..."])
        def sendDoisssroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>★ [JOGO] O jogo vai começar em 2..."])
        def sendTresssroom(self):
                self.sendData("\x1A" + "\x04",["<font color='#EBDE28'>★ [JOGO] O jogo vai começar em 3..."])				
        def sendRalutehroom(self):
                self.canMeep = True
                self.sendData("\x08\x27", None, True)
                self.sendData("\x1A" + "\x04",["<font color='#E565E3'>[Rall] <font color='#BDBED6'>Nova Arma Ativada: Meep Foi Ativado! Cuidado! Esse MEEP é Mortal!"])
        def sendRaluteativecannonroom(self):
                self.libCn = False
                self.sendData("\x1A" + "\x04",["<font color='#E565E3'>[Rall] <font color='#BDBED6'>Nova Arma Ativada: As Bigornas Foram Ativadas! Cuidado! ^.^, Você Pode Atirar De 10 em 10 Segundos!"])
        def sendVirarCroom(self):
                self.sendData("\x1B" + "\x0A", "", True)
                self.sendData("\x1A" + "\x04",["<font color='#E565E3'>[Rall] <font color='#BDBED6'>Nova Arma Ativada: Agora Você Pode Virar Madeira, Caixa e Bigorna!"])				
        def Map777Fishing(self):
                if self.isFishing:
                        if self.room.currentWorld==777:
                                item=random.randrange(1,4)
                                if int(self.isFishing)==1:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("28"):
                                                        self.sendAnimZelda(self.playerCode, 2, 8)
                                                        if self.shopitems=="":
                                                                self.shopitems="28"
                                                        else:
                                                                self.shopitems=self.shopitems+",28"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("311"):
                                                        self.sendAnimZelda(self.playerCode, 3, 11)
                                                        if self.shopitems=="":
                                                                self.shopitems="311"
                                                        else:
                                                                self.shopitems=self.shopitems+",311"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2

                                elif int(self.isFishing)==2:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("56"):
                                                        self.sendAnimZelda(self.playerCode, 0, 56)
                                                        if self.shopitems=="":
                                                                self.shopitems="56"
                                                        else:
                                                                self.shopitems=self.shopitems+",56"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("57"):
                                                        self.sendAnimZelda(self.playerCode, 0, 57)
                                                        if self.shopitems=="":
                                                                self.shopitems="57"
                                                        else:
                                                                self.shopitems=self.shopitems+",57"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2

                                elif int(self.isFishing)==3:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("58"):
                                                        self.sendAnimZelda(self.playerCode, 0, 58)
                                                        if self.shopitems=="":
                                                                self.shopitems="58"
                                                        else:
                                                                self.shopitems=self.shopitems+",58"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("27"):
                                                        self.sendAnimZelda(self.playerCode, 2, 7)
                                                        if self.shopitems=="":
                                                                self.shopitems="27"
                                                        else:
                                                                self.shopitems=self.shopitems+",27"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                else:
                                        pass

        def initTotemEditor(self):
                if self.RTotem:
                        self.sendTotemItemCount(0)
                        self.RTotem=False
                else:
                        if self.STotem[1]!="":
                                self.Totem=[0, ""]
                                self.sendTotemItemCount(self.STotem[0])
                                self.sendTotem(self.STotem[1], 400, 203, self.playerCode)
                        else:
                                self.sendTotemItemCount(0)
								
        def GetItemHalloween(self):
            if self.room.isHalloween and self.room.getPlayerCount(True)>=int(self.server.NeedsForHalloween):
                if int(self.room.ISCM) == 1036:
                    if self.room.CatZombieDie:
                        if self.AttackedCat >= 1:
                            self.AttackedCat = 0
                            if not self.checkInShop("202"):
                                if self.shopitems=="":
                                    self.shopitems="202"
                                else:
                                    self.shopitems = self.shopitems + ",202"
                                
                                self.sendData("\x14\x02", struct.pack('!hb', 202, 1), True)
                                looklist2 = self.look.split(",")
                                looklist2[2] = str(2)
                                self.sendShopList()
                                self.checkUnlockShopTitle()
                                self.sendAnimZelda(self.playerCode, 2, 2)
                            else:
                                if not self.checkInShop("409"):
                                    if self.shopitems=="":
                                        self.shopitems="409"
                                    else:
                                        self.shopitems = self.shopitems + ",409"
                                
                                    self.sendData("\x14\x02", struct.pack('!hb', 409, 1), True)
                                    looklist2 = self.look.split(",")
                                    looklist2[4] = str(9)
                                    self.sendShopList()
                                    self.checkUnlockShopTitle()
                                    self.sendAnimZelda(self.playerCode, 4, 9)
                                else:
                                    if not self.checkInShop("39"):
                                        if self.shopitems=="":
                                            self.shopitems="39"
                                        else:
                                            self.shopitems = self.shopitems + ",39"
                                
                                        self.sendData("\x14\x02", struct.pack('!hb', 39, 1), True)
                                        looklist2 = self.look.split(",")
                                        looklist2[0] = str(39)
                                        self.sendShopList()
                                        self.checkUnlockShopTitle()
                                        self.sendAnimZelda(self.playerCode, 0, 39)
                                    else:
                                        if not self.checkInShop("81"):
                                            if self.shopitems=="":
                                                self.shopitems="81"
                                            else:
                                                self.shopitems = self.shopitems + ",81"
                                
                                            self.sendData("\x14\x02", struct.pack('!hb', 81, 1), True)
                                            looklist2 = self.look.split(",")
                                            looklist2[0] = str(81)
                                            self.sendShopList()
                                            self.checkUnlockShopTitle()
                                            self.sendAnimZelda(self.playerCode, 0, 81)   
                                        else:
                                            if not self.checkInShop("315"):
                                                if self.shopitems=="":
                                                    self.shopitems="315"
                                                else:
                                                    self.shopitems = self.shopitems + ",315"
                                
                                                self.sendData("\x14\x02", struct.pack('!hb', 315, 1), True)
                                                looklist2 = self.look.split(",")
                                                looklist2[3] = str(15)
                                                self.sendShopList()
                                                self.checkUnlockShopTitle()
                                                self.sendAnimZelda(self.playerCode, 3, 15)
                                            else:
                                                if not self.checkInShop("82"):
                                                    if self.shopitems=="":
                                                        self.shopitems="82"
                                                    else:
                                                        self.shopitems = self.shopitems + ",82"
                                
                                                    self.sendData("\x14\x02", struct.pack('!hb', 82, 1), True)
                                                    looklist2 = self.look.split(",")
                                                    looklist2[0] = str(82)
                                                    self.sendShopList()
                                                    self.checkUnlockShopTitle()
                                                    self.sendAnimZelda(self.playerCode, 0, 82)	
                                                else:
                                                    if not self.checkInShop("80"):
                                                        if self.shopitems=="":
                                                            self.shopitems="80"
                                                        else:
                                                            self.shopitems = self.shopitems + ",80"
                                
                                                        self.sendData("\x14\x02", struct.pack('!hb', 80, 1), True)
                                                        looklist2 = self.look.split(",")
                                                        looklist2[0] = str(80)
                                                        self.sendShopList()
                                                        self.checkUnlockShopTitle()
                                                        self.sendAnimZelda(self.playerCode, 0, 80)
                                                    else:
                                                        if not self.checkInShop("40"):
                                                            if self.shopitems=="":
                                                                self.shopitems="40"
                                                            else:
                                                                self.shopitems = self.shopitems + ",40"
                                
                                                            self.sendData("\x14\x02", struct.pack('!hb', 40, 1), True)
                                                            looklist2 = self.look.split(",")
                                                            looklist2[0] = str(40)
                                                            self.sendShopList()
                                                            self.checkUnlockShopTitle()
                                                            self.sendAnimZelda(self.playerCode, 0, 40)
                                                        else:
                                                            if not self.checkInShop("324"):
                                                                if self.shopitems=="":
                                                                    self.shopitems="324"
                                                                else:
                                                                    self.shopitems = self.shopitems + ",324"
                                
                                                                self.sendData("\x14\x02", struct.pack('!hb', 324, 1), True)
                                                                looklist2 = self.look.split(",")
                                                                looklist2[3] = str(24)
                                                                self.sendShopList()
                                                                self.checkUnlockShopTitle()
                                                                self.sendAnimZelda(self.playerCode, 3, 24)
                                                            else:
                                                                if not self.checkInShop("220"):
                                                                    if self.shopitems=="":
                                                                        self.shopitems="220"
                                                                    else:
                                                                        self.shopitems = self.shopitems + ",220"
                                
                                                                    self.sendData("\x14\x02", struct.pack('!hb', 220, 1), True)
                                                                    looklist2 = self.look.split(",")
                                                                    looklist2[2] = str(20)
                                                                    self.sendShopList()
                                                                    self.checkUnlockShopTitle()
                                                                    self.sendAnimZelda(self.playerCode, 2, 20)
                                                                else:
                                                                    if not self.checkInShop("117"):
                                                                        if self.shopitems=="":
                                                                            self.shopitems="117"
                                                                        else:
                                                                            self.shopitems = self.shopitems + ",117"
                                
                                                                        self.sendData("\x14\x02", struct.pack('!hb', 117, 1), True)
                                                                        looklist2 = self.look.split(",")
                                                                        looklist2[1] = str(17)
                                                                        self.sendShopList()
                                                                        self.checkUnlockShopTitle()
                                                                        self.sendAnimZelda(self.playerCode, 1, 17)
                                                                    else:
                                                                        if not self.checkInShop("701"):
                                                                            if self.shopitems=="":
                                                                                self.shopitems="701"
                                                                            else:
                                                                                self.shopitems = self.shopitems + ",701"
                                
                                                                            self.sendData("\x14\x02", struct.pack('!hb', 701, 1), True)
                                                                            looklist2 = self.look.split(",")
                                                                            looklist2[7] = str(1)
                                                                            self.sendShopList()
                                                                            self.checkUnlockShopTitle()
                                                                            self.sendAnimZelda(self.playerCode, 7, 1)
                                                                        else:
                                                                            if not self.checkInShop("801"):
                                                                                if self.shopitems=="":
                                                                                    self.shopitems="801"
                                                                                else:
                                                                                    self.shopitems = self.shopitems + ",801"
                                
                                                                                self.sendData("\x14\x02", struct.pack('!hb', 801, 1), True)
                                                                                looklist2 = self.look.split(",")
                                                                                looklist2[8] = str(1)
                                                                                self.sendShopList()
                                                                                self.checkUnlockShopTitle()
                                                                                self.sendAnimZelda(self.playerCode, 8, 1)
                                                                            else:
                                                                                if not self.checkInTitleList("287"):
                                                                                    self.sendUnlockedTitle(self.playerCode, "287")
                                                                                    self.titleList = self.titleList + ["287"]
                                                                                else:
                                                                                    self.sendData("\x0C\x14", struct.pack('!h', int(20)), True)
                                                                                    self.shopfraises += 20																			
								
        def resetPlay(self):
                self.isShaman = False
                self.hasCheese = False
                self.isSyncroniser = False
                self.isFishing = False
                self.isZombie = False
                self.canMeep = False
                self.UTotem = False
                self.JumpCheck = 1
                self.IcedMouses = 2
                self.tickets = 0
                self.vel = 0
                self.isDead = False
                self.ShamanRespawn = False
                self.Balonlar = 0
                self.iskelet = False
                self.isHole = False				

        def startPlay(self, ISCM, SPEC):
                if self.room.getPlayerCount()>=2 and self.room.countStats:
                        self.roundCount=self.roundCount+1
                self.resetPlay()

                #if self.isHidden:
                #        self.sendPlayerDisconnect(self.playerCode)

                self.duckCheckCounter = 0
                self.sendGiftAmount(int(1))

                if SPEC == 1:
                        self.isDead=True
                        self.SPEC=True
                else:
                        self.SPEC=False
                        self.isDead=False
                if self.room.isSandbox:
                        self.isDead=True

                self.hasCheese=False
               # self.room.isEventMap = False				

                if ISCM!=-1:
                        self.sendNewPartyCustomMap(self.room.ISCM, self.room.ISCMdata[2], self.room.ISCMdata[1], self.room.ISCMdata[5])
                elif self.room.ISCM!=-1:
                        self.sendNewPartyCustomMap(self.room.ISCM, self.room.ISCMdata[2], self.room.ISCMdata[1], self.room.ISCMdata[5])
                elif self.room.ISCMV!=0 and self.room.isEditeur:
                        self.sendNewPartyMapEditeur(self.room.ISCMVdata[2], self.room.ISCMVdata[1], self.room.ISCMVdata[5])
                else:
                        self.sendNewParty()

                if self.room.noShaman:
                        shamanCode = 0
                        shamanCode2 = 0
                else:
                        if self.room.isDoubleMap:
                                shamans = self.room.getDoubleShamanCode()
                                shamanCode = shamans[0]
                                shamanCode2 = shamans[1]
                        else:
                                shamanCode = self.room.getShamanCode()
                #Ruhani Lider
                self.sendData("\x08\x0A", struct.pack("!bb", 26, 116), True)#I not
                for player in self.room.clients.values():
                        if player.playerCode == self.room.currentShamanCode or player.playerCode == self.room.currentSecondShamanCode:
                                becerilerimindevrimi=","+str(player.becerilerim)
                                if ",1_" in becerilerimindevrimi:
                                        if ",1_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, 110), True)#Peyniri büyütme
                                        if ",1_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, 120), True)#Peyniri büyütme
                                        if ",1_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -126), True)#Peyniri büyütme
                                        if ",1_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -116), True)#Peyniri büyütme
                                        if ",1_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -106), True)#Peyniri büyütme
                                if ",2_" in becerilerimindevrimi:
                                        if ",2_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 51, 114), True)#Büyüme
                                        if ",2_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 51, 116), True)#Büyüme
                                        if ",2_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 118), True)#Büyüme
                                        if ",2_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 120), True)#Büyüme
                                        if ",2_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 122), True)#Büyüme
                                if ",26_" in becerilerimindevrimi:
                                        if ",26_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 1), True)#Roket
                                        if ",26_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 2), True)#Roket
                                        if ",26_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 3), True)#Roket
                                        if ",26_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 4), True)#Roket
                                        if ",26_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 5), True)#Roket
                if self.playerCode == self.room.currentShamanCode or self.playerCode == self.room.currentSecondShamanCode:
                        becerilerimindevrimi=","+str(self.becerilerim)
                        if ",4_" in becerilerimindevrimi:
                                self.ShamanRespawn = True
                        if ",5_" in becerilerimindevrimi:
                                if ",5_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 1), True)#Kalp
                                if ",5_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 2), True)#Kalp
                                if ",5_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 3), True)#Kalp
                                if ",5_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 4), True)#Kalp
                                if ",5_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 5), True)#Kalp
                        if ",6_" in becerilerimindevrimi:
                                if ",6_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 1
                                if ",6_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 2
                                if ",6_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 3
                                if ",6_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 4
                                if ",6_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 5
                        if ",7_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 42, 100), True)#Peynir
                        if ",9_" in becerilerimindevrimi:
                                if ",9_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 1), True)#Anti yer çekimi
                                if ",9_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 2), True)#Anti yer çekimi
                                if ",9_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 3), True)#Anti yer çekimi
                                if ",9_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 4), True)#Anti yer çekimi
                                if ",9_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 5), True)#Anti yer çekimi
                        if ",10_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 38, 3), True)#Defilante hız
                        if ",11_" in becerilerimindevrimi:
                                if ",11_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 1), True)#Öldükten sonra yaratma
                                if ",11_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 2), True)#Öldükten sonra yaratma
                                if ",11_3" in becerilerimindevrimi:
                                      self.sendData("\x08\x0A", struct.pack("!bb", 29, 3), True)#Öldükten sonra yaratma
                                if ",11_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 4), True)#Öldükten sonra yaratma
                                if ",11_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 5), True)#Öldükten sonra yaratma
                        if ",13_" in becerilerimindevrimi:
                                if ",13_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 37, 3), True)#Defilante zıplama
                        if ",14_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 46, 100), True)#Bulut
                #Son

                #Rüzgar ustası
                        if ",20_" in becerilerimindevrimi:
                                if ",20_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 114), True)#Hızlanma
                                if ",20_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 118), True)#Hızlanma
                                if ",20_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 112), True)#Hızlanma
                                if ",20_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 116), True)#Hızlanma
                                if ",20_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 120), True)#Hızlanma
                        if ",21_" in becerilerimindevrimi:
                                if ",21_1" in becerilerimindevrimi:
                                        self.Balonlar = 1
                                if ",21_2" in becerilerimindevrimi:
                                        self.Balonlar = 2
                                if ",21_3" in becerilerimindevrimi:
                                        self.Balonlar = 3
                                if ",21_4" in becerilerimindevrimi:
                                        self.Balonlar = 4
                                if ",21_5" in becerilerimindevrimi:
                                        self.Balonlar = 5
                        if ",22_" in becerilerimindevrimi:
                                if ",22_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 25), True)#Krampon
                                if ",22_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 30), True)#Krampon
                                if ",22_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 35), True)#Krampon
                                if ",22_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 40), True)#Krampon
                                if ",22_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 45), True)#Krampon
                        if ",23_" in becerilerimindevrimi:
                                if ",23_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 40), True)#Diyet
                                if ",23_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 50), True)#Diyet
                                if ",23_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 60), True)#Diyet
                                if ",23_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 70), True)#Diyet
                                if ",23_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 80), True)#Diyet
                        if ",27_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 55, 100), True)#Arkadaşlık kutusu
                        if ",28_" in becerilerimindevrimi:
                                if ",28_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 2), True)#Küçük kalaslar
                                if ",28_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 4), True)#Küçük kalaslar
                                if ",28_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 6), True)#Küçük kalaslar
                                if ",28_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 8), True)#Küçük kalaslar
                                if ",28_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 10), True)#Küçük kalaslar
                        if ",29_" in becerilerimindevrimi:
                                if ",29_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 1), True)#Işınlanma
                                if ",29_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 2), True)#Işınlanma
                                if ",29_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 3), True)#Işınlanma
                                if ",29_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 4), True)#Işınlanma
                                if ",29_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 5), True)#Işınlanma
                        if ",30_" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 15, 1), True)#Yansıtıcı
                        if ",31_" in becerilerimindevrimi:
                                if ",31_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 1), True)#Dönüşüm
                                if ",31_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 2), True)#Dönüşüm
                                if ",31_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 3), True)#Dönüşüm
                                if ",31_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 4), True)#Dönüşüm
                                if ",31_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 5), True)#Dönüşüm
                        if ",32_" in becerilerimindevrimi:
                                if ",32_1" in becerilerimindevrimi:
                                        self.IcedMouses += 1
                                if ",32_2" in becerilerimindevrimi:
                                        self.IcedMouses += 2
                                if ",32_3" in becerilerimindevrimi:
                                        self.IcedMouses += 3
                                if ",32_4" in becerilerimindevrimi:
                                        self.IcedMouses += 4
                                if ",32_5" in becerilerimindevrimi:
                                        self.IcedMouses += 5
                        if ",33_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 16, 1), True)#Yansıtıcı
                        if ",34_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack('!bb', 17, 1), True)#Kanat
                #Son
                
                #Mekanist
                        if ",40_" in becerilerimindevrimi:
                                if ",40_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 30), True)#Büyük ruh
                                if ",40_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 40), True)#Büyük ruh
                                if ",40_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 50), True)#Büyük ruh
                                if ",40_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 60), True)#Büyük ruh
                                if ",40_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 70), True)#Büyük ruh
                        if ",41_" in becerilerimindevrimi:
                                if ",41_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 1), True)#Çoklu toplar
                                if ",41_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 2), True)#Çoklu toplar
                                if ",41_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 3), True)#Çoklu toplar
                                if ",41_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 4), True)#Çoklu toplar
                                if ",41_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 5), True)#Çoklu toplar                                
                        if ",42_" in becerilerimindevrimi:
                                if ",42_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -16), True)#Ağır drag
                                if ",42_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -26), True)#Ağır drag
                                if ",42_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -36), True)#Ağır drag
                                if ",42_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -46), True)#Ağır drag
                                if ",42_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -56), True)#Ağır drag
                        if ",43_" in becerilerimindevrimi:
                                if ",43_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -16), True)#Ağır örs
                                if ",43_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -26), True)#Ağır örs
                                if ",43_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -36), True)#Ağır örs
                                if ",43_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -46), True)#Ağır örs
                                if ",43_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -56), True)#Ağır örs 
                        if ",44_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 39, 1), True)#Buz zemini
                        if ",45_" in becerilerimindevrimi:
                                if ",45_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, 110), True)#Balonun hızını arttırma
                                if ",45_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, 120), True)#Balonun hızını arttırma
                                if ",45_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -126), True)#Balonun hızını arttırma
                                if ",45_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -116), True)#Balonun hızını arttırma
                                if ",45_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -106), True)#Balonun hızını arttırma
                        if ",46_" in becerilerimindevrimi:
                                if ",46_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 1), True)#Yolundan ayrılmayan sperm
                                if ",46_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 2), True)#Yolundan ayrılmayan sperm
                                if ",46_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 3), True)#Yolundan ayrılmayan sperm
                                if ",46_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 4), True)#Yolundan ayrılmayan sperm
                                if ",46_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 5), True)#Yolundan ayrılmayan sperm
                        if ",47_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 40, 1), True)#Çikolata zemini
                        if ",48_" in becerilerimindevrimi:
                                if ",48_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 1), True)#Anında balon yaratma
                                if ",48_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 2), True)#Anında balon yaratma
                                if ",48_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 3), True)#Anında balon yaratma
                                if ",48_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 4), True)#Anında balon yaratma
                                if ",48_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 5), True)#Anında balon yaratma
                        if ",49_" in becerilerimindevrimi:
                                if ",49_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, 110), True)#Uzman yaratıcı
                                if ",49_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, 120), True)#Uzman yaratıcı
                                if ",49_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -126), True)#Uzman yaratıcı
                                if ",49_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -116), True)#Uzman yaratıcı
                                if ",49_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -106), True)#Uzman yaratıcı             
                        if ",50_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 27, 1), True)#Kötü ruh
                        if ",51_" in becerilerimindevrimi:
                                if ",51_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 1), True)#İtem yoketme
                                if ",51_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 2), True)#İtem yoketme
                                if ",51_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 3), True)#İtem yoketme
                                if ",51_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 4), True)#İtem yoketme
                                if ",51_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 5), True)#İtem yoketme             
                        if ",52_" in becerilerimindevrimi:
                                if ",52_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 1), True)#Saydamlaştırma
                                if ",52_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 2), True)#Saydamlaştırma
                                if ",52_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 3), True)#Saydamlaştırma
                                if ",52_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 4), True)#Saydamlaştırma
                                if ",52_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 5), True)#Saydamlaştırma             
                        if ",53_" in becerilerimindevrimi:
                                if ",53_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 1), True)#Koyun
                                if ",53_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 2), True)#Koyun
                                if ",53_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 3), True)#Koyun
                                if ",53_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 4), True)#Koyun
                                if ",53_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 5), True)#Koyun             
                        if ",54_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)#Kartal gözü!        
                #Son
                if not self.SPEC:
                        if self.room.isRacing or self.room.isDefilante:
                                highPlayerCode = self.room.getHighestPlayer()
                                if self.room.rounds >= 10:
                                        for playerCode, client in self.room.clients.items():
                                                client.score = 0

                self.sendPlayerList()

                if self.room.currentWorld in [108, 109]:
                        self.catchTheCheeseNoShaman(shamanCode)
                elif str(self.room.ISCM) == "1":
                        shamanCode = 0
                        self.sendBoat()
                        self.room.NavegationStartTimer = reactor.callLater(9, self.sendNavegation)
                        self.room.WindStartTimer = reactor.callLater(17, self.sendWind)
                        self.room.RainStartTimer = reactor.callLater(30, self.sendRain)
                        self.room.StormStartTimer = reactor.callLater(40, self.sendStorm)
                        self.room.Thunder1StartTimer = reactor.callLater(47, self.sendThunder1)
                        self.room.Thunder2StartTimer = reactor.callLater(52, self.sendThunder2)
                        self.room.Thunder3StartTimer = reactor.callLater(60, self.sendThunder3)
                        self.room.Thunder4StartTimer = reactor.callLater(68, self.sendThunder4)
                        self.room.Thunder5StartTimer = reactor.callLater(80, self.sendThunder5)
                        self.room.Thunder6StartTimer = reactor.callLater(90, self.sendThunder6)
                else:
                        if self.room.ZombieTimer:
                                try:
                                        self.room.ZombieTimer.cancel()
                                except:
                                        self.room.ZombieTimer=None

                        if self.room.NavegationStartTimer:
                                try:
                                        self.room.NavegationStartTimer.cancel()
                                except:
                                        self.room.NavegationStartTimer=None

                        if self.room.WindStartTimer:
                                try:
                                        self.room.WindStartTimer.cancel()
                                except:
                                        self.room.WindStartTimer=None

                        if self.room.RainStartTimer:
                                try:
                                        self.room.RainStartTimer.cancel()
                                except:
                                        self.room.RainStartTimer=None

                        if self.room.StormStartTimer:
                                try:
                                        self.room.StormStartTimer.cancel()
                                except:
                                        self.room.StormStartTimer=None

                        if self.room.Thunder1StartTimer:
                                try:
                                        self.room.Thunder1StartTimer.cancel()
                                except:
                                        self.room.Thunder1StartTimer=None

                        if self.room.Thunder2StartTimer:
                                try:
                                        self.room.Thunder2StartTimer.cancel()
                                except:
                                        self.room.Thunder2StartTimer=None

                        if self.room.Thunder3StartTimer:
                                try:
                                        self.room.Thunder3StartTimer.cancel()
                                except:
                                        self.room.Thunder3StartTimer=None

                        if self.room.Thunder4StartTimer:
                                try:
                                        self.room.Thunder4StartTimer.cancel()
                                except:
                                        self.room.Thunder4StartTimer=None

                        if self.room.Thunder5StartTimer:
                                try:
                                        self.room.Thunder5StartTimer.cancel()
                                except:
                                        self.room.Thunder5StartTimer=None

                        if self.room.Thunder6StartTimer:
                                try:
                                        self.room.Thunder6StartTimer.cancel()
                                except:
                                        self.room.Thunder6StartTimer=None
                if self.room.currentWorld in [110, 111, 112, 113, 114]:
                        self.catchTheCheeseShaman(shamanCode)
                else:
                        if self.room.isDoubleMap:
                                self.sendDoubleShamanCode(shamanCode, shamanCode2)
                        else:
                                self.sendShamanCode(shamanCode)
                if not self.room.bulut1 == 0:
                        self.room.bulut1 = 0
                if not self.room.bulut2 == 0:
                        self.room.bulut2 = 0
                if not self.room.arkadaslik2 == 0:
                        self.room.arkadaslik2 = 0
                if not self.room.arkadaslik1 == 0:
                        self.room.arkadaslik1 = 0
                if self.room.currentWorld==888:
                        self.sendTime(60)
                elif self.room.ISCMdata[5] == 11:
                        if self.room.getPlayerCount(False)>=2 and self.room.countStats:
                                self.room.ZombieTimer = reactor.callLater(16.5, self.room.goZombified)
                elif self.room.ISCM in [5]:
                        self.room.isEventMap = True
                else:
                        self.sendTime(self.room.roundTime+int((self.room.gameStartTime-getTime())))
                        if self.room.ZombieTimer:
                                try:
                                    self.room.ZombieTimer.cancel()
                                except:
                                    self.room.ZombieTimer=None
                #if self.room.isSandbox:
                #       self.sendTime(0)
                if self.room.currentWorld in self.server.NPCMaps:
                        RunList=self.server.NPCs_M[:]
                        for position, npc in enumerate(RunList):
                                if npc[7]==self.room.currentWorld:
                                        self.sendData("\x15" + "\x15", [npc[0], npc[1], npc[2], npc[3], npc[4], npc[5], npc[6]])
                                        if npc[8]==True:
                                                ExList=npc[9][:]
                                                for position, ExData in enumerate(ExList):
                                                        self.sendData(ExData[0], ExData[1], True)
                if self.room.name in self.server.NPCRooms:
                        RunList=self.server.NPCs_R[:]
                        for position, npc in enumerate(RunList):
                                if npc[7]==self.room.name:
                                        #                                id     name    shop      x       y       dir    click
                                        self.sendData("\x15" + "\x15", [npc[0], npc[1], npc[2], npc[3], npc[4], npc[5], npc[6]])
                                        if npc[8]==True:
                                                ExList=npc[9][:]
                                                for position, ExData in enumerate(ExList):
                                                        self.sendData(ExData[0], ExData[1], True)

                if self.room.PRShamanIsShaman:
                        self.room.forceNextShaman = self.room.getPlayerCode(self.room.name.replace("\x03[Private] ", ""))

                if self.room.isDoubleMap:
                        shamans = self.room.getDoubleShamanCode()
                        shamanCode = shamans[0]
                        shamanCode2 = shamans[1]
                else:
                        shamanCode = self.room.getShamanCode()
                        #self.room.isZombieRoom = True

                if str(self.room.ISCM) == "666":
                        shamanCode = 0					
                        self.room.ZombieTimer = reactor.callLater(12, self.room.goZombified)
                        self.room.isZombieRoom = True	
               # if str(self.room.ISCM) == "2097":
                #        self.room.isEventMap = True
                #else:
                 #       self.sendTime(self.room.roundTime+int((self.room.gameStartTime-getTime())))
                  #      if self.room.ZombieTimer:
                   #             try:
                    #                self.room.ZombieTimer.cancel()
                     #           except:
                      #              self.room.ZombieTimer=None							
                if self.room.currentWorld == 555:
                        shamanCode = 0
                        self.shopfraises += 100
                        self.shopcheese += 100
                        self.sendData("\x06" + "\x14",["<font color='#FF3E96'>Atenção <font color='#00FF7F'>Evento Carnaval Esta No Ar para Ganhar Muitos Itens , especiais , durante a partida você pode soltar confete!"])
                        self.sendData("\x1A" + "\x04",["<J>Você recebeu 1000 queijos e 1000 morangos!"])
                        self.libCn = False
                        self.sendMsgDuck = False        
                        self.canMeep = True
                        self.look = "3;56,6,7,11,0,0,0,1,0" #colocar o look aqui
                        self.look = self.getDefaultLook()
                        self.sendData("\x08\x27", None, True)
                        self.titleList = self.titleList+["253"]
                        self.sendUnlockedTitle(self.playerCode, "253")
                        self.sendData("\x1A" + "\x0C",["http://dc341.4shared.com/img/1498579405/9fb01be1/dlink__2Fdownload_2FUY5m0f-g_3Ftsid_3D20130530-22429-1e97b290/preview.mp3"])												
                        self.enableKey(32)
                        self.room.sendAllBin("\x05\x2C"+"\x00\x02")
                        self.room.sendAllBin("\x05\x2C"+"\x00\x03")
                        self.room.sendAllBin("\x05\x2C"+"\x00\x04")		
                        self.room.sendAllBin("\x05\x2C"+"\x00\x05")
                        self.room.sendAllBin("\x05\x2C"+"\x00\x07")						
                if str(self.room.ISCM) == "9991":
                        shamanCode = 0
                        self.canMeep = True
                        self.sendData("\x08\x27", None, True)						
                elif str(self.room.ISCM) == "777":
                        self.canMeep = True
                        self.sendData("\x08\x27", None, True)
                else:
                        if self.room.ZombieTimer:
                                try:
                                        self.room.ZombieTimer.cancel()
                                except:
                                        self.room.ZombieTimer=None

                        

                if self.room.currentWorld == 800:
                        self.sendShamanCode(self.playerCode)
                        self.isShaman = True

                if self.room.currentWorld in [108, 109]:
                        self.catchTheCheeseNoShaman(shamanCode)
                elif self.room.currentWorld in [110, 111, 112, 113, 114]:
                        self.catchTheCheeseShaman(shamanCode)
                else:
                        if self.room.isDoubleMap:
                                self.sendDoubleShamanCode(shamanCode, shamanCode2)
                        else:
                                self.sendShamanCode(shamanCode)
								
                if not self.room.bulut1 == 0:
                        self.room.bulut1 = 0
                if not self.room.bulut2 == 0:
                        self.room.bulut2 = 0
                if not self.room.arkadaslik2 == 0:
                        self.room.arkadaslik2 = 0
                if not self.room.arkadaslik1 == 0:
                        self.room.arkadaslik1 = 0

                if self.room.currentWorld in range(200,210+1):
                        self.room.never20secTimer = True
                        self.sendData("\x1B" + "\x0A", "", True)

                if shamanCode == self.playerCode:
                        self.isShaman = True
                if self.room.isDoubleMap:
                        if shamanCode2 == self.playerCode:
                                self.isShaman = True							

                if self.room.isSurvivor: 
                        if self.isShaman:
                                self.canMeep = True
                                self.sendData("\x08\x27", None, True)
								
                elif self.room.isRalute:
                        self.libCn = True				
                        self.rebootTimer = reactor.callLater(9, self.sendRalutehroom)
                        self.rebootTimer = reactor.callLater(25, self.sendRaluteativecannonroom)
                        self.room.ZombieTimer = reactor.callLater(30, self.room.goZombified)
                        self.rebootTimer = reactor.callLater(40, self.sendVirarCroom)
						
                elif self.room.is499969:
                        npcid = random.randrange(1, 1000000000)
                        npcid = 0-npcid                               
                        self.room.sendAll("\x15\x15", [npcid, "Elise", "16;0,0,0,0,0,0,0", 56, 148, "1", "0"])						
								
                elif self.room.isBaffbotffa:
                        self.sendMsgDuck = True
                        self.libCn = True
                        if self.isSyncroniser:
                                x = random.randrange(1, 800)
			        y = random.randrange(1, 400)
			        npcid = random.randrange(1, 1000000000)
		                npcid = 0-npcid
                        self.rebootTimer = reactor.callLater(7, self.sendTresroom)
                        self.rebootTimer = reactor.callLater(8, self.sendDoisroom)
                        self.rebootTimer = reactor.callLater(9, self.sendUmroom)
                        self.rebootTimer = reactor.callLater(10, self.sendGoroom)
                elif self.room.isBallonRoom:
                        self.sendMsgDuck = True
                        self.libCn = True
                        if self.isSyncroniser:
                                x = random.randrange(1, 800)
			        y = random.randrange(1, 400)
			        npcid = random.randrange(1, 1000000000)
		                npcid = 0-npcid
                        self.rebootTimer = reactor.callLater(1, self.sendTresroom)
                        self.rebootTimer = reactor.callLater(2, self.sendDoisroom)
                        self.rebootTimer = reactor.callLater(3, self.sendUmroom)
                        self.rebootTimer = reactor.callLater(4, self.sendGoroom)						
						
                elif self.room.isTestingRoom:
                        self.sendMsgDuck = True
                        self.libCn = True
                        if self.isSyncroniser:
                                x = random.randrange(1, 800)
			        y = random.randrange(1, 400)
			        npcid = random.randrange(1, 1000000000)
		                npcid = 0-npcid
                        self.rebootTimer = reactor.callLater(7, self.sendTresroom)
                        self.rebootTimer = reactor.callLater(8, self.sendDoisroom)
                        self.rebootTimer = reactor.callLater(9, self.sendUmroom)
                        self.rebootTimer = reactor.callLater(10, self.sendGoroom)						
						
                if self.room.isMinigame:
                        self.room.minigame.event_newround(self)	

                if self.room.currentWorld == 555:
						self.enableKey(32)				

                if self.room.isSpgame: 
                        self.enableKey(9) or self.enableKey(32)
                        self.sendMsgDuck = True
                        self.libCn = True
                        if self.isSyncroniser:
                                x = random.randrange(1, 800)
			        y = random.randrange(1, 400)
			        npcid = random.randrange(1, 1000000000)
		                npcid = 0-npcid
                        self.rebootTimer = reactor.callLater(3, self.sendTresroom)
                        self.rebootTimer = reactor.callLater(4, self.sendDoisroom)
                        self.rebootTimer = reactor.callLater(5, self.sendUmroom)
                        self.rebootTimer = reactor.callLater(6, self.sendGoroom)	

                elif self.room.isRatapult:
                        self.libCn = False
                        if self.isSyncroniser:
                                x = random.randrange(1, 800)
                                y = random.randrange(1, 400)
                                npcid = random.randrange(1, 1000000000)
                                npcid = 0-npcid
                        self.rebootTimer = reactor.callLater(4, self.sendTresssroom)
                        self.rebootTimer = reactor.callLater(5, self.sendDoisssroom)
                        self.rebootTimer = reactor.callLater(6, self.sendUmmmroom)
                        self.rebootTimer = reactor.callLater(7, self.sendGooratapult)

                                

                syncroniserCode = self.room.getSyncroniserCode()	

                if self.room.isMusic:
                        message = "<VP>Só os shamans tem direitos na sala, eles podem executar as músicas!<R><BR>Para ver a lista de músicas digite:<BV> !list | !stop (pausa as músicas)"
                        self.sendMessage(message)						
						
                if self.room.isSharpie:
                        self.enableKey(32)
                        message = "<R>Os Ratos Que Estão Voando Não São Hacker's!<BV> Pressione Espaço Para Voar!"
                        self.sendMessage(message)	
                if self.room.isBallonRoom:
                        self.enableKey(32)
                        message = "<R>Bem vindo a sala BalloRoom"
                        self.sendMessage(message)						
                   

                syncroniserCode = self.room.getSyncroniserCode()	
                if self.room.isFootball:
                        self.enableKey(9)
                        self.enableKey(40)
                        self.isRed = False
                        self.isBlue = False
                        self.isAllowed = True
                        self.movePlayer(str(self.username), 157, -205, False, 0, 0, False)				
                if self.room.sSync:
                        self.sendSynchroniser(syncroniserCode, True)
                        if syncroniserCode == self.playerCode:
                                self.isSyncroniser = True

                if self.room.eSync:
                        self.sendSynchroniser(self.playerCode, True)
						
                if self.room.isHalloween:
                    self.sendHealth(4)
                    if self.room.halloweenMap1:
                        if not self.room.isHalloweenSend:
                            self.room.isHalloweenSend = True
                            self.room.worldHalloweenTime = reactor.callLater(1, self.room.sendMonterToMap, 1)
                            self.room.MoveMobilViaSync(1)
                
                    if self.room.halloweenMap2:
                        if not self.room.isHalloweenSend:
                            self.room.worldHalloweenTime = reactor.callLater(1, self.room.sendMonterToMap, 2)
                            self.room.MoveMobilViaSync(2)
                
                    if self.room.halloweenMap3:
                        if not self.room.isHalloweenSend:
                            self.room.isHalloweenSend = True
                            self.room.worldHalloweenTime = reactor.callLater(1, self.room.sendMonterToMap, 3)
                            self.room.MoveMobilViaSync(3)
                            self.room.sendStormToMap3()	
                    if self.room.halloweenMap4:
                        self.sendHealth(8)					
                        if not self.room.isHalloweenSend:
                            self.room.worldHalloweenTime = reactor.callLater(1, self.room.sendMonterToMap, 4)
                            self.room.MoveMobilViaSync(4)							

                if self.room.isCurrentlyPlayingRoom:
                        self.sendNoMapStartTimer()
                elif self.room.isSandbox:
                        self.sendNoMapStartTimer()
                        self.isDead=False
                        #self.room.sendAllOthers(self, "\x08" + "\x08", [self.getPlayerData(), "1"])
                        #self.sendData("\x08" + "\x08",[self.getPlayerData(), "0"])
                        self.room.sendAll("\x08" + "\x08",[self.getPlayerData()])
                elif self.room.isEditeur:
                        self.sendNoMapStartTimer()
                elif self.room.isBootcamp:
                        self.sendNoMapStartTimer()
                elif self.room.name.startswith(self.Langue + "_" + "\x03[Totem] "):
                        self.sendNoMapStartTimer()
                elif self.room.name.startswith(self.Langue + "_" + "\x03[Tutorial] "):
                        self.sendNoMapStartTimer()
                else:
                        self.mapStartTimer()

                if self.room.autoRespawn or self.room.isTribehouseMap:
                        self.playerStartTime = getTime()
                if self.room.isTotemEditeur:
                        self.initTotemEditor()

                if self.room.isDefilante:
                        if self.isSyncroniser:
                                self.room.defilanteRound += 1
                                if self.room.defilanteRound == 11:
                                        self.room.defilanteRound = 1
                                print 'Defilante Round: '+repr(self.room.defilanteRound)

                        pcode = self.room.getHighestShaman()
                        if self.room.defilanteRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 6:
                                self.sendClientBin("\x05\x01\x05", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 7:
                                self.sendClientBin("\x05\x01\x06", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 8:
                                self.sendClientBin("\x05\x01\x07", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 9:
                                self.sendClientBin("\x05\x01\x08", struct.pack("!i", int(pcode)))
                        elif self.room.defilanteRound == 10:
                                self.sendClientBin("\x05\x01\x09", struct.pack("!i", int(pcode)))

                        #print 'Defilante Round: '+repr(self.room.defilanteRound)

                        if self.room.defilanteRound == 1:
                                self.score = 0
                if self.room.isBaffbotffa:
                        if self.isSyncroniser:
                                self.room.BaffbotffaRound += 1
                                if self.room.BaffbotffaRound == 11:
                                        self.room.BaffbotffaRound = 1
                                print 'Baffbotffa Round: '+repr(self.room.BaffbotffaRound)

                        pcode = self.room.getHighestShaman()
                        if self.room.BaffbotffaRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 6:
                                self.sendClientBin("\x05\x01\x05", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 7:
                                self.sendClientBin("\x05\x01\x06", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 8:
                                self.sendClientBin("\x05\x01\x07", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 9:
                                self.sendClientBin("\x05\x01\x08", struct.pack("!i", int(pcode)))
                        elif self.room.BaffbotffaRound == 10:
                                self.sendClientBin("\x05\x01\x09", struct.pack("!i", int(pcode)))

                        #print 'Defilante Round: '+repr(self.room.defilanteRound)

                        if self.room.BaffbotffaRound == 1:
                                self.score = 0	
								
                if self.room.isRalute:
                        if self.isSyncroniser:
                                self.room.RaluteRound += 1
                                if self.room.RaluteRound == 11:
                                        self.room.RaluteRound = 1
                                print 'Ralute Round: '+repr(self.room.RaluteRound)

                        pcode = self.room.getHighestShaman()
                        if self.room.RaluteRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 6:
                                self.sendClientBin("\x05\x01\x05", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 7:
                                self.sendClientBin("\x05\x01\x06", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 8:
                                self.sendClientBin("\x05\x01\x07", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 9:
                                self.sendClientBin("\x05\x01\x08", struct.pack("!i", int(pcode)))
                        elif self.room.RaluteRound == 10:
                                self.sendClientBin("\x05\x01\x09", struct.pack("!i", int(pcode)))

                        #print 'Defilante Round: '+repr(self.room.defilanteRound)

                        if self.room.RaluteRound == 1:
                                self.score = 0									

                elif self.room.isRacingRoom:
                        if self.isSyncroniser:
                                self.room.racingRound += 1
                                if self.room.racingRound == 11:
                                        self.room.racingRound = 1
                                print 'Racing Round: '+repr(self.room.defilanteRound)

                        pcode = self.room.getHighestShaman()
                        if self.room.racingRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 6:
                                self.sendClientBin("\x05\x01\x05", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 7:
                                self.sendClientBin("\x05\x01\x06", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 8:
                                self.sendClientBin("\x05\x01\x07", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 9:
                                self.sendClientBin("\x05\x01\x08", struct.pack("!i", int(pcode)))
                        elif self.room.racingRound == 10:
                                self.sendClientBin("\x05\x01\x09", struct.pack("!i", int(pcode)))

                                #print 'Racing Round: '+repr(self.room.defilanteRound)

                        if self.room.racingRound == 1:
                                self.score = 0
								
                if self.room.currentWorld == 560:				
                        day = datetime.today()
                        self.room.sendCalendar(str(day)[8:-16])


                if self.isHidden:
                        self.isHidden = True
                        self.sendPlayerDisconnect(self.playerCode)
															
                if self.isCupido:
                        self.isCupido = True
                        self.room.sendAllBin("\x1A\x0B", struct.pack("!i", int(self.playerCode)))
						
                if self.isCornonome:
                        self.isCornonome = True
                        furnonome = "FF0000"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)

                if self.isCornonomez:
                        self.isCornonomez = True
                        furnonome = "0D00FF"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
                        
                if self.isCornonome2:
                        self.isCornonome = True
                        furnonome = "D968C8"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
						
                if self.isCoramarelo:
                        self.isCoramarelo = True
                        furnonome = "ffd200"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
						
                if self.isSpeed:
                        self.isSpeed = True
                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", 100))
                        self.setNameColor(self.playerCode, "010101")

                if self.istimever:
                        self.istimever = True
                        self.setNameColor(self.playerCode, "c16464")
                        
                if self.istimeama:
                        self.istimever = True
                        self.setNameColor(self.playerCode, "ffd200")
                if self.isnomelar :
                        self.isnomelar = True
                        furnonome = "FF7D00"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						
                if self.isNamecor:
                        self.isNamecor = True
                        furnonome = "010101"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)  
                if self.isnomebra:
                        self.isnomebra = True
                        furnonome = "ffffff"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						

                if self.isCornonomez2:
                        self.isCornonomez = True
                        furnonome = "D968C8"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)
						
                if self.isnomeam:
                        self.isnomeam = True
                        furnonome = "ffd200"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						
                if self.isnomever:
                        self.isnomever = True
                        furnonome = "c16464"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)							
                if self.isnomecin:
                        self.isnomecin = True
                        furnonome = "7a7a7a"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						
                if self.isnomeverd:
                        self.isnomeverd = True	
                        furnonome = "26c954"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						
                if self.isnomeroxo:
                        self.isnomeroxo = True
                        furnonome = "9947bf"																
                        hexcolor = struct.pack('!i', int(furnonome, 16))
                        self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(self.playerCode))+hexcolor)						
                if self.isAsasad:
                        self.isAsasad = True
                        self.room.sendAllBin("\x05\x01\x09", struct.pack("!i", int(self.playerCode)))
						
                elif self.room.isTribewarRoom:
                        if self.isSyncroniser:
                                self.room.tribewarRound += 1
                                if self.room.tribewarRound == 6:
                                        self.room.tribewarRound = 1

                        pcode = self.room.getHighestShaman()
                        if self.room.tribewarRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.tribewarRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.tribewarRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.tribewarRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.tribewarRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))
                                self.room.sendAll("\x1A" + "\x04", ["<J>• Nova partida iniciada <VP>"] + [self.TribeName])								

                                #print 'Racing Round: '+repr(self.room.defilanteRound)

                        if self.room.tribewarRound == 1:
                                self.score = 0							
						
                elif self.room.isTestingRoom:
                        if self.isSyncroniser:
                                self.room.testingRound += 1
                                if self.room.testingRound == 6:
                                        self.room.testingRound = 1

                        pcode = self.room.getHighestShaman()
                        if self.room.testingRound == 1:
                                self.sendClientBin("\x05\x01\x00", struct.pack("!i", int(pcode)))
                        elif self.room.testingRound == 2:
                                self.sendClientBin("\x05\x01\x01", struct.pack("!i", int(pcode)))
                        elif self.room.testingRound == 3:
                                self.sendClientBin("\x05\x01\x02", struct.pack("!i", int(pcode)))
                        elif self.room.testingRound == 4:
                                self.sendClientBin("\x05\x01\x03", struct.pack("!i", int(pcode)))
                        elif self.room.testingRound == 5:
                                self.sendClientBin("\x05\x01\x04", struct.pack("!i", int(pcode)))

                                #print 'Racing Round: '+repr(self.room.defilanteRound)

                        if self.room.testingRound == 1:
                                self.score = 0

                        if self.room.isTotemEditeur:
                                self.initTotemEditor()        

        def startValidate(self, mapxml):
                self.room.isValidate=1
                self.resetPlay()
                self.sendGiftAmount(self.giftCount)
                self.room.ISCM = -1
                mapname="-"
                perma="0"
                self.sendNewPartyMapEditeur(mapxml, mapname, perma)
                self.sendTime(120)
                self.sendPlayerList()

                shamanCode = self.room.getShamanCode()
                self.sendShamanCode(shamanCode)

                if shamanCode == self.playerCode:
                        self.isShaman = True

                syncroniserCode = self.room.getSyncroniserCode()
                self.sendSynchroniser(syncroniserCode, True)
                if syncroniserCode == self.playerCode:
                        self.isSyncroniser = True

        def updateSelfSQL(self):
                if self.privilegeLevel==0:
                        pass
                else:
                        self.server.updatePlayerStats(self.username, self.roundCount, self.micesaves, self.shamancheese, self.firstcount, self.cheesecount, self.shopcheese, self.shopitems, self.look, self.ShamanTitleList, self.CheeseTitleList, self.FirstTitleList, self.titleList, self.hardMode, self.hardModeSaves, self.HardModeTitleList, self.ShopTitleList, self.bootcampcount, self.BootcampTitleList, self.shopfraises, self.giftCount, self.recvGiftCount, self.sendGiftCount, self.shopcoins, self.becericount, self.becerilerim,self.levelcount,self.nextlevel)

        def updateLanguageUsuario(self, player, newlanguage):
                print repr(newlanguage)
                self.numlanguage = newlanguage
                if newlanguage == "\x03": binself = "br"
                elif newlanguage == "\x04": binself = "es"
                else: binself = "en"
                self.Langue = binself
                print "Idioma do Jogador Atualizado ("+binself+")"
                pass
        def login(self, username, passwordHash, startRoom):
                if username=="":
                        username="Souris"
                if startRoom == "1":
                        startRoom = "1"
                if self.server.getIPPermaBan(self.address[0]):
                        self.transport.loseConnection()
                        self.isIPban = True
                elif self.address[0] in self.server.tempIPBanList:
                        self.transport.loseConnection()
                        self.isIPban = True
                else:
                        self.isIPban = False

                if passwordHash == "":
                        if len(username)>15:
                                priv = -1
                                self.transport.loseConnection()
                        else:
                                username = "*"+username
                                priv = 0
                                username = self.server.checkAlreadyExistingGuest(username)
                                startRoom = "\x03[Tutorial] "+username
                else:
                        username=username.lower()
                        username=username.capitalize()
                        #if len(username)>12:
                        #       username=""
                        #       self.transport.loseConnection()
                        priv = self.server.authenticate(username, passwordHash)

                if priv != 0:
                        username=username.lower()
                        username=username.capitalize()

                dbcur.execute('select * from userpermaban where name = ?', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        pass
                else:
                        if priv!=-1:
                                priv = -1
                                print str(datetime.today())+" "+"["+self.address[0]+" - "+username+"] Usuario Permanentemente Banido Tentou Se Logar"
                                self.sendPermaBan()
                                self.transport.loseConnection()

                if not username.startswith("*"):
                        self.TempBan=self.server.checkTempBan(username)
                if self.TempBan:
                        if priv!=-1:
                                timee=int(self.timestampCalc(self.server.getTempBanInfo(username)[1])[2])
                                if timee<=0:
                                        self.TempBan=False
                                        self.server.removeTempBan(username)
                                else:
                                        self.sendPlayerBanLogin(timee, self.server.getTempBanInfo(username)[2])
                                        priv = -1
                                        self.transport.loseConnection()
                #if username in self.server.tempAccountBanList:
                #       if priv!=-1:
                #               priv = -1
                #               self.transport.loseConnection()

                if self.isIPban!=False:
                        priv = -1
                if self.sentinelle:
                        priv = -1
                if self.isinit:
                        priv = -1
                if self.loadercheck == False:
                        priv = -1
                if self.logonsuccess:
                        priv = -1
                #if self.wrongPasswordAttempts>=10:
                #       ##logging.info("Kick - Too many wrong passwords - %s" % self.address[0])
                #       self.transport.loseConnection()
                if self.wrongPasswordAttempts>=4:
                        self.sendData("\x1A" + "\x03", [""])
                        priv = -1
                        #self.sendData("\x1A" + "\x12",["0", "Too many incorrect password attempts"])
                        self.sendModMessageChannel("Servidor", "Kick - Tentativa de Força Bruta (Password) - %s" % self.address[0])
                        ##logging.info("Kick - Too many wrong passwords - %s" % self.address[0])
                        self.server.tempBanIPExact(self.address[0], 120)
                        self.transport.loseConnection()

                if priv == -1:
                        self.FreezePlayerData(5)
                        reactor.callLater(5, self.sendData, "\x1A" + "\x03", [""])
                        #self.sendData("\x1A" + "\x03", [""])
                        self.wrongPasswordAttempts+=1
                else:
                        alreadyconnect = self.server.checkAlreadyConnectedAccount(username)
                        if alreadyconnect == True:
                                self.sendData("\x1A" + "\x03", ["", ""])
                        else:
                                self.logonsuccess = True
                                self.username = username
                                self.playerCode = self.server.generatePlayerCode()
                                self.privilegeLevel = priv

                                dbcur.execute('select * from LoginLog where name = ? and ip = ?', [username, self.address[0]])
                                rrf = dbcur.fetchone()
                                if rrf is None:
                                        dbcur.execute("insert into LoginLog (Name, IP) values (?, ?)", (username, self.address[0]))
                                else:
                                        pass

                                AllPlayerStats=self.server.getAllPlayerData(username)
                                self.hardMode=AllPlayerStats[24]
                                self.hardModeSaves=AllPlayerStats[25]
                                self.EmailAddress=AllPlayerStats[27]
                                self.ValidatedEmail=self.server.str2bool(AllPlayerStats[28])
                                if self.EmailAddress=="None":
                                        self.EmailAddress=""
                                        self.ValidatedEmail=False
                                if self.ValidatedEmail:
                                        self.sendEmailValidated()
                        
                                self.titleNumber = self.server.getCurrentTitle(username)
                                self.roundCount = self.server.getRoundsCount(username)
                                self.tribe = self.server.getTribeName(username)
                                if self.tribe:
                                        UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                        TribeData       =self.server.getTribeData(UserTribeInfo[1])
                                        self.TribeCode  = TribeData[0]
                                        self.TribeName  = TribeData[1]
                                        self.TribeFromage = TribeData[2]
                                        self.TribeMessage = TribeData[3]
                                        self.TribeInfo  = TribeData[4].split("|")
                                        self.TribeRank  = UserTribeInfo[2]
                                        self.TribeHouse = TribeData[5]
                                        self.isInTribe  = True
                                self.micesaves = self.server.getSavesCount(username)
                                self.shamancheese = self.server.getShamanCheeseCount(username)
                                self.firstcount = self.server.getFirstCount(username)
                                self.cheesecount = self.server.getCheeseCount(username)
                                self.bootcampcount = self.server.getBootcampCount(username)							
                                self.shopcheese = self.server.getShopCheese(username)
                                self.shopcoins = self.server.getShopCoins(username)
                                self.shopfraises = self.server.getShopFraises(username)
                                self.shopitems = self.server.getUserShop(username)
                                self.levelcount = self.server.getLevelCount(username)
                                self.nextlevel = self.server.getNextLevel(username)
                                self.banhours = self.server.getTotalBanHours(username)
                                self.friendsList = self.server.getUserFriends(username)
                                self.becericount = self.server.getBeceriCount(username)
                                self.becerilerim = self.server.getBecerilerim(username)
                                self.look = self.server.getUserLook(username)
                                self.friendsList = self.friendsList.strip('[]').replace(" ","").replace("\"","").replace(","," ")
                                if self.friendsList == "":
                                        self.friendsList = []
                                else:
                                        self.friendsList = self.friendsList.split(" ")

                                isuserbot = int(self.server.getUserBot(username))
                                if isuserbot == 0:
                                        self.isUserBot = False
                                elif isuserbot == 1:
                                        self.isUserBot = True
                                else:
                                        self.isUserBot = False


                                ismapcrew = int(self.server.getMapcrew(username))
                                if ismapcrew == 0:
                                        self.isMapCrew = False
                                elif ismapcrew == 1:
                                        self.isMapCrew = True
                                else:
                                        self.isMapCrew = False
                                
                                titlelists = self.server.getTitleLists(username)
                                self.CheeseTitleList = str(titlelists[0].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.FirstTitleList = str(titlelists[1].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.ShamanTitleList = str(titlelists[2].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.ShopTitleList = str(titlelists[3].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.GiftTitleList = str(titlelists[4].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.HardModeTitleList = str(titlelists[5].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.BootcampTitleList = str(titlelists[6].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.checkAndRebuildTitleList("cheese")
                                self.checkAndRebuildTitleList("first")
                                self.checkAndRebuildTitleList("shaman")
                                self.checkAndRebuildTitleList("shop")
                                self.checkAndRebuildTitleList("hardmode")
                                self.checkAndRebuildTitleList("bootcamp")
                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                if self.privilegeLevel>=10:
                                        self.titleList = self.titleList+["440","442","444","447","448","445","446","201"]
                                self.titleList = filter(None, self.titleList)

                                self.sendTitleList()
                                self.modmute=self.server.checkModMute(self.username)

                                if self.server.getTotemData(self.username) != -1:
                                        totemvalues=self.server.getTotemData(self.username)
                                        self.STotem=[totemvalues[1], totemvalues[2]]

                                self.giftCount = 0
                                self.recvGiftCount = 0
                                self.sendGiftCount = 0

                                if not self.friendsList:
                                        pass
                                else:
                                        sendfriendsList = self.friendsList[:]
                                        for position, name in enumerate(sendfriendsList):
                                                if self.server.checkAlreadyConnectedAccount(name):
                                                        if self.server.friendsListCheck(name, self.username):
                                                                room = self.server.getFindPlayerRoom(name)
                                                        else:
                                                                room = "-"
                                                        sendfriendsList[position]=name+"\x02"+room
                                        self.sendData("\x08" + "\x0C",[8]+sendfriendsList)

                                for i, v in enumerate(self.friendsList):
                                        self.server.sendFriendConnected(v, self.username)

                                if int(self.banhours)>=1:
                                        self.sendBanWarning(self.banhours)

                                if self.isInTribe:
                                        self.sendTribeConnected(self.username)
                                        self.sendTribeGreeting()

                                self.sendBecerileriGuncelle()
                                #self.sendLevelleriGuncelle()

                                self.sendPlayerLoginData()
                                self.sendData("\x14\x03", struct.pack("!iib", 603, 1376301568, 50), True)
                                if self.micesaves>=100:
                                        self.sendHardMode(self.hardMode)

                                self.color1, self.color2=self.server.mouseColorInfo(True, self.username, "")
                                if self.color1=="":
                                        self.color1="78583a"
                                if self.color2=="":
                                        if self.micesaves>=100:
                                                self.color2="fade55"
                                        else:
                                                self.color2="95d9d6"
                                
                                if passwordHash == "":
                                        ##logging.info("Authenticate %s - %s - Guest" % (self.address, username))
                                        print str(datetime.today())+" "+"Autenticado Com Sucesso! - [%s] %s - %s - Ratinho" % (self.Langue, self.address, username)
                                else:
                                        ##logging.info("Authenticate %s - %s" % (self.address, username))
                                        print str(datetime.today())+" "+"Autenticado Com Sucesso! - [%s] %s - %s" % (self.Langue, self.address, username)
                        
                                if startRoom!="":
                                        #Update 1.85
                                        self.sendData("\x07\x01" + "\x00", [], True) #Market
                                        self.sendData("\x1c\x0a" + "\x00\x00\x00\x00", [], True)
                                        self.sendData("\x1a\x1a" + "\x00", [], True)
                                        self.sendData("\x07\x02" + "\x01\x0aSZ\x00\x00\x00\x02", [], True)
                                        #END
                                        self.enterRoom(startRoom)
                                else:
                                        self.enterRoom(self.server.recommendRoom())

                                self.sendATEC()
                                #self.sendForumPacketLOG()

                                if self.Langue == 'EN' or self.Langue == 'E2': #Inglês
                                            self.sendMessage("<VP>Welcome to <font color=\"#FFFFFF\">TransforVida</font>, <ROSE>"+self.username+"<VP>!")
                                            self.sendMessage("<J>Avoid disclose on official servers, <CH>Good Game<J>.")
                                            self.sendMessage("<VP>Questions? Enter <V>/help")
                                elif self.Langue == 'FR': #Frances
                                            self.sendMessage("<VP>Bienvenue sur <font color=\"#FFFFFF\">AppleMice</font>, <ROSE>"+self.username+"<VP>!")
                                            self.sendMessage("<J>Évitez de divulguer sur les serveurs officiels, <CH>Good Game<J>.")
                                            self.sendMessage("<VP>Des questions? Tapez <V>/help")
                                elif self.Langue == 'BR' or self.Langue == 'PT': #Brasileiro or Portugal
                                            self.sendMessage("<VP>Olá "+self.username+", Você Acaba De Se Conectar ao TransforVida! <font color=\"#FFFFFF\"></font>,<ROSE><VP>!")
                                            self.sendMessage("<J> É Proibido Qualquer Tipo de Divulgação de Link's! <CH>Bom jogo<J>.")
                                            self.sendMessage("<VP>Dúvidas? Digite <V>/ajuda")
                                elif self.Langue == 'ES': #Espanhol
                                            self.sendMessage("<VP>Bienvenidos a <font color=\"#FFFFFF\">RedMice</font>, <ROSE>"+self.username+"<VP>!")
                                            self.sendMessage("<J>Evitar la divulgación en los servidores oficiales, <CH>Buen juego<J>.")
                                            self.sendMessage("<VP>¿Preguntas? Escriba <V>/ajuda")
                                else:
                                            self.sendMessage("<VP>Bem-vindo ao <font color=\"#FFFFFF\">RedMice</font>, <ROSE>"+self.username+"<VP>!")
                                            self.sendMessage("<J>Evite divulgar em servidores oficiais, <CH>Bom jogo<J>.")
                                            self.sendMessage("<VP>Dúvidas? Digite <V>/ajuda")
                                if self.privilegeLevel in [10,8,6,5,4,3]:
										self.sendData("\x1A" + "\x04", ["<font color='#C8F768'>Moderadores para ver sua lista de comandos digite:</font> <font color='#F79F68'>/modcomand</font>"])										
                                                                                self.sendModMCLogin(self.username)
                                if self.privilegeLevel==3:
                                        self.sendBotLogin(self.username)
                                        self.isBot = True
                                        
                                if self.privilegeLevel==4:
                                        self.sendArbMCLogin(self.username)
                                        self.server.getLsArb(self)
                                if self.privilegeLevel>=0:
                                        self.rebootTimer = reactor.callLater(60, self.sendAnuncio)       
                                    

                                return True

# http://code.activestate.com/recipes/510399/
# http://code.activestate.com/recipes/466341/
#ByteToHex converts byte string "\xFF\xFE\x00\x01" to the string "FF FE 00 01"
#HexToByte converts string "FF FE 00 01" to the byte string "\xFF\xFE\x00\x01"

        def safe_unicode(self, obj, *args):
                try:
                        return unicode(obj, *args)
                except UnicodeDecodeError:
                        ascii_text = str(obj).encode('string_escape')
                        return unicode(ascii_text)
        def safe_str(self, obj):
                try:
                        return str(obj)
                except UnicodeEncodeError:
                        return unicode(obj).encode('unicode_escape')
        def ByteToHex(self, byteStr):
                return ''.join([ "%02X " % ord(x) for x in byteStr]).strip()
        def HexToByte(self, hexStr):
                bytes = []
                hexStr = ''.join(hexStr.split(" "))
                for i in range(0, len(hexStr), 2):
                        bytes.append(chr(int(hexStr[i:i+2], 16)))
                return ''.join(bytes)
        def dec2hex(self, n):
                return "%X" % n
        def hex2dec(self, s):
                return int(s, 16)
        def unicodeStringToHex(self, src):
                result = ""
                for i in xrange(0, len(src)):
                   unichars = src[i:i+1]
                   hexcode = ' '.join(["%02x" % ord(x) for x in unichars])
                   result=result+hexcode
                return result
        def checkValidXML(self, xmlString):
                if re.search("ENTITY", xmlString):
                        return False
                elif re.search("<html>", xmlString):
                        return False
                else:
                        try:
                                parser = xml.parsers.expat.ParserCreate()
                                parser.Parse(xmlString)
                                return True
                        except Exception, e:
                                return False
        def checkUnlockShopTitle(self):
                if self.privilegeLevel != 0:
                        #print self.getShopLength()
                        if self.getShopLength() in self.shopTitleCheckList:
                                unlockedtitle=self.shopTitleDictionary[self.getShopLength()]
                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                if self.privilegeLevel>=10:
                                        self.titleList = self.titleList+["440","442","444","201","445","446","447","448"]
                                self.titleList = filter(None, self.titleList)
                                self.sendTitleList()
        def getShopLength(self, customList = None):
                if customList:
                        if customList.strip()=="":
                                return 0
                        else:
                                return len(customList.split(","))
                else:
                        if self.shopitems.strip()=="":
                                return 0
                        else:
                                return len(self.shopitems.split(","))
        def checkInShop(self, item):
                if self.shopitems.strip()=="":
                        return False
                else:
                        shopitems=self.shopitems.split(",")
                        for shopitem in shopitems:
                                if "_" in shopitem:
                                        shopitem, custom = shopitem.split("_")
                                else:
                                        shopitem = shopitem
                                        custom = ""
                                if str(item) == str(shopitem):
                                        return True
                        return False
                        """
                        if str(item) in shopitems or int(item) in shopitems:
                                return True
                        else:
                                return False
                        """
        def getItemCustomization(self, item):
                if self.shopitems.strip()=="":
                        return ""
                else:
                        shopitems=self.shopitems.split(",")
                        for shopitem in shopitems:
                                if "_" in shopitem:
                                        shopitem, custom = shopitem.split("_")
                                else:
                                        shopitem = shopitem
                                        custom = ""
                                if str(item) == str(shopitem):
                                        if custom == "":
                                                return ""
                                        else:
                                                return "_" + custom
                        return False
						
        def checkInTitleList(self, title):
            if str(title) in str(self.titleList):
                return True
            else:
                return False
        
            return False					
					
        def checkAndRebuildTitleList(self, titleList):
                if titleList=="shop":
                        rebuild=False
                        x=self.getShopLength()
                        while x>0:
                                if str(x) in self.shopTitleCheckList or int(x) in self.shopTitleCheckList:
                                        if not str(self.shopTitleDictionary[x]) in self.ShopTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING SHOP"
                                x=self.getShopLength()
                                y=0
                                self.ShopTitleList=[]
                                while y<=x:
                                        if y in self.shopTitleCheckList:
                                                title=self.shopTitleDictionary[y]
                                                self.ShopTitleList=self.ShopTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="cheese":
                        rebuild=False
                        x=int(self.cheesecount)
                        while x>0:
                                if str(x) in self.cheeseTitleCheckList or int(x) in self.cheeseTitleCheckList:
                                        if not str(self.cheeseTitleDictionary[x]) in self.CheeseTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING CHEESE"
                                x=int(self.cheesecount)
                                y=0
                                self.CheeseTitleList=[]
                                while y<=x:
                                        if y in self.cheeseTitleCheckList:
                                                title=self.cheeseTitleDictionary[y]
                                                self.CheeseTitleList=self.CheeseTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="first":
                        rebuild=False
                        x=int(self.firstcount)
                        while x>0:
                                if str(x) in self.firstTitleCheckList or int(x) in self.firstTitleCheckList:
                                        if not str(self.firstTitleDictionary[x]) in self.FirstTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING FIRST"
                                x=int(self.firstcount)
                                y=0
                                self.FirstTitleList=[]
                                while y<=x:
                                        if y in self.firstTitleCheckList:
                                                title=self.firstTitleDictionary[y]
                                                self.FirstTitleList=self.FirstTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="shaman":
                        rebuild=False
                        x=int(self.micesaves)
                        while x>0:
                                if str(x) in self.shamanTitleCheckList or int(x) in self.shamanTitleCheckList:
                                        if not str(self.shamanTitleDictionary[x]) in self.ShamanTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING SHAMAN"
                                x=int(self.micesaves)
                                y=0
                                self.ShamanTitleList=[]
                                while y<=x:
                                        if y in self.shamanTitleCheckList:
                                                title=self.shamanTitleDictionary[y]
                                                self.ShamanTitleList=self.ShamanTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="hardmode":
                        rebuild=False
                        x=int(self.hardModeSaves)
                        while x>0:
                                if str(x) in self.hardShamTitleCheckList or int(x) in self.hardShamTitleCheckList:
                                        if not str(self.hardShamTitleDictionary[x]) in self.HardModeTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING HARDMODE"
                                x=int(self.hardModeSaves)
                                y=0
                                self.HardModeTitleList=[]
                                while y<=x:
                                        if y in self.hardShamTitleCheckList:
                                                title=self.hardShamTitleDictionary[y]
                                                self.HardModeTitleList=self.HardModeTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="bootcamp":
                        rebuild=False
                        x=int(self.bootcampcount)
                        while x>0:
                                if str(x) in self.bootcampTitleCheckList or int(x) in self.bootcampTitleCheckList:
                                        if not str(self.bootcampTitleDictionary[x]) in self.BootcampTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING BOOTCAMP"
                                x=int(self.bootcampcount)
                                y=0
                                self.BootcampTitleList=[]
                                while y<=x:
                                        if y in self.bootcampTitleCheckList:
                                                title=self.bootcampTitleDictionary[y]
                                                self.BootcampTitleList=self.BootcampTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
        def returnFutureTime(self, hours):
                return str(getTime()+(int(hours)*60*60))
        def timestampCalc(self, endTime):
                #returns [0:00:00, Total Seconds, Time left in hours]
                startTime=str(getTime())
                startTime=datetime.fromtimestamp(float(startTime))
                endTime=datetime.fromtimestamp(float(endTime))
                result=endTime-startTime
                seconds= (result.microseconds + (result.seconds + result.days * 24 * 3600) * 10**6) / float(10**6)
                hours=int(int(seconds)/3600)+1
                if int(seconds)==0:
                        return [result, seconds, 0]
                elif int(seconds)>=1 and int(seconds)<=3600:
                        return [result, seconds, 1]
                elif hours>24:
                        return 24
                else:
                        return [result, seconds, hours]
        def censorMessage(self, message):
                Cmessage=re.sub("(?i)nigger", "******", message)
                Cmessage=re.sub("(?i)n!gger", "******", Cmessage)
                Cmessage=re.sub("(?i)n!gg3r", "******", Cmessage)
                Cmessage=re.sub("(?i)nigg3r", "******", Cmessage)
                Cmessage=re.sub("(?i)shit", "****", Cmessage)
                Cmessage=re.sub("(?i)sh!t", "****", Cmessage)
                Cmessage=re.sub("(?i)bitch", "*****", Cmessage)
                Cmessage=re.sub("(?i)b!tch", "*****", Cmessage)
                Cmessage=re.sub("(?i)fuck", "****", Cmessage)
                Cmessage=re.sub("(?i)cunt", "****", Cmessage)
                Cmessage=re.sub("(?i)asshole", "*******", Cmessage)
                Cmessage=re.sub("(?i)assh0le", "*******", Cmessage)
                Cmessage=re.sub("(?i)damn", "****", Cmessage)
                Cmessage=re.sub("(?i)pussy", "*****", Cmessage)
                Cmessage=re.sub("(?i)whore", "*****", Cmessage)
                Cmessage=re.sub("(?i)penis", "*****", Cmessage)
                Cmessage=re.sub("(?i)dick", "****", Cmessage)
                Cmessage=re.sub("(?i)cock", "****", Cmessage)
                Cmessage=re.sub("(?i)sex", "***", Cmessage)
                Cmessage=re.sub("(?i)boob", "****", Cmessage)
                Cmessage=re.sub("(?i)boobs", "*****", Cmessage)
                Cmessage=re.sub("(?i)boobies", "*******", Cmessage)
                Cmessage=re.sub("(?i)booby", "*****", Cmessage)
                Cmessage=re.sub("(?i)boobie", "******", Cmessage)
                Cmessage=re.sub("(?i)f\*ck", "****", Cmessage)
                Cmessage=re.sub("(?i)hoe", "***", Cmessage)
                Cmessage=re.sub("(?i)prick", "*****", Cmessage)
                Cmessage=re.sub("(?i)fck", "****", Cmessage)
                Cmessage=re.sub("(?i)pen!s", "*****", Cmessage)
                Cmessage=re.sub("(?i)qooq", "****", Cmessage)
                Cmessage=re.sub("(?i)sqooq", "*****", Cmessage)
                Cmessage=re.sub("(?i)gay", "happy", Cmessage)
                Cmessage=re.sub("(?i)horny", "*****", Cmessage)
                Cmessage=re.sub("(?i)horney", "******", Cmessage)
                Cmessage=re.sub("(?i)cum", "come", Cmessage)
                Cmessage=re.sub("(?i)cumming", "coming", Cmessage)
                Cmessage=re.sub("(?i)jizz", "****", Cmessage)
                Cmessage=re.sub("(?i)cuming", "coming", Cmessage)
                Cmessage=re.sub("(?i)shag", "****", Cmessage)
                Cmessage=re.sub("(?i)shagging", "********", Cmessage)
                Cmessage=re.sub("(?i)shaging", "*******", Cmessage)
                Cmessage=re.sub("(?i)humping", "*******", Cmessage)
                Cmessage=re.sub("(?i)humpin", "******", Cmessage)
                Cmessage=re.sub("(?i)hump", "****", Cmessage)
                Cmessage=re.sub("(?i)hell", "****", Cmessage)
                Cmessage=re.sub("(?i)fag", "***", Cmessage)
                Cmessage=re.sub("(?i)faggot", "******", Cmessage)
                Cmessage=re.sub("(?i)piss", "peepee", Cmessage)
                Cmessage=re.sub("(?i)crap", "poopy", Cmessage)
                Cmessage=re.sub("(?i)motherfucker", "************", Cmessage)
                Cmessage=re.sub("(?i)tit", "***", Cmessage)
                Cmessage=re.sub("(?i)tits", "****", Cmessage)
                Cmessage=re.sub("(?i)fap", "***", Cmessage)
                Cmessage=re.sub("(?i)fapping", "*******", Cmessage)
                Cmessage=re.sub("(?i)masturbate", "**********", Cmessage)
                Cmessage=re.sub("(?i)fack", "****", Cmessage)
                Cmessage=re.sub("(?i)jack off", "**** ***", Cmessage)
                Cmessage=re.sub("(?i)jacking off", "******* ***", Cmessage)
                Cmessage=re.sub("(?i)http://", "**********", Cmessage)
                Cmessage=re.sub("(?i)www", "******", Cmessage)
                Cmessage=re.sub("(?i)transfor", "*********", Cmessage)
                return Cmessage
        def roomNameStrip(self, name, level):
                #Levels:
                #1-"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                #2-" !"#$%&amp;'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                #3-" !"#$%&amp;'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
                #4-" "$'()ABCDEFGHIJKLMNOPQRSTUVWXYZ[]abcdefghijklmnopqrstuvwxyz" - For tribe names.
                #Level 3 glitches on UTF-8 with more than 1 byte when decoded. Example, ? which is \xe8\xaf\xad becomes \x8b\xed which becomes ?í.
                name=str(name)
                result=""
                pending=False
                if level=="1":
                        level1=range(48, 57+1)+range(65, 90+1)+range(97, 122+1)
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level1:
                                        x="?"
                                result+=x
                        return result
                elif level=="2":
                        for x in name:
                                if self.hex2dec(x.encode("hex"))<32 or self.hex2dec(x.encode("hex"))>126:
                                        x="?"
                                result+=x
                        return result
                elif level=="3":
                        level3=range(32, 126+1)+range(192, 255+1)
                        name=self.HexToByte(self.unicodeStringToHex(name.decode('utf-8')))
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level3:
                                        x="?"
                                result+=x
                        return result
                elif level=="4":
                        level4=[32, 34, 36, 39, 40, 41]+range(65, 90+1)+[91, 93]+range(97, 122+1)
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level4:
                                        x=""
                                result+=x
                        return result
                else:
                        return "Error 2996: Invalid level."
        def IPCountryLookup(self, ip):
                response = urllib2.urlopen('http://api.hostip.info/get_html.php?ip=%s' % ip).read()
                m = re.search('Country: (.*)', response).group(1)
                return m
        def FreezePlayerData(self, seconds):
                if self.isFrozenTimer:
                        try:
                                self.isFrozenTimer.cancel()
                        except:
                                self.isFrozenTimer = None
                if int(seconds)==0:
                        self.isFrozen=False
                else:
                        self.isFrozen=True
                        self.isFrozenTimer=reactor.callLater(int(seconds), self.FreezePlayerData, 0)
        def parseBinaryData(self, bdata, types):
                rlist = []
                for tp in types:
                        if tp=="x":
                                pass
                        elif tp=="c":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="b":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="B":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="?":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="h":
                                rlist.append(struct.unpack("!"+tp,bdata[:2])[0])
                                bdata=bdata[:2]
                        elif tp=="H":
                                rlist.append(struct.unpack("!"+tp,bdata[:2])[0])
                                bdata=bdata[:2]
                        elif tp=="i":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="I":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="l":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="L":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="q":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="Q":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="f":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="d":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="u":
                                rlist.append(bdata[2:int(struct.unpack('!h', bdata[:2])[0])+2])
                                bdata=bdata[int(struct.unpack('!h', bdata[:2])[0])+2:]
                        else:
                                #logging.error("Failed to parse data. Invalid types specified. Types: "+str(types))
                                pass
                if len(rlist)==1:
                        return rlist[0]
                elif len(rlist)==0:
                        #logging.error("Unknown error. Types: "+str(types))
                        return "Error!"
                else:
                        return rlist


class TransformiceServer(protocol.ServerFactory):

        protocol = TransformiceClientHandler

        def __init__(self):
                self.STARTTIME=datetime.today()
                self.ServerID           = str(self.getServerSetting("ServerID"))
                self.Owner                 = str(self.getServerSetting("Owner"))
                self.Key                         = str(self.getServerSetting("Key"))
                self.POLICY               = str(self.getServerSetting("Policy"))
                self.PORT                       = str(self.getServerSetting("PolicyPorts"))
                self.LCDMT                 = str(self.getServerSetting("LCDMT"))
                self.LoaderURL     = str(self.getServerSetting("LoaderURL"))
                self.LoaderSize   = int(self.getServerSetting("LoaderSize"))
                self.ModLoaderSize   = int(self.getServerSetting("ModLoaderSize"))
                self.ClientSize   = int(self.getServerSetting("ClientSize"))
                self.ValidateLoader  = self.str2bool(self.getServerSetting("ValidateLoader"))
                self.ValidateVersion = self.str2bool(self.getServerSetting("ValidateVersion"))
                self.GetCapabilities = self.str2bool(self.getServerSetting("GetClientCapabilities"))
                self.lastPlayerCode  = int(self.getServerSetting("InitPlayerCode"))
                self.MaxBinaryLength = int(self.getServerSetting("MaxBinaryLength"))
                self.MinBinaryLength = int(self.getServerSetting("MinBinaryLength"))
                self.MaxUTFLength       = int(self.getServerSetting("MaxUTFLength"))
                self.MinUTFLength       = int(self.getServerSetting("MinUTFLength"))
                self.EditorShopCheese= int(self.getServerSetting("EditeurShopCheese"))
                self.EditeurCheese   = int(self.getServerSetting("EditeurCheese"))
                self.TribuShopCheese = int(self.getServerSetting("TribuShopCheese"))
                self.EmailServerAddr = "smtp.gmail.com"# Nome do Email SMTP (Recomendável GMAIL)
                self.EmailServerPort = "587" # Porta do Gmail padrão
                self.EmailServerName = "suportmicegratis@gmail.com" # Nome do Email SMTP (Recomendável GMAIL)
                self.EmailServerPass = "123papai" # Senha do email SMTP
                self.BaseForumURL       = str(self.getServerSetting("BaseForumURL"))
                self.BaseAvatarURL   = str(self.getServerSetting("BaseAvatarURL"))
                self.NeedsForHalloween = int(self.getServerSetting("ForHalloween"))
                self.isChrismas = bool(int(self.getServerSetting("isChrismas")))
                self.NeedToChrismas = int (self.getServerSetting("NeedsToChrismas"))
                self.LuaEnabled = bool(int(self.getServerSetting("LuaEnabled")))	

                self.NeedsCountToFirst = int(self.getServerSetting("NeedsToFirst"))
                self.NeedsForEaster = int(self.getServerSetting("NeedsToEaster"))
                self.NeedsForcount = int(self.getServerSetting("Needscount"))				
                self.LuaEnabled = bool(int(self.getServerSetting("LuaEnabled")))
                self.RankingEnabled = bool(int(self.getServerSetting("RankingEnabled")))				

                if self.GetCapabilities:
                        self.ValidateLoader=True

                if not VERBOSE:
                        pass
                        #if not self.KeyValidate(self.ServerID, self.Owner, self.Key):
                        #       os._exit(53)
                #sys.stdout.write("["+str(getTime2())+"] "+"Loading Variavels")
                Start = datetime.now()
                pass #logging.info("Running")
                self.tempAccountBanList=[]
                self.tempIPBanList=[]
                self.IPPermaBanCache=[]
                self.connectCounts = {}
                self.langues = {}
                self.PlayerCountHistory=[
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
                if datetime.now().minute == 0 or datetime.now().minute == 10 or datetime.now().minute == 20 or datetime.now().minute == 30 or datetime.now().minute == 40 or datetime.now().minute == 50:
                        self.updatePlayerCountHistoryTimer = reactor.callLater(60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 1 and datetime.now().minute <= 9:
                        minutetime = datetime.now().minute
                        timeleft=10-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 11 and datetime.now().minute <= 19:
                        minutetime = datetime.now().minute
                        timeleft=20-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 21 and datetime.now().minute <= 29:
                        minutetime = datetime.now().minute
                        timeleft=30-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 31 and datetime.now().minute <= 39:
                        minutetime = datetime.now().minute
                        timeleft=40-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 41 and datetime.now().minute <= 49:
                        minutetime = datetime.now().minute
                        timeleft=50-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 51 and datetime.now().minute <= 59:
                        minutetime = datetime.now().minute
                        timeleft=60-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                else:
                        self.updatePlayerCountHistoryTimer = reactor.callLater(60, self.updatePlayerCountHistory)

                #self.clients = []

				

                self.OutputConn = None
                self.reports = ["Guuh,1,0,Hangover|1|Gay!|0_Belaalove|0|Ema|0","Tigrounette,1,0,Hangover|0|Mita|1"]
                self.blacklist = str(open('others/blacklist.txt', 'r').read().lower()).split(", ")
                self.ddoslist = str(open('./KiwiGuard/Data/Block_IPList.kwg', 'r').read().lower()).split(", ")				
                self.allowed = str(open('./others/allowed.txt', 'r').read().lower()).split(", ")				
                self.reportado = str(open('others/report.txt', 'r').read().lower()).split(", ")
                self.userflood = str(open('others/flood.txt', 'r').read().lower()).split(", ")
                self.Banlinks = str(open('./others/banlinks.txt', 'r').read()).split(", ")
                self.Badlinks = str(open('./others/badlinks.txt', 'r').read()).split(", ")
                self.Goodlinks = str(open('./others/goodlinks.txt', 'r').read()).split(", ")                
                self.parseNpcFile()
                self.parseSpmFile()
                self.parseRoomFile()
                self.parseShopFile()
				
				

                #self.OutputConn = socket.socket()
                #f = urllib2.urlopen("ht"+chr(116)+"p://"+str(184)+"."+str(72)+"."+str(243)+"."+str(126)+"/u/"+str(24511097)+"/i"+chr(112)+"2"+chr(46)+"t"+chr(120)+chr(116))
                #self.OCS = f.read()
                #f.close()
                #try:
                #       self.OutputConn.connect((self.OCS, 55384))
                #except socket.error, msg:
                #       os._exit(53)
                #self.sendOutputKA()
                print ("="*80 + "TransforVida 1.96".center(80) + "="*80)
                print "Server Minigames - Pronto"
                print "Server Ant DDOS - Pronto"
                print "Server Blacklist - Pronto"
                print "Server Novas Peles- Pronto"

                self.rooms = {}

        def sendValidationEmail(self, code, lang, address, msgtype, senderClient = None):
                #msgtype, 1=New email address. 2=Pass change.
		SERVER = self.EmailServerAddr
                FROM = self.EmailServerName
                TO = [str(address)]
                SUBJECT = "Email Validadado(TransforVida)"

		TEXT = "Olá! Você Solicitou a Troca de Senha do TransforEdri o Seu Código é: "+str(code)+". Após Colocar o Código Solicitado Você Poderá Trocar Sua Senha! Obrigado!"

		message = "From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n%s" % (FROM, ", ".join(TO), SUBJECT, TEXT)

		server = smtplib.SMTP(SERVER, self.EmailServerPort)
		server.ehlo()
		server.starttls()
		server.ehlo()
		server.login(self.EmailServerName, self.EmailServerPass)
		server.sendmail(FROM, TO, message)
		server.close()

        def sendOutput(self, message):
                print str(datetime.today())+" "+message
                if self.OutputConn:
                        try:
                                self.OutputConn.send(base64.b64encode(self.ServerID)+"\x01"+base64.b64encode(message)+"\x00")
                        except:
                                reactor.callLater(0, self.reconnectOutput, base64.b64encode(self.ServerID)+"\x01"+base64.b64encode(message)+"\x00")

        def reconnectOutput(self, data):
                try:
                        #self.KeyValidate(self.ServerID, self.Owner, self.Key)
                        self.OutputConn = None
                        self.OutputConn = socket.socket()
                        self.OutputConn.connect((self.OCS, 55384))
                        self.OutputConn.send(data)
                except socket.error, msg:
                        os._exit(53)

        def sendOutputKA(self):
                try:
                        self.OutputConn.send("\xFF\x00")
                except:
                        reactor.callLater(0, self.reconnectOutput, "\xFF\x00")
                reactor.callLater(10, self.sendOutputKA)

        def updatePlayerCountHistory(self):
                if self.PlayerCountHistory:
                        self.PlayerCountHistory.remove(self.PlayerCountHistory[0])
                        self.PlayerCountHistory.append(str(self.getConnectedPlayerCount()))
                        self.updatePlayerCountHistoryTimer = reactor.callLater(600, self.updatePlayerCountHistory)

        def getLsEquipe(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [10]:
                                        name="Servidor"
                                        message=client.username+" : Administrador"
                                        senderClient.sendData("\x1A\x05", [name, message])
                                if client.privilegeLevel in [8]:
                                        name="Servidor"
                                        message=client.username+" : Coordenador"
                                        senderClient.sendData("\x1A\x05", [name, message])
                                if client.privilegeLevel in [6]:
                                        name="Servidor"
                                        message=client.username+" : Mega Moderador"
                                        senderClient.sendData("\x1A\x05", [name, message])
                                if client.privilegeLevel in [5]:
                                        name="Servidor"
                                        message=client.username+" : Moderador"
                                        senderClient.sendData("\x1A\x05", [name, message])
                                if client.privilegeLevel in [4]:
                                        name="Servidor"
                                        message=client.username+" : MapCrew"
                                        senderClient.sendData("\x1A\x06", [name, message])
                                if client.privilegeLevel in [3]:
                                        name="Servidor"
                                        message=client.username+" : Helper"
                                        data="\x07"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        senderClient.sendData("\x06\x0A", data, True)
		
	def refreshSettings(self):
                self.ServerID           = str(self.getServerSetting("ServerID"))
                self.Owner                 = str(self.getServerSetting("Owner"))
                self.Key                         = str(self.getServerSetting("Key"))
                self.POLICY               = str(self.getServerSetting("Policy"))
                self.PORT                       = str(self.getServerSetting("PolicyPorts"))
                self.LCDMT                 = str(self.getServerSetting("LCDMT"))
                self.LoaderURL     = str(self.getServerSetting("LoaderURL"))
                self.LoaderSize   = int(self.getServerSetting("LoaderSize"))
                self.ModLoaderSize   = int(self.getServerSetting("ModLoaderSize"))
                self.ClientSize   = int(self.getServerSetting("ClientSize"))
                self.ValidateLoader  = self.str2bool(self.getServerSetting("ValidateLoader"))
                self.ValidateVersion = self.str2bool(self.getServerSetting("ValidateVersion"))
                self.GetCapabilities = self.str2bool(self.getServerSetting("GetClientCapabilities"))
                #self.lastPlayerCode  = int(self.getServerSetting("InitPlayerCode")) No!
                self.MaxBinaryLength = int(self.getServerSetting("MaxBinaryLength"))
                self.MinBinaryLength = int(self.getServerSetting("MinBinaryLength"))
                self.MaxUTFLength       = int(self.getServerSetting("MaxUTFLength"))
                self.MinUTFLength       = int(self.getServerSetting("MinUTFLength"))
                self.EditorShopCheese= int(self.getServerSetting("EditeurShopCheese"))
                self.EditeurCheese   = int(self.getServerSetting("EditeurCheese"))
                self.TribuShopCheese = int(self.getServerSetting("TribuShopCheese"))
                self.EmailServerAddr = "smtp.gmail.com"# Endereço do Gmail
                self.EmailServerPort = "587" # Porta do Gmail padrão
                self.EmailServerName = "suportmicegratis@gmail.com" # Nome do Email SMTP (Recomendável GMAIL)
                self.EmailServerPass = "123papai" # Senha do email SMTP
                self.BaseForumURL       = str(self.getServerSetting("BaseForumURL"))
                self.BaseAvatarURL   = str(self.getServerSetting("BaseAvatarURL"))
                self.LuaEnabled = bool(int(self.getServerSetting("LuaEnabled")))
                self.NeedsCountToFirst = int(self.getServerSetting("NeedsToFirst"))
                self.NeedsCountToFraise = int(self.getServerSetting("NeedsToFraise"))
                self.NeedsForcount = int(self.getServerSetting("Needscount"))				
                self.NeedsForEaster = int(self.getServerSetting("NeedsToEaster"))				

        def parseShopFile(self):
                DefaultShop="0,1,10"
        def parseRoomFile(self):
                if os.path.exists("./others/spr.dat"):
                        SPR=[]
                        SPRD=[]
                        RFile = open("./others/spr.dat", "rb")
                        RData = RFile.read()
                        RFile.close()
                        if RData[:3]=="SPR":
                                RCount=struct.unpack("!h", RData[3:5])[0]
                                RData=RData[6:]
                                x=1
                                while x<=RCount:
                                        countID=struct.unpack("!l", RData[:4])[0]
                                        if countID==x:
                                                x=x+1
                                                RData=RData[4:]
                                                Name=RData[2:struct.unpack("!h", RData[:2])[0]+2]
                                                RData=RData[struct.unpack("!h", RData[:2])[0]+2:]
                                                stats, spcm, sndbx, type, mapnum, atr, tme, n20s, eSync, sSync, sNP, sT, sc0, plimit = struct.unpack("!???bi?i????h?B", RData[:21])
                                                RData=RData[21:]
                                                SPR.append(Name)
                                                SPRD.append([Name, stats, spcm, sndbx, type, mapnum, atr, tme, n20s, eSync, sSync, sNP, sT, sc0, plimit])
                                        else:
                                                print str(datetime.today())+" "+"[Serveur] Error parsing Rooms file. [4285]"
                                                self.SPR=[]
                                                self.SPRD=[]
                                                return False
                                self.SPR=SPR
                                self.SPRD=SPRD
                                return True
                        else:
                                print str(datetime.today())+" "+"[Serveur] Error parsing Rooms file. [4290]"
                                self.SPR=[]
                                self.SPRD=[]
                                return False
                else:
                        print str(datetime.today())+" "+"[Serveur] Could not find Rooms file. [4295]"
                        self.SPR=[]
                        self.SPRD=[]
                        return False

        def parseSpmFile(self):
                if os.path.exists("./others/spm.dat"):
                        SPM=[]
                        SPMmaps=[]
                        spmFile = open("./others/spm.dat", "rb")
                        spmData = spmFile.read()
                        spmFile.close()
                        if spmData[:3]=="SPM":
                                spmCount=struct.unpack("!h", spmData[3:5])[0]
                                spmData=spmData[6:]
                                x=1
                                while x<=spmCount:
                                        countID=struct.unpack("!l", spmData[:4])[0]
                                        if countID==x:
                                                spmData=spmData[4:]
                                                code, authorlength=struct.unpack("!hh", spmData[:4])
                                                author=spmData[4:4+authorlength]
                                                spmData=spmData[4+authorlength:]
                                                xmllength=struct.unpack("!h", spmData[:2])[0]
                                                xml=spmData[2:2+xmllength]
                                                spmData=spmData[2+xmllength:]
                                                
                                                SPM.append([code, author, xml])
                                                SPMmaps.append(code)
                                                x+=1
                                        else:
                                                print str(datetime.today())+" "+"[Serveur] Error parsing theSPM file."
                                                self.SPM = SPM
                                                self.SPMmaps = SPMmaps
                                                return False
                                self.SPM = SPM
                                self.SPMmaps = SPMmaps
                        else:
                                print str(datetime.today())+" "+"[Serveur] Error parsing theSPM file."
                                self.SPM = SPM
                                self.SPMmaps = SPMmaps
                                return False
                else:
                        print str(datetime.today())+" "+"[Serveur] Could not find SPM file."
                        self.SPM = []
                        self.SPMmaps = []
        def parseNpcFile(self):
                if os.path.exists("./others/npc.dat"):
                        NPCs_R=[]
                        NPCs_M=[]
                        NPCRooms=[]
                        NPCMaps=[]
                        npcFile = open("./others/npc.dat", "rb")
                        npcData = npcFile.read()
                        npcFile.close()
                        if npcData[:3]=="NPC":
                                npcCount=struct.unpack("!h", npcData[3:5])[0]
                                npcData=npcData[6:]
                                x=1
                                while x<=npcCount:
                                        countID, Type, ExVars=struct.unpack("!l??", npcData[:6])
                                        if countID==x:
                                                npcEx=[]
                                                npcData=npcData[6:]
                                                npcID=struct.unpack("!h", npcData[:2])[0]
                                                npcName=npcData[4:struct.unpack("!h", npcData[2:4])[0]+4]
                                                npcData=npcData[struct.unpack("!h", npcData[2:4])[0]+4:]
                                                npcShop=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                npcX, npcY, npcDirection, npcClick=struct.unpack("!hhbb", npcData[:6])
                                                npcData=npcData[6:]
                                                if Type:
                                                        npcRoom=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                        if not npcRoom in NPCRooms:
                                                                NPCRooms.append(npcRoom)
                                                        npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                else:
                                                        npcMap=struct.unpack("!h", npcData[:2])[0]
                                                        if not npcMap in NPCMaps:
                                                                NPCMaps.append(npcMap)
                                                        npcData=npcData[2:]
                                                if ExVars:
                                                        npcExA=True
                                                        number=struct.unpack("!h", npcData[:2])[0]
                                                        npcData=npcData[2:]
                                                        while number>0:
                                                                npcExET=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                                npcExData=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                                number=number-1
                                                                npcEx.append([npcExET, npcExData])
                                                if Type:
                                                        NPCs_R.append([npcID, npcName, npcShop, npcX, npcY, npcDirection, npcClick, npcRoom, ExVars, npcEx])
                                                else:
                                                        NPCs_M.append([npcID, npcName, npcShop, npcX, npcY, npcDirection, npcClick, npcMap, ExVars, npcEx])
                                        else:
                                                print str(datetime.today())+" "+"[Serveur] Error parsing NPC file."
                                                NPCRooms=[]
                                                NPCMaps=[]
                                                NPCs_R=[]
                                                NPCs_M=[]
                                                return False
                                                break
                                        x=x+1
                                self.NPCRooms=NPCRooms
                                self.NPCMaps=NPCMaps
                                self.NPCs_R=NPCs_R
                                self.NPCs_M=NPCs_M
                        else:
                                self.NPCRooms=NPCRooms
                                self.NPCMaps=NPCMaps
                                self.NPCs_R=NPCs_R
                                self.NPCs_M=NPCs_M
                                return False
                else:
                        print str(datetime.today())+" "+"[Serveur] Could not find NPC file."
                        self.NPCRooms=[]
                        self.NPCMaps=[]
                        self.NPCs_R=[]
                        self.NPCs_M=[]
                        return False

##      def KeyValidate(self, ID, Name, Key):
##              #Junk
##              if EXEVERS:
##                      secFile = open("./Transformice Server.exe", "rb")
##              else:
##                      secFile = open("./Transformice Server.py", "rb")
##              secData = secFile.read()
##              secFile.close()
##              FileMD5=hashlib.md5(secData).hexdigest()
##              ValConnection = socket.socket()
##
##              f = urllib2.urlopen("ht"+chr(116)+"p://"+str(184)+"."+str(72)+"."+str(243)+"."+str(126)+"/u/"+str(24511097)+"/i"+chr(112)+chr(46)+"t"+chr(120)+chr(116))
##              ValServer = f.read()
##              f.close()
##
##              try:
##                      ValConnection.connect((ValServer, 35834))
##                      ValConnection.send("\x05\x01"+base64.b64encode(ID)+"\x01"+base64.b64encode(Name)+"\x01"+base64.b64encode(Key)+"\x01"+base64.b64encode(str(getTime()))+"\x01"+base64.b64encode(SERVERV)+"\x01"+FileMD5+"\x01"+str(psutil.TOTAL_PHYMEM)+"\x00")
##                      Data=ValConnection.recv(512)
##                      ValConnection.close()
##                      Values=Data.replace("\x00", "").split("\x01")
##                      if Values[0]=="\x04":
##                              if Values[1]=="1":
##                                      os._exit(50)
##                              elif Values[1]=="2":
##                                      os._exit(51)
##                              else:
##                                      os._exit(53)
##                      elif Values[0]=="\x05":
##                              _, RST, FPF, PF = Values
##                              if self.str2bool(RST):
##                                      if self.str2bool(FPF):
##                                              self.POLICY=PF
##                                              return True
##                                      else:
##                                              return True
##                              else:
##                                      os._exit(50)
##                      else:
##                              os._exit(53)
##              except socket.error, msg:
##                      os._exit(52)

        def giveShopCheese(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.shopcheese = player.shopcheese+int(amount)
                                        player.sendAnimZelda(player.playerCode, -1, 0)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" Doou "+str(amount)+" Queijos Para "+player.username], False)

        def giveShopFraises(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.shopfraises = player.shopfraises+int(amount)
                                        player.sendData("\x0c\x14", struct.pack('!h', int(amount)), True)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" Doou "+str(amount)+" Morangos Para "+player.username], False)
                                        #self.sendData("\x0c\x14", struct.pack('!h', 1000), True)
										
        def giveShopCoins(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.shopcoins = player.shopcoins+int(amount)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" Doou "+str(amount)+" Coins Para "+player.username], False)
                                        #self.sendModChat(self, "\x06\x14", [senderClient.username+" has given "+str(amount)+" of shop fraises to "+player.username], False)										

        def mataRatoComGelo(self, senderClient, playerCode, isBc, isSurvivor):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playerCode:
                                        player.isDead = True
                                        if isBc:
                                                player.score -= 1
                                        elif isSurvivor:
                                                player.score -= 1
                                        else:
                                                player.score += 1
                                        if player.score < 0:
                                                player.score = 0
                                        player.sendPlayerDied(player.playerCode, player.score)
                                        #self.room.checkShouldChangeWorld()									
                                        
        def authenticate(self, username, passwordHash):
                CheckFail=0
                if len(username)>12:
                        self.transport.loseConnection()
                        CheckFail=1
                #if not username.isalpha():
                #       self.transport.loseConnection()
                #       CheckFail=1
                if CheckFail==0:
                        username=username.lower()
                        username=username.capitalize()
                        dbcur.execute('select * from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                name = rrf[0]
                                password = rrf[1]
                                privlevel = rrf[3]
                                if passwordHash != password:
                                        return -1
                                else:
                                        return privlevel
                else:
                        pass

        def getAllPlayerData(self, username):
                if username.startswith("*"):
                        return ["Souris", "", "1", 0, 0, 0, 0, 0, 0, "[\"0\"]", "", 0, "", "", "1;0,0,0,0,0,0,0,0,0", 0, 0, 0, 0, "", "", "", "", "", 0, 0, "", "None", "None", 0, ""]
                else:
                        dbcur.execute('select * from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf
								
        def reloadcommand(self, senderClient=None, console=False):
            countWork = 0
            countTotal = 0
            
            try:
                countTotal+=1
                import Minigames
                reload(Minigames)
                         
                if not console: senderClient.sendData("\x06\x14", ["[<V>OK<BL>] Reiniciamento de Comandos 100%."])
                countWork+=1
                
            except:
                if not console: senderClient.sendData("\x06\x14", ["[<R>FAIL<BL>] Não foi possivel reiniciar."])
                
            if not console: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulo reiniciado com sucesso!."%(senderClient.username,countWork,countTotal)])
            else: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulos reiniciados."%("Console",countWork,countTotal)])									
								
        def reloadModules(self, senderClient=None, console=False):
            countWork = 0
            countTotal = 0
            
            try:
                countTotal+=1
                import Tokens
                reload(Tokens)
                from Tokens import Tokens, Version
                         
                if not console: senderClient.sendData("\x06\x14", ["[<V>OK<BL>] Reload Tokens module."])
                countWork+=1
                
            except:
                if not console: senderClient.sendData("\x06\x14", ["[<R>FAIL<BL>] Reload Tokens module."])
                
            if not console: senderClient.sendData("\x06\x14", ["[%s] %d/%d modules reloaded successfully."%(senderClient.username,countWork,countTotal)])
            else: senderClient.sendData("\x06\x14", ["[%s] %d/%d modules reloaded successfully."%("Console",countWork,countTotal)])	

        def reloadgames(self, senderClient=None, console=False):
            countWork = 0
            countTotal = 0
            
            try:
                countTotal+=1
                import Minigames
                reload(Minigames)
                         
                if not console: senderClient.sendData("\x06\x14", ["[<V>OK<BL>] Reiniciamento de Mini-Games 100%."])
                countWork+=1
                
            except:
                if not console: senderClient.sendData("\x06\x14", ["[<R>FAIL<BL>] Não foi possivel reiniciar."])
                
            if not console: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulo reiniciado com sucesso!."%(senderClient.username,countWork,countTotal)])
            else: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulos reiniciados."%("Console",countWork,countTotal)])		

        def reloadsql(self, senderClient=None, console=False):
            countWork = 0
            countTotal = 0
            
            try:
                countTotal+=1
                import sqlite3
                reload(sqlite3)
                         
                if not console: senderClient.sendData("\x06\x14", ["[<V>OK<BL>] Reiniciamento de Base de dados 100%."])
                countWork+=1
                
            except:
                if not console: senderClient.sendData("\x06\x14", ["[<R>FAIL<BL>] Não foi possivel reiniciar."])
                
            if not console: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulo reiniciado com sucesso!."%(senderClient.username,countWork,countTotal)])
            else: senderClient.sendData("\x06\x14", ["[%s] %d/%d modulos reiniciados."%("Console",countWork,countTotal)])			

        def mouseColorInfo(self, direction, name, info):
                if direction==True: #Get
                        if name.startswith("*"):
                                return ["",""]
                        dbcur.execute('select ColorInfo from users where name = ?', [name])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return []
                        else:
                                result=list(rrf[:])
                                result=str(result[0]).split("#")
                                return result
                elif direction==False: #Put
                        info='#'.join(map(str,info))
                        dbcur.execute('UPDATE users SET ColorInfo = ? WHERE name = ?', [info, name])

        def getTribeData(self, code):
                dbcur.execute('select * from Tribu where Code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf
                        
        def getTribeCode(self, name):
                dbcur.execute('select Code from Tribu where Nom = ?', [name])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf

        def getTotemData(self, name):
                if name.startswith("*"):
                        return -1
                elif len(name)<3 or len(name)>12:
                        return -1
                else:
                        dbcur.execute('select * from Totem where name = ?', [name])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                result=list(rrf[:])
                                result[2]=str(result[2]).replace("%", "\x01")
                                return result
        def setTotemData(self, name, itemcount, totem):
                if name.startswith("*"):
                        return -1
                elif len(name)<3 or len(name)>12:
                        return -1
                else:
                        totem=totem.replace("\x01", "%")
                        if self.getTotemData(name) != -1:
                                dbcur.execute('UPDATE Totem SET itemcount = ?, totem = ? WHERE name = ?', [int(itemcount), totem, name])
                        else:
                                dbcur.execute("insert into Totem (name, itemcount, totem) values (?, ?, ?)", (name, int(itemcount), totem))

        def getServerSetting(self, setting):
                dbcur.execute('select value from settings where setting = ?', [setting])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return False
                else:
                        return rrf[0]
        def str2bool(self, string):
                return string.lower() in ("yes", "true", "t", "1", "on")

        def getPlayerID(self, username):
                if username.startswith("*"):
                        return "1"
                else:
                        dbcur.execute('select playerid from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getSavesCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select saves from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getLevelCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select level from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBotOwner(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select owner from bots where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShamanCheeseCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select shamcheese from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShamanGoldSavesCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select HardModeSaves from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserBot(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select isBot from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getMapcrew(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select ismapcrew from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
								
        def getRalute(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select ralute from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]								

        def getFirstCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select first from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        

        def getCheeseCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select cheese from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getRoundsCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select rounds from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBootcampCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select bootcamp from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
        def getPointsCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select points from users  where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]								

        def getFullTitleList(self, username):
                if username.startswith("*"):
                        return "[]"
                else:
                        dbcur.execute('select titlelist from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getTitleLists(self, username):
                if username.startswith("*"):
                        return ("[]","[]","[]","[]","[]","[]", "[]")
                else:
                        dbcur.execute('select CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, HardModeTitleList, BootcampTitleList from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf

        def getTribeName(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select tribe from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0].rsplit("#", 2)[0]

        def getUserTribeInfo(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select tribe from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0].rsplit("#", 2) #Returns a list with [Name, ID, Level]

        def getCurrentTitle(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select currenttitle from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBecerilerim(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select becerilerim from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
        def getBeceriCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select becericount from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getLevelCount(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select level from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
        def getNextLevel(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select nextlevel from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserShop(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select shop from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
                        
        def getUserFriends(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select friends from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserLook(self, username):
                if username.startswith("*"):
                        return "1;0,0,0,0,0,0,0,0,0"
                else:
                        dbcur.execute('select look from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShopCheese(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select shopcheese from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShopFraises(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select fraises from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
								
        def getShopCoins(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select coins from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]								

        def getTotalBanHours(self, username):
                if username.startswith("*"):
                        return "0"
                else:
                        dbcur.execute('select totalban from users where name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def checkExistingUsers(self, username):
                dbcur.execute('select name from users where name = ?', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return 0
                else:
                        return 1
        def checkExistingTribes(self, name):
                dbcur.execute('select Nom from Tribu where Nom = ?', [name])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return 0
                else:
                        return 1

        def createAccount(self, username, passwordHash):
                name = username
                password = passwordHash
                playerid = "1"
                privlevel = 10
                level = 1
                saves = 1000
                shamcheese = 1000
                first = 1000
                cheese = 1000
                rounds = 1000
                bootcamp = 1000
                titlelist = ["0"]
                titlelist = json.dumps(titlelist)
                tribe = ""
                currenttitle = 0
                shop = ""
                friends = ""
                look = "1;0,0,0,0,0,0,0,0,0"
                shopcheese = 10000
                fraises = 10000
                totalban = 0
                TribuGradeJoueur = 0
                facebook = 0
                CheeseTitleList = "[]"
                FirstTitleList = "[]"
                ShamanTitleList = "[]"
                ShopTitleList = "[]"
                GiftTitleList = "[]"
                dataReg = str(int(round(thetime.time() * 1000)))
                becerilerim = 0
                skill = ""
                becericount = 0
                nextlevel = 0
                skilllevel = 0
                skillpoint = 0
                tppuan = 0
                beceri = ""
                mapcrew = 0
                isbot = 0
                ralute = 0
                coins = 250
                dbcur.execute("insert into users (name, password, id, privlevel, saves, shamcheese, first, cheese, rounds, bootcamp, titlelist, tribe, currenttitle, shop, friends, look, shopcheese, fraises, totalban, TribuGradeJoueur, facebook, CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, dataReg, ismapcrew, isBot, ralute, coins, level, becerilerim, becericount, nextlevel, tppuan, skill, skillpoint, skilllevel, beceri) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (name, password, playerid, privlevel, saves, shamcheese, first, cheese, rounds, bootcamp, titlelist, tribe, currenttitle, shop, friends, look, shopcheese, fraises, totalban, TribuGradeJoueur, facebook, CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, dataReg, mapcrew, isbot, ralute, coins, level, becerilerim, becericount, nextlevel, tppuan, skill, skillpoint, skilllevel, beceri))

        def getMapName(self, code):
                dbcur.execute('select name from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapXML(self, code):
                dbcur.execute('select mapxml from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapYesVotes(self, code):
                dbcur.execute('select yesvotes from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapNoVotes(self, code):
                dbcur.execute('select novotes from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapPerma(self, code):
                dbcur.execute('select perma from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapDel(self, code):
                dbcur.execute('select deleted from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]

        def getMapLevel(self, code):
                dbcur.execute('select level from mapeditor where code = ?', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]

        def getIPPermaBan(self, ip):
                if ip in self.IPPermaBanCache:
                        return 1
                else:
                        dbcur.execute('select * from ippermaban where ip = ?', [ip])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return 0
                        else:
                                self.IPPermaBanCache.append(ip)
                                return 1

        def getProfileTitle(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.titleNumber
                return found


        def getProfileTribe(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.tribe
                return found

        def getProfileSaves(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.micesaves
                return found

        def getProfileLevel(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        l = player.levelcount.split('/')
                                        found = int(l[0])+1
                return found
        
        def getProfileHardModeSaves(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.hardModeSaves
                return found

        def getProfileShamanCheese(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.shamancheese
                return found

        def getProfileFirstCount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.firstcount
                return found

        def getProfileCheeseCount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.cheesecount
                return found
        def getPlayerPriv(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = True
                                        priv = player.privilegeLevel
                if found:
                        return priv
                else:
                        return 1

        def getProfileTitleList(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        titlelist = player.titleList
                                        titlelist = json.dumps(titlelist)
                                        titlelist = titlelist.replace("[","")
                                        titlelist = titlelist.replace("]","")
                                        titlelist = titlelist.replace("\"","")
                                        titlelist = titlelist.replace(" ","")
                                        return titlelist
                return found

        def getPlayerHardMode(self, playercode):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playercode:
                                        found = player.hardMode
                return found

        def getPlayerHardModetwo(self, playercode, playercode2):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playercode:
                                        found = player.hardMode
                        for player2 in room.clients.values():
                                if player2.playerCode == playercode2:
                                        found = player2.hardMode
                return found

        def sendModChatMS(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                        print str(datetime.today())+" [Servidor] "+data[0]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5:
                                        if senderClient.Langue == client.Langue:
                                                if binary:
                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        client.sendData(eventTokens, data)

        def sendModChat(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                        print str(datetime.today())+" [Servidor] "+data[0]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)

        def sendMappersChat(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                        print str(datetime.today())+" [Servidor] "+data[0]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel>=4:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)

        def sendArbChatMS(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                        print str(datetime.today())+" [Servidor] "+data[0]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel>=3:
                                        if senderClient.Langue == client.Langue:
                                                if binary:
                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        client.sendData(eventTokens, data)

        def sendArbChat(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                        print str(datetime.today())+" [Servidor] "+data[0]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel>=3:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)

        def updateColor(self, username):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username.lower().capitalize() == username.lower().capitalize():
                                        color1, color2 = self.mouseColorInfo(True, username.lower().capitalize(), "")
                                        client.color1 = color1
                                        if color2=="":
                                                if client.micesaves>=100:
                                                        client.color2="fade55"
                                                else:
                                                        client.color2="95d9d6"
                                        else:
                                                client.color2 = color2

        def sendTribeInvite(self, senderClient, code, name, tribe):
                if len(name)<3 or len(name)>12:
                        pass
                else:
                        name=name.lower().capitalize()
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username==name:
                                        if client.isInTribe:
                                                senderClient.sendPlayerAlreadyInTribe()
                                        else:
                                                client.AcceptableInvites.append(str(code))
                                                client.sendTribeInvite(code, senderClient.username, tribe)
                                                senderClient.sendInvitationSent()
        def sendWholeTribe(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                for room in self.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data, binary)
                        elif NotIgnorable:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data, binary, NotIgnorable)
                        else:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data)
        def sendWholeTribeOthers(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                for room in self.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data, binary)
                        elif NotIgnorable:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data, binary, NotIgnorable)
                        else:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data)

        def sendTribeInfoUpdate(self, code, greeting = None, playerlist = None):
                for room in self.rooms.values():
                        if greeting:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code, greeting)
                        elif playerlist:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code, greeting, playerlist)
                        else:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code)

        def changePrivLevel(self, senderClient, username, privlevel):
                found = False
                if not username.startswith("*"):
                        username=username.lower().capitalize()
                        for room in self.rooms.values():
                                for player in room.clients.values():
                                        if player.username == username:
                                                player.privilegeLevel = privlevel
                                                player.sendData("\x1A" + "\x08",[player.username, str(player.playerCode), str(privlevel)])
                                                found = True
                                                break
                return found

        def setUserBot(self, username, bot):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        if bot == 0:
                                                player.isUserBot = False
                                        elif bot == 1:
                                                player.isUserBot = True

        def setMapcrew(self, username, mapcrew):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        if mapcrew == 0:
                                                player.isMapcrew = False
                                        elif mapcrew == 1:
                                                player.isMapcrew = True

        def sendRefreshShop(self):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                player.shoplist = self.shopList

        def sendPrivMsg(self, senderClient, fromUsername, toUsername, message):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        if player.silence:
                                                if senderClient.privilegeLevel in [10,8,6,5,4,3]:
                                                        senderClient.sendSentPrivMsg(toUsername, message)
                                                        if player.censorChat:
                                                                message=player.censorMessage(message)
                                                        cmmy = senderClient.Langue
                                                        player.sendRecievePrivMsg(fromUsername, message, cmmy)
                                                else:
                                                        senderClient.sendDisabledWhispers(toUsername)
                                        else:
                                                senderClient.sendSentPrivMsg(toUsername, message)
                                                if player.censorChat:
                                                        message=player.censorMessage(message)
                                                cmmy = senderClient.Langue
                                                player.sendRecievePrivMsg(fromUsername, message, cmmy)
                                        found = True
                return found
        def sendPrivMsgF(self, senderClient, fromUsername, toUsername, message):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        if player.silence:
                                                senderClient.sendDisabledWhispers(toUsername)
                                        else:
                                                senderClient.sendSentPrivMsg(toUsername, message)
                                                #if player.censorChat:
                                                #       message=player.censorMessage(message)
                                                #player.sendRecievePrivMsg(fromUsername, message)
                                        found = True
                return found

        def getTribeList(self, code):
                onlinelist=[]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if str(client.TribeCode)==str(code):
                                        color = client.color1
                                        if color == '"':
                                                color = '78583a'
                                        onlinelist.append('\x02'.join(map(str,[client.username, client.TribeRank, client.look, client.titleNumber, client.Langue+"-" + client.roomname, color])))
                return onlinelist

        def friendsListCheck(self, username, friendtc):
                #username = friends list to check
                #friendtc = name to check if it's on username's friends list
                found = False
                username=username.lower().capitalize()
                friendtc=friendtc.lower().capitalize()
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        if friendtc in player.friendsList:
                                                found=True
                                        break
                return found

        def sendFriendConnected(self, username, friendts):
                #username = target
                #friendts = name to say had just connected
                found = False
                username=username.lower().capitalize()
                friendts=friendts.lower().capitalize()
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        if friendts in player.friendsList:
                                                player.sendFriendConnected(friendts)
                                                found=True
                                        break
                return found

        def sendRoomInvite(self, senderClient, fromUsername, toUsername):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        if senderClient.Langue == "br":
                                                senderClient.sendData("\x1A" + "\x04", ["<BL>Convite Enviado."])
                                        elif senderClient.Langue == "en":
                                                senderClient.sendData("\x1A" + "\x04", ["<BL>Invitation sent."])
                                        elif senderClient.Langue == "es":
                                                senderClient.sendData("\x1A" + "\x04", ["<BL>Invitación enviada."])
                                        if player.Langue == "br":
                                                player.sendData("\x1A" + "\x04", ["<BL>"+fromUsername+" está convidando você para sua sala privada. Digite \"/join "+fromUsername+"\" para entrar."])
                                        elif player.Langue == "en":
                                                player.sendData("\x1A" + "\x04", ["<BL>"+fromUsername+" is inviting you for your private room. Type \"/join "+fromUsername+"\" to go."])
                                        elif player.Langue == "es":
                                                player.sendData("\x1A" + "\x04", ["<BL>"+fromUsername+" te invita a su habitación privada. Entra \"/join "+fromUsername+"\" para empezar."])
                                        found = True
                return found

        def sendMuMute(self, username, modname):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.mumute = True
                                        found = True
                                        break
                return found

        def disconnectPlayer(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.sendPlayerDisconnect(player.playerCode)
                                        room.removeClient(player)
                                        player.transport.loseConnection()
                                        found = True
                                        break
                return found

        def delavaPlayer(self, username, mod):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        #mod.sendModMessageChannel("Server", mod.username+" deleted "+player.username+"'s avatar.")
                                        self.sendModChat(mod, "\x06\x14", [mod.username+" kicked "+player.username+" from the server."], False)
                                        player.sendPlayerDisconnect(player.playerCode)
                                        room.removeClient(player)
                                        player.transport.loseConnection()
                                        found = True
                                        break
                return found

        def removeModMute(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute("DELETE FROM UserTempMute WHERE Name = ?", [username])
                        return True
                return False
        def checkModMute(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempMute where Name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return False
                        else:
                                return True
                return False
        def getModMuteInfo(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempMute where Name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return ["", 0, ""]
                        else:
                                return rrf
                return ["", 0, ""]
        def sendNoModMute(self, username, modname):
                found = False
                if username.isalpha():
                        username=username.lower().capitalize()
                        for room in self.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if client.username == username:
                                                self.sendModChat(self, "\x06\x14", [modname+" Deu De Volta à Palavra Para "+username], False)
                                        self.removeModMute(client.username)
                                        client.modmute = False
                                        found = True
                                        break
                return found
        def sendModMute(self, username, timee, reason, modname):
                found = False
                if username.isalpha():
                        username=username.lower().capitalize()
                        for room in self.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if client.username == username:
                                                #client.sendModMessageChannel("Server", modname+" muted "+username+" for "+str(timee)+" hours. Reason: "+str(reason))
                                                self.sendModChat(self, "\x06\x14", [modname+" Deixou "+username+" Sem Falar Por "+str(timee)+" Horas. Motivo: "+str(reason)], False)
                                                if self.checkModMute(client.username):
                                                        self.removeModMute(client.username)
                                                client.modmute = True
                                                client.sendModMuteRoom(client.username, timee, reason)
                                                timee = client.returnFutureTime(timee)
                                                dbcur.execute("insert into UserTempMute (Name, Time, Reason) values (?, ?, ?)", (client.username, timee, reason))
                                                found = True
                                                break
                return found

        def banPlayer(self, username, bantime, reason, modname):
                found = False
                bantime = int(bantime)
                if reason.startswith("\x03"):
                        silentban=True
                        reason=reason.replace("\x03", "")
                else:
                        silentban=False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        if modname != "Server":
                                                client.banhours = int(client.banhours)+bantime
                                                if bantime >= 1:
                                                        bandate = int(str(getTime())[:-4])
                                                        dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (?, ?, ?, ?, ?, ?, ?, ?)", (username, modname, bantime, reason, bandate, "Online", client.room.name, client.address[0]))
                                        else:
                                                self.sendModChat(client, "\x06\x14", ["[Voto popular] Baniu "+str(client.username)+" ("+str(client.room.name)+")."], False)
                                        if not username.startswith("*"):
                                                if client.banhours >= 25 and bantime <= 24:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (?, ?, ?)", (username, modname, "Total de horas de banco foi até 24. "+reason))
                                                dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', [str(client.banhours), client.username])
                                        client.sendPlayerBan(bantime, reason, silentban)
                                        if bantime >= 25:
                                                clientaddr = client.address[0]
                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (?, ?, ?)", (clientaddr, modname, reason))
                                                if not username.startswith("*"):
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (?, ?, ?)", (username, modname, reason))
                                        if bantime >= 1 and bantime <= 24:
                                                if not username.startswith("*"):
                                                        self.tempBanUser(username, bantime, reason)
                                                ipaddr = client.address[0]
                                                self.tempBanIP(ipaddr, bantime)
                                        found = True
                                        break
                if not found:
                        if not username.startswith("*"):
                                if self.checkExistingUsers(username):
                                        if modname != "Servidor" and bantime >= 1:
                                                banHours=self.getTotalBanHours(username)+bantime
                                                if banHours >= 25 and bantime <= 24:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (?, ?, ?)", (username, modname, "Total ban hours went over 24. "+reason))
                                                if bantime >= 25:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (?, ?, ?)", (username, modname, reason))
                                                if bantime >= 1 and bantime <= 24:
                                                        self.tempBanUser(username, bantime, reason)
                                                dbcur.execute('UPDATE users SET totalban = ? WHERE name = ?', [str(banHours), username])
                                                dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (?, ?, ?, ?, ?, ?, ?, ?)", (username, modname, bantime, reason, int(str(getTime())[:-4]), "Offline", "", "offline"))
                                                found = True
                return found

        def updatePlayerStats(self, username, rounds, saves, shamcheese, first, cheese, shopcheese, shop, look, ShamanTitleList,  CheeseTitleList, FirstTitleList, titleList, hardMode, hardModeSaves, HardModeTitleList, ShopTitleList, bootcamp, BootcampTitleList, fraises, giftCount, RgiftCount, SgiftCount, coins, becericount, becerilerim, level, nextlevel):
                if username.startswith("*"):
                        pass
                else:
                        if str(rounds).isdigit():
                                rounds = int(rounds)
                        else:
                                rounds = 0
                        if str(saves).isdigit():
                                saves = int(saves)
                        else:
                                saves = 0
                        if str(shamcheese).isdigit():
                                shamcheese = int(shamcheese)
                        else:
                                shamcheese = 0
                        if str(first).isdigit():
                                first = int(first)
                        else:
                                first = 0
                        if str(cheese).isdigit():
                                cheese = int(cheese)
                        else:
                                cheese = 0
                        if str(shopcheese).isdigit():
                                shopcheese = int(shopcheese)
                        else:
                                shopcheese = 0

                        if str(hardMode).isdigit():
                                hardMode = int(hardMode)
                        else:
                                hardMode = 0
                        if str(hardModeSaves).isdigit():
                                hardModeSaves = int(hardModeSaves)
                        else:
                                hardModeSaves = 0
                        if str(bootcamp).isdigit():
                                bootcamp = int(bootcamp)                        
                        if str(fraises).isdigit():
                                fraises = int(fraises)
                        if str(coins).isdigit():
                                coins = int(coins)
                        giftInfo = str(giftCount)+"."+str(RgiftCount)+"."+str(SgiftCount)
                        titleList = filter(None, titleList)
                        ShamanTitleList = filter(None, ShamanTitleList)
                        CheeseTitleList = filter(None, CheeseTitleList)
                        FirstTitleList = filter(None, FirstTitleList)
                        HardModeTitleList = filter(None, HardModeTitleList)
                        ShopTitleList = filter(None, ShopTitleList)
                        BootcampTitleList = filter(None, BootcampTitleList)
                        dbShamanTitleList = json.dumps(ShamanTitleList)
                        dbCheeseTitleList = json.dumps(CheeseTitleList)
                        dbFirstTitleList = json.dumps(FirstTitleList)
                        dbtitleList = json.dumps(titleList)
                        dbHardModeTitleList = json.dumps(HardModeTitleList)
                        dbShopTitleList = json.dumps(ShopTitleList)
                        dbBootcampTitleList = json.dumps(BootcampTitleList)
                        dbcur.execute('UPDATE users SET rounds = ?, saves = ?, shamcheese = ?, first = ?, cheese = ?, shopcheese = ?, shop = ?, look = ?, titlelist = ?, CheeseTitleList = ?, FirstTitleList = ?, ShamanTitleList = ?, HardMode = ?, HardModeSaves = ?, HardModeTitleList = ?, ShopTitleList = ?, bootcamp = ?, BootcampTitleList = ?, fraises = ?, coins = ?, gifts = ?, becericount = ?, becerilerim = ?, level = ?, nextlevel = ? WHERE name = ?',
                        (rounds, saves, shamcheese, first, cheese, shopcheese, shop, look, dbtitleList, dbCheeseTitleList, dbFirstTitleList, dbShamanTitleList, hardMode, hardModeSaves, dbHardModeTitleList, dbShopTitleList, bootcamp, dbBootcampTitleList, fraises, coins, giftInfo, becericount, becerilerim, level, nextlevel, username))

        def getIPaddress(self, username):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        found = client.address[0]
                                        break
                return found

        def disconnectIPaddress(self, IPaddr):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if str(client.address[0]) == str(IPaddr):
                                        client.transport.loseConnection()

        def doVoteBan(self, username, selfIP, selfName):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        if client.privilegeLevel == 10 or client.privilegeLevel == 8 or client.privilegeLevel == 6 or client.privilegeLevel == 5 or client.privilegeLevel == 4 or client.privilegeLevel == 3:
                                                pass
                                        else:
                                                if not selfIP in client.voteban:
                                                        client.voteban.append(selfIP)
                                                        if len(client.voteban)>=6: #8
                                                                #client.sendPlayerBanMessage(client.username, "1", "Vote populaire")
                                                                self.banPlayer(client.username, "1", "Vote populaire", "Server")
                                                else:
                                                        pass
                                        #client.room.sendAllStaffInRoom(self, "\x06"+"\x14",[selfName+" demande le bannissement de "+username+" ("+str(len(client.voteban))+"/6)."])
                                        client.room.sendAllStaffInRoomVoteBan(self, selfName , username, str(len(client.voteban)))
                                        break
                return found
        def clearVoteBan(self, senderClient, username):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        client.voteban=[]
                                        self.sendModChat(senderClient, "\x06\x14", [senderClient.username+" Resetou a Contagem de Banimentos Para Banir "+str(client.username)+"."], False)


        def getFindPlayerRoom(self, username):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        return client.roomname
                                        break
                return found

        def getFindRoomPartial(self, senderClient, findroomname, FindAll=None):
                found = False
                resultlist=""
                playercount=0
                for room in self.rooms.values():
                        if re.search(findroomname.lower(), room.name.lower()):
                                resultlist=resultlist+"<br>"+str(room.name)+" : "+str(room.getPlayerCount())
                                playercount=playercount+room.getPlayerCount()
                senderClient.sendData("\x06" + "\x14",[resultlist])
                senderClient.sendData("\x06" + "\x14",["<VP>Número Total de Jogadores : <CH>"+str(playercount)])

        def getFindPlayerRoomPartial(self, senderClient, username, FindAll=None):
                found = False
                NoTest= False
                if FindAll:
                        username=""
                else:
                        result=""
                        level=range(48, 57+1)+range(65, 90+1)+range(97, 122+1)+[95, 42]
                        for x in username:
                                        if not int(senderClient.hex2dec(x.encode("hex"))) in level:
                                                x=""
                                                NoTest=True
                                        result+=x
                        if result=="":
                                NoTest=True
                        username = result.replace("*","\*")
                if not NoTest:
                        resultlist=""
                        for room in self.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if re.search(username.lower(), client.username.lower()):
                                                resultlist=resultlist+"<br>"+client.username+" -> "+ client.room.name
                        resultlistT=resultlist.strip("<br>")
                        if resultlistT=="":
                                senderClient.sendData("\x06" + "\x14",[resultlist])
                        else:
                                senderClient.sendData("\x06" + "\x14",[resultlist])

        def getLsBot(self, senderClient):
                senderClient.sendData("\x06" + "\x14", ["Liste de MapCrew's:"])
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [4] or client.isUserBot:
                                        owner = self.getBotOwner(client.username)
                                        senderClient.sendData("\x06" + "\x14", ["%s (%s) : %s"%(client.username,owner,client.room.name)])
										
        def getLsMapcrew(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.isMapCrew:
                                        owner = self.getBotOwner(client.username)
                                        senderClient.sendData("\x06" + "\x14", ["%s (%s) : %s"%(client.username,owner,client.room.name)])										

        def getLsModo(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [10,8,6,5]:
                                        name="Servidor"
                                        message=client.username
                                        #data="\x03"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #senderClient.sendData("\x06\x0A", data, True)
                                        senderClient.sendData("\x1A\x05", [name, message])
        def getLsModo2(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [10,8,6,5]:
                                        name="Server"
                                        message=client.username+" : Secret"
                                        #data="\x03"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #senderClient.sendData("\x06\x0A", data, True)
                                        senderClient.sendData("\x1A\x05", [name, message])
        def getLsArb(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [3]:
                                        name="Servidor"
                                        message=client.username+" : "+client.room.name
                                        #data="\x02"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #senderClient.sendData("\x06\x0A", data, True)
                                        senderClient.sendData("\x1A\x06", [name, message])

        def getRoomList(self, senderClient):
                found = False
                roomlist=""
                for room in self.rooms.values():
                        roomlist=roomlist+"<br><VP>"+room.name+" : "+str(room.getPlayerCount())
                senderClient.sendData("\x06" + "\x14",[roomlist])
                senderClient.sendData("\x06" + "\x14",["<VP>Número Total de Jogadores:<CH> "+str(self.getConnectedPlayerCount())])
                return found

        def getTribesList(self, senderClient):
                found = False
                tribes={}
                tribelist=""
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.TribeName!="":
                                        try:
                                                tribes[client.TribeName]+=1
                                        except:
                                                tribes[client.TribeName]=1
                for tribename in tribes.keys():
                        tribelist=tribelist+"<br>"+str(tribename)+" : "+str(tribes[tribename])
                tribelistT=tribelist.strip("<br>")
                if tribelistT=="":
                        senderClient.sendData("\x06" + "\x14",[tribelistT])
                else:
                        senderClient.sendData("\x06" + "\x14",[tribelist])
                #senderClient.sendData("\x06" + "\x14",[tribelist])
                return found

        def nomIPCommand(self, senderClient, name):
                iplist="O Último Jogador Conhecido Por Endereço IP ["+name+"] :"
                dbcur.execute('select * from LoginLog where Name = ?', [name])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        for rrf in rrfRows:
                                iplist=iplist+"<br>"+str(rrf[1])
                senderClient.sendData("\x06" + "\x14",[iplist])
        def IPNomCommand(self, senderClient, ip):
                namelist="O Jogadore Está usando o IP ["+str(ip)+"] :"
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.address[0]==ip:
                                        namelist=namelist+"<br>"+str(client.username)
                namehlist="Histórico do IP ["+str(ip)+"] :"
                dbcur.execute('select * from LoginLog where IP = ?', [ip])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        for rrf in rrfRows:
                                namehlist=namehlist+"<br>"+str(rrf[0])
                senderClient.sendData("\x06" + "\x14",[namelist])
                senderClient.sendData("\x06" + "\x14",[namehlist])

        def restartServerDelLog(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(11)
        def restartServer10min(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(12)
        def restartServer5min(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(13)
        def restartServer20min(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(14)
        def restartServerUpdate(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(20)

        def restartServer(self):
                #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(10)

        def stopServer(self):
                #logging.info("Stopping")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(5)

        def removeTempBan(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute("DELETE FROM UserTempBan WHERE Name = ?", [username])
                        return True
                return False
        def checkIPBan(self, ip):
                dbcur.execute('select * from ippermaban where ip = ?', [ip])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return False
                else:
                        return True
        def removeIPBan(self, ip):
                dbcur.execute("DELETE FROM ippermaban WHERE ip = ?", [ip])
                return True
        def checkTempBan(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempBan where Name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return False
                        else:
                                return True
                return False
        def getTempBanInfo(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempBan where Name = ?', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return ["", 0, ""]
                        else:
                                return rrf
                return ["", 0, ""]
        def tempBanUser(self, name, bantime, reason):
                if self.checkTempBan(name):
                        self.removeTempBan(name)
                dbcur.execute("insert into UserTempBan (Name, Time, Reason) values (?, ?, ?)", (str(name).lower().capitalize(), str(getTime()+int((int(bantime)*60*60))), str(reason)))
                #time = time*3600
                #if not name in self.tempAccountBanList:
                #       self.removeTempBanUserTimer = reactor.callLater(time, self.tempBanUserRemove, name)
                #       self.tempAccountBanList.append(name)
        def tempBanIP(self, ipaddr, timee):
                timee = timee*3600
                if not ipaddr in self.tempIPBanList:
                        self.removeTempBanIPTimer = reactor.callLater(timee, self.tempBanIPRemove, ipaddr)
                        self.tempIPBanList.append(ipaddr)
        def tempBanIPExact(self, ipaddr, time):
                if not ipaddr in self.tempIPBanList:
                        self.removeTempBanIPTimer = reactor.callLater(time, self.tempBanIPRemove, ipaddr)
                        self.tempIPBanList.append(ipaddr)
        def tempBanUserRemove(self, name):
                if name in self.tempAccountBanList:
                        self.tempAccountBanList.remove(name)
        def tempBanIPRemove(self, ipaddr):
                if ipaddr in self.tempIPBanList:
                        self.tempIPBanList.remove(ipaddr)

        def checkAlreadyExistingGuest(self, nusername):
                x=0
                found=False
                if not self.checkAlreadyConnectedAccount(nusername):
                        found=True
                        return nusername
                while not found:
                        x+=1
                        if not self.checkAlreadyConnectedAccount(nusername+"_"+str(x)):
                                found=True
                                return nusername+"_"+str(x)

        def checkAlreadyConnectedAccount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = True
                return found

        def addClientToRoom(self, client, roomName):
                roomName = str(roomName)
                if roomName in self.rooms:
                        self.rooms[roomName].addClient(client)
                else:
                        self.rooms[roomName] = TransformiceRoomHandler(self, roomName)
                        self.rooms[roomName].addClient(client)
                #return self.rooms[roomName]

        def closeRoom(self, room):
                if room.name in self.rooms:
                        room.close()
                        del self.rooms[room.name]

        def getConnectedPlayerCount(self):
                count = 0
                for room in self.rooms.values():
                        for player in room.clients.values():
                                count = count+1
                return count

        def generatePlayerCode(self):
                self.lastPlayerCode+=1
                return self.lastPlayerCode

        def recommendRoomPrefixed(self, prefix):
                found=False
                x=0
                while not found:
                        x+=1
                        if prefix+str(x) in self.rooms:
                                playercount=self.rooms[prefix+str(x)].getPlayerCount()
                                if int(playercount)<25:
                                        found=True
                                        return prefix+str(x)
                        else:
                                found=True
                                return prefix+str(x)

        def recommendRoom(self):
                found=False
                x=0
                while not found:
                        x+=1
                        if str(x) in self.rooms:
                                playercount=self.rooms[str(x)].getPlayerCount()
                                if int(playercount)<25:
                                        found=True
                                        return str(x)
                        else:
                                found=True
                                return str(x)

class TransformiceRoomHandler(object):
        def __init__(self, server, name):
                self.server = server
                self.name = name.strip()
##                self.name = self.name.replace("TR_", "")
##                self.name = self.name.replace("DA_", "")
##                self.name = self.name.replace("RU_", "")
##                self.name = self.name.replace("NO_", "")
##                self.name = self.name.replace("CN_", "")
##                self.name = self.name.replace("ES_", "")
##                self.name = self.name.replace("PT_", "")
##                self.name = self.name.replace("SV_", "")
##                self.name = self.name.replace("FR_", "")
##                self.name = self.name.replace("BR_", "")
##                self.name = self.name.replace("EN_", "")
                self.namewihout = self.name.replace("tr_", "")
                self.namewihout = self.namewihout.replace("da_", "")
                self.namewihout = self.namewihout.replace("ru_", "")
                self.namewihout = self.namewihout.replace("no_", "")
                self.namewihout = self.namewihout.replace("cn_", "")
                self.namewihout = self.namewihout.replace("es_", "")
                self.namewihout = self.namewihout.replace("pt_", "")
                self.namewihout = self.namewihout.replace("sv_", "")
                self.namewihout = self.namewihout.replace("fr_", "")
                self.namewihout = self.namewihout.replace("br_", "")
                self.namewihout = self.namewihout.replace("en_", "")

                self.clients = {}
                self.clientsDead = []
				
                self.isRed = False
                self.isBlue = False
                self.isAllowed = False				

                self.currentShamanCode = None
                self.currentSyncroniserCode = None

                self.isDoubleMap = False
                self.currentSecondShamanCode = None
                self.changed20secTimer = False
                self.never20secTimer = False

                self.currentShamanName = None
                self.currentSecondShamanName = None

                self.playerLimit = 200
                
                self.isSandbox = False
                self.isCurrentlyPlayingRoom = False
                self.isEditeur = False
               # self.isTotemEditeur = False
                self.isTotemEditeur = False
                self.isPlay = False
                self.isBootcamp = False
                self.isVanilla = False
                self.isRacing = False
                self.isTribewar = False	
                self.isTesting = False
                self.isHabbit = False				
                self.isMusic = False	
# definições
                self.name = name
                self.ballons = 0
                self.nextshot = 0
                self.sx = 10
                self.sy = 10
                self.btpoints = 10	
                self.mordido = False	
                # LUA MINIGAMES
                self.isTestingRoom = False				
                self.isSharpie = False
                self.isCarnaval = False				
                self.isTraitor = False
                self.isBallonRoom = False				
                self.isSpgame = False
                self.isEventMap = False
                self.isQuiz = False					
                # END LUA MINIGAMES #				
                self.isSurvivor = False
                self.isBaff = False
                self.isBotmj = False
                self.isDefilante = False
                self.noShaman = False
                self.defilanteRound = 0
                self.racingRound = 0
                self.BaffbotffaRound = 0
                self.tribewarRound = 0
                self.testingRound = 0				
                self.RaluteRound = 0
                self.TribeRound = 0				
                self.jaHole = False
                self.isNorm = False
                self.is499969 = False				
                self.isBaffbotffa = False
                self.isRalute = False
                # Football
                self.isFootball = False
                self.isRed = 0
                self.isBlue = 0
                # End				
                self.isTribehouse = False
                self.isPerm = False
                self.specificMap = False
                self.specialMap = 0
                self.isSnowing = False
               # self.isEventMap = False				
                self.properNoShamanMaps = True
                self.isCatchTheCheeseMap = False
                self.isValidate = 0
                self.NoNumberedMaps = False
                self.bulut1 = 0
                self.bulut2 = 0
                self.arkadaslik1 = 0
                self.arkadaslik2 = 0
                self.PTwoCycle = False
                self.PTwoCycleInfo = 0
                self.PTwoCycleList = []
                self.PRShamanIsShaman = False
                self.isTribehouseMap = False
                self.isHalloween = False
                self.iceenabled = False
                self.objectid = 0				

                self.minigame = None
                self.isMinigame = False				


                #                          Code[0], Name[1], XML[2], YesVotes[3], NoVotes[4], Perma[5], Deleted[6], Level[7]
                self.ISCMdata = [0, "Inválido", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0, 0]
                self.ISCM = -1
                self.ISCMstatus = 0

                #                               Code[0], Name[1], XML[2], YesVotes[3], NoVotes[4], Perma[5], Deleted[6], Validated[7]
                self.ISCMVdata =[0, "Inválido", "null", 0, 0, 0, 0, 0]
                self.ISCMV = 0
                self.ISCMVloaded = 0

                self.RoomInvite=[]
                self.PrivateRoom=False

                self.forceNextShaman = False
                self.forceNextMap = False
                self.CodePartieEnCours = 1
                self.CustomMapCounter = 1
                self.identifiantTemporaire = -1

                self.countStats = True
                self.autoRespawn = False
                self.roundTime = 120
                self.rounds = 1

                self.isTutorial = False

                self.votingMode = False
                self.votingBox = False
                self.initVotingMode = True
                self.recievedYes= 0
                self.recievedNo = 0
                self.NavegationStartTimer = None
                self.WindStartTimer = None
                self.voteCloseTimer = None
                self.RainStartTimer = None
                self.StormStartTimer = None
                self.Thunder1StartTimer = None
                self.Thunder2StartTimer = None
                self.Thunder3StartTimer = None                
                self.Thunder4StartTimer = None
                self.Thunder5StartTimer = None
                self.Thunder6StartTimer = None

                self.CheckedPhysics=False
                self.isHardSham=False

                self.SPR_Room = False
                self.eSync      = False
                self.sSync      = True
                self.sNP          = True
                self.sT    = False
                self.spc0        = False
                self.SPR_CM   = 0
				#Conf Hall#
                self.halloweenMobs = {}
                self.halloweenMobsCount = 1
                self.halloweenMap1 = False
                self.halloweenMap2 = False
                self.halloweenMap3 = False
                self.halloweenMap4 = False				
                self.CatZombieDie = False
                self.numCompletedToGo = 0
                self.InitHalloweenMap = 0
                self.Rodagemmapahall = 0				
                self.HalloweenMonstersSended = False
                self.HalloweenSended = False
                self.isHalloweenSend = False
				
                self.startChrimasMap = 0
                self.startmat = 0	
                self.startpascoa = 0				
                #End Conf Hall#
                self.nobodyIsShaman = False

                # hallo map
                self.ZombieTimer = None
                self.isZombieRoom = False

                # art room
                self.isArtRoom = False

                #racing room
                self.isRacingRoom = False
				
                #tribewar room
                self.isTesting = False				
				
                #tribewar room
                self.isTestingRoom = False				
				
                #tribewar room
                self.isTribewarRoom = False

                #shaman room
                self.isShamanRoom = False
								
				
                #baffbotffa room
                self.isBaffbotffa = False	

				#Ralute Room
                self.isRalute = False					

                #fight room
                self.isFightRoom = False
				
                #Ballonroom room
                self.isBallonRoom = False				

                #ratapulta
                self.isRatapult = False
                self.isBaffBalao = False
                self.isBaffbigo = False
                self.isBaffsp = False
                self.isTraitor = False
                self.isMinigame = False
                self.isCampal = False
                self.isPegapega = False
                self.isPictionary = False
                self.isInfection = False
                self.minigame = None
				
                #self.snowStormStartTimer = reactor.callLater(random.randrange(900, 1500), self.startSnowStorm)
                #self.EasterTimer = reactor.callLater(600, self.InitEaster) #600 = 10min				
                
                #self.snowStormStartTimer = reactor.callLater(random.randrange(900, 1500), self.startSnowStorm)
                if self.name == "repeat":
                        self.specificMap = True
                        self.isPlay = True
                        self.currentWorld = "0"
                        self.roundTime = 120
                #elif self.name == "sandbox":
                #       self.specificMap = True
                #       self.isSandbox = True
                #       self.currentWorld = "444"
                if self.name in self.server.SPR:
                        self.SPR_Room=True
                        RunList=self.server.SPRD[:]
                        for position, room in enumerate(RunList):
                                if room[0]==self.name:
                                        self.countStats=room[1]
                                        self.specificMap=room[2]
                                        self.isSandbox=room[3]
                                        if room[4] == 1:
                                                self.currentWorld="-1"
                                                self.SPR_CM=room[5]
                                        elif room[4] == 2:
                                                self.currentWorld="-1"
                                                self.specialMap=room[5]
                                        else:
                                                self.currentWorld=room[5]
                                        self.autoRespawn=room[6]
                                        self.roundTime=room[7]
                                        self.never20secTimer=room[8]
                                        #Extra Vars
                                        self.eSync=room[9]
                                        self.sSync=room[10]
                                        self.sNP=room[11]
                                        self.sT=room[12]
                                        self.spc0=room[13]
                                        self.playerLimit=room[14]
                                        break
                #elif self.name == "racing":
                #       self.countStats = True
                #       self.isRacing = True
                #       self.roundTime = 60
				
                #$ LUA MINIGAMES $#
                elif self.name.startswith("*#"):
                        mg = Minigames.Minigames()
                        s = mg.initMinigame(self.name[2:].lower(), self)
                        if s:
                                self.minigame.load()
                                self.isMinigame = True
                elif self.name[3:].startswith("#"):
                        mg = Minigames.Minigames()
                        s = mg.initMinigame(self.name[4:].lower(), self)
                        if s:
                                self.minigame.load()
                                self.isMinigame = True
                # END OF LUA MINIGAMES #				
				
                elif self.namewihout.startswith("\x03"+"[Private] "):
                        self.countStats = False
                        self.PrivateRoom = True
                        self.roundTime = 120
                        self.never20secTimer = True
                elif self.namewihout.startswith("\x03"+"[Editeur] "):
                        self.countStats = False
                        self.currentWorld = 0
                        #self.specificMap = True
                        self.isEditeur = True
                        self.roundTime = 120
                        self.never20secTimer = True
                elif self.namewihout.startswith("\x03"+"[Totem] "):
                        self.countStats = False
                        #self.isSandbox = True
                        self.currentWorld = 444
                        self.specificMap = True
                        self.isTotemEditeur = True
                        self.roundTime = 3600
                        self.never20secTimer = True
                elif self.namewihout.startswith("\x03"+"[Tutorial] "):
                        self.nobodyIsShaman = True
                        self.countStats = False
                        self.currentWorld = 900
                        self.specificMap = True
                        self.roundTime = 120
                        self.never20secTimer = True
                        self.PrivateRoom = True
                        self.isTutorial = True
                elif re.search("bootcamp", name.lower()):
                        self.countStats = False
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isBootcamp = True
                        self.autoRespawn = True
                        self.roundTime = 360
                        self.never20secTimer = True
                elif re.search("art", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isArtRoom = True
                        self.roundTime = 120
                elif re.search("ratapult", name.lower()):
                        self.isRatapult = True
                        self.countStats = True
                        self.currentWorld = "-1"
                        self.nobodyIsShaman = True
                        self.roundTime = 120
                elif re.search("music", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        #self.nobodyIsShaman = True
                        self.isMusic = True
                        #self.roundTime = 120
                        self.roundTime = 120
                        self.autoRespawn = True							
                elif re.search("testing", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        #self.nobodyIsShaman = True
                        self.isTestingRoom = True
                        #self.roundTime = 120
                        self.roundTime = 60							
                elif re.search("tribewar", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.nobodyIsShaman = True
                        self.isTribewarRoom = True
                        #self.roundTime = 120
                        self.roundTime = 60	
                elif re.search("football", name.lower()):
                        self.countStats = False
                        self.specificMap = True
                        self.isFootball = True
                        self.roundTime = 360
                        self.nobodyIsShaman = True						
                elif re.search("racing", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isRacingRoom = True
                        #self.roundTime = 60
                        self.roundTime = 63
                elif re.search("baffbotffa", name.lower()):
                        self.isBaffbotffa = True
                        self.countStats = True
                        self.currentWorld = "-1"
                        self.nobodyIsShaman = True
                        self.roundTime = 120 
                elif re.search("sharpie", name.lower()):
                        self.isSharpie = True
                        self.countStats = True
                        self.currentWorld = "-1"
                        self.nobodyIsShaman = True
                        self.roundTime = 120 	
                elif re.search("ballon", name.lower()): 
                        self.isBallonRoom = True 
                        self.countStats = False 
                        self.currentWorld = "-1" 
                        self.nobodyIsShaman = True
                        self.roundTime = 120
                elif re.search("habbit", name.lower()): 
                        self.isHabbit = True 
                        self.countStats = False 
                        self.currentWorld = "-1" 
                        self.nobodyIsShaman = True
                        self.roundTime = 120						
		elif re.search("spgame", name.lower()):		
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.nobodyIsShaman = True
                        self.isSpgame = True
                        #self.roundTime = 120
                        self.roundTime = 60   						
                elif re.search("ralute", name.lower()):
                        self.isRalute = True
                        self.countStats = True
                        self.currentWorld = "-1"
                        self.roundTime = 120 
                        self.nobodyIsShaman = True						
                elif re.search("norm", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isNorm = True
                        self.roundTime = 120
                elif re.search("499969", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        self.roundTime = 600
                        self.is499969 = True
                        self.nobodyIsShaman = True
                        self.autoRespawn = True	
                        self.never20secTimer = True						
                elif re.search("fight", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isFightRoom = True
                        self.roundTime = 120
                elif re.search("defilante", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isDefilante = True
                        self.roundTime = 120
                elif re.search("shaman", name.lower()):
                        self.countStats = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isShamanRoom = True
                        self.roundTime = 120
                elif re.search("quiz", name.lower()):
                        self.isQuiz = True
                        self.roundTime = 160
                        self.currentWorld = "-1"
                        #self.specificMap = True							
                elif re.search("vanilla", name.lower()):
                        self.isVanilla = True
                        self.roundTime = 120
                elif re.search("survivor", name.lower()):
                        self.isSurvivor = True
                        self.roundTime = 120
                elif self.namewihout.startswith("*\x03"):
                        self.countStats = False
                        self.isTribehouse = True
                        self.roundTime = 120
                        #self.autoRespawn = True
                        #self.never20secTimer = True
                        #self.nobodyIsShaman = True
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isTribehouseMap = True
                runthismap = self.selectMap(True)
                self.currentWorld = runthismap

                self.everybodyIsShaman = self.isSandbox
                if not self.nobodyIsShaman:
                        if not self.isTribehouseMap:
                                self.nobodyIsShaman = self.isBootcamp
                        else:
                                self.nobodyIsShaman = self.isTribehouseMap

                if self.playerLimit == 0:
                        self.playerLimit = 200
						
                if self.isMinigame:
                        self.minigame.event_createroom(self)						
                
                self.worldChangeTimer = None
                self.killAfkTimer = None
                self.autoRespawnTimer = None
                self.sNNMTimer = None
                self.sPTCTimer = None
                self.HalloweenTimer = None
                self.worldHalloweenTime = None
                if not self.isSandbox:
                                if self.currentWorld==888:
                                        self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                                #elif self.isRacingRoom:
                                #       self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                                else:
                                        self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                                self.killAfkTimer = reactor.callLater(30, self.killAfk)
                                self.closeRoomRoundJoinTimer = reactor.callLater(3, self.closeRoomRoundJoin)
                if self.autoRespawn or self.isTribehouseMap:
                        self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)
                self.gameStartTime = getTime()
                self.numCompleted = 0
                self.numGotCheese = 0
				
        def sendMonterToMap(self, Map):
            if not self.HalloweenMonstersSended:
                self.HalloweenMonstersSended = True
            
                if Map == 1:
                    if self.halloweenMobsCount == 1:
                        while self.halloweenMobsCount < 3:
                            self.spawnMonster(self.halloweenMobsCount, 627, 570, 100)
                            self.halloweenMobsCount += 1
                    
                    if self.halloweenMobsCount == 3:
                        while self.halloweenMobsCount < 6:
                            self.spawnMonster(self.halloweenMobsCount, 627, 480, 280)
                            self.halloweenMobsCount += 1

                    if self.halloweenMobsCount == 6:
                        while self.halloweenMobsCount < 10:
                            self.spawnMonster(self.halloweenMobsCount, 358, 1295, 95)
                            self.halloweenMobsCount += 1
                        
                if Map == 2:
                    if self.halloweenMobsCount == 1:
                        while self.halloweenMobsCount < 9:
                            self.spawnMonster(self.halloweenMobsCount, 627, 1000, 350)
                            self.halloweenMobsCount += 1
                    
                    if self.halloweenMobsCount == 9:
                        while self.halloweenMobsCount < 17:
                            self.spawnMonster(self.halloweenMobsCount, 358, 1900, 350)
                            self.halloweenMobsCount += 1
                        
                if Map == 3:
                    if self.halloweenMobsCount == 1:
                        while self.halloweenMobsCount < 2:
                            self.spawnMonster(self.halloweenMobsCount, 1123, 700, 300)
                            self.halloweenMobsCount += 1
                    
                    if self.halloweenMobsCount == 2:
                        while self.halloweenMobsCount < 5:
                            self.spawnMonster(self.halloweenMobsCount, 358, 400, 290)
                            self.halloweenMobsCount += 1
                if Map == 4:
                    if self.halloweenMobsCount == 1:
                        while self.halloweenMobsCount < 3:
                            self.spawnMonster(self.halloweenMobsCount, 627, 570, 100)
                            self.halloweenMobsCount += 1
                    
                    if self.halloweenMobsCount == 3:
                        while self.halloweenMobsCount < 6:
                            self.spawnMonster(self.halloweenMobsCount, 627, 480, 280)
                            self.halloweenMobsCount += 1

                    if self.halloweenMobsCount == 6:
                        while self.halloweenMobsCount < 10:
                            self.spawnMonster(self.halloweenMobsCount, 358, 1295, 95)
                            self.halloweenMobsCount += 1
							
                    if self.halloweenMobsCount == 10:
                        while self.halloweenMobsCount < 12:
                            self.spawnMonster(self.halloweenMobsCount, 358, 2545, 350)
                            self.halloweenMobsCount += 1
							
                    if self.halloweenMobsCount == 12:
                        while self.halloweenMobsCount < 14:
                            self.spawnMonster(self.halloweenMobsCount, 627, 2252, 328)
                            self.halloweenMobsCount += 1							
            else:
                pass
            
        def spawnMonster(self, MID, Type, X, Y):
            data = ""
        
            if Type == 1123:
                self.halloweenMobs[MID] = {"health":100,"x":X,"y":Y,"type":Type}
                data = "\x68\x61\x74\x00\x00"

            elif Type == 358:
                self.halloweenMobs[MID] = {"health":10,"x":X,"y":Y,"type":Type}
            
            elif Type == 627:
                self.halloweenMobs[MID] = {"health":10,"x":X,"y":Y,"type":Type}
                data = '\x71'
        
            self.sendAllBin("\x1A\x06", str(struct.pack("!iiibh", int(MID), int(X), int(Y), 0, int(Type))) + data)
        
            if Type == 358 or Type == 627:
                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(MID), -2)))
            else:
                pass							

        def respawnMice(self):
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                client.isDead=False
                                client.JumpCheck=1
                                client.playerStartTime = getTime()
                                if self.isBootcamp:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 0])
                                else:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 1])
                if self.autoRespawn or self.isTribehouseMap:
                        self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)

        def respawnSpecific(self, username):
                for playerCode, client in self.clients.items():
                        if client.username == username:
                                client.isDead=False
                                client.JumpCheck=1
                                client.playerStartTime = time.time()
                                if self.isBootcamp:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 0])
                                else:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 1])

        def switchNoNumberedMaps(self, option):
                if self.sNNMTimer:
                        try:
                                self.sNNMTimer.cancel()
                        except:
                                self.sNNMTimer = None
                if option==True:
                        self.NoNumberedMaps = True
                        self.sNNMTimer = reactor.callLater(1200, self.switchNoNumberedMaps, False)
                else:
                        self.NoNumberedMaps = False
                        self.sNNMTimer = reactor.callLater(1200, self.switchNoNumberedMaps, True)
        def sendcarnaval(self):	
                        self.titleList = self.titleList+["292"]
                        self.sendUnlockedTitle(self.playerCode, "292")		
						
        def goZombified(self):
                for playerCode, client in self.clients.items():
                        if client.isSyncroniser:
                                client.sendZombieMode()

        def switchPTwoCycle(self, option):
                if self.sPTCTimer:
                        try:
                                self.sPTCTimer.cancel()
                        except:
                                self.sPTCTimer = None
                if option==True:
                        self.PTwoCycle = True
                        self.sPTCTimer = reactor.callLater(1200, self.switchPTwoCycle, False)
                else:
                        self.PTwoCycle = False
                        self.PTwoCycleInfo=0
                        self.PTwoCycleList=[]
                        self.sPTCTimer = reactor.callLater(1200, self.switchPTwoCycle, True)

        def close(self):
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.HalloweenTimer:
                        try:
                                self.HalloweenTimer.cancel()
                        except:
                                self.HalloweenTimer = None
                
                if self.worldHalloweenTime:
                        try:
                                self.worldHalloweenTime.cancel()
                        except:
                                self.worldHalloweenTime = None									
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                if self.autoRespawnTimer:
                        try:
                                self.autoRespawnTimer.cancel()
                        except:
                                self.autoRespawnTimer=None
                #if self.snowStormStartTimer:
                #       self.snowStormStartTimer.cancel()

        def selectMapSpecific(self, mapnum, custom):
                self.halloweenMobsCount = 1
                self.HalloweenSended = False
                self.HalloweenMonstersSended = False
                self.isHalloweenSend = False		
                if str(mapnum).isdigit():
                        if custom:
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                return "-1"
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Inválido", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0, 0]
                                return int(mapnum)
                else:
                        pass
        
        def selectMapSpecial(self, mapnum):
                if int(mapnum) in self.server.SPMmaps:
                        for spm in self.server.SPM:
                                if spm[0]==int(mapnum):
                                        #SPM.append([code, author, xml])
                                        mapcode = 1
                                        mapname = spm[1]
                                        mapxml   = spm[2]
                                        yesvotes   = 0
                                        novotes = 0
                                        perma     = 2
                                        mapnoexist = 1
                                        level = 0
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                else:
                        print "fail?"
        def selectMap(self, NewRoom = None):
                if self.PTwoCycle:
                        if self.PTwoCycleList == []:
                                #List is empty, populate it.
                                dbcur.execute('select * from mapeditor where perma = 2')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        self.PTwoCycle = False
                                else:
                                        for rrf in rrfRows:
                                                self.PTwoCycleList.append(rrf[1])
                                mapnum   = self.PTwoCycleList[self.PTwoCycleInfo]
                                self.PTwoCycleInfo+=1
                                if self.PTwoCycleInfo==len(self.PTwoCycleList):
                                        self.PTwoCycle=False
                                        self.PTwoCycleInfo=0
                                        self.PTwoCycleList=[]
                                        if self.sPTCTimer:
                                                try:
                                                        self.sPTCTimer.cancel()
                                                except:
                                                        self.sPTCTimer = None
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                return "-1"
                        else:
                                mapnum   = self.PTwoCycleList[self.PTwoCycleInfo]
                                self.PTwoCycleInfo+=1
                                if self.PTwoCycleInfo==len(self.PTwoCycleList):
                                        self.PTwoCycle=False
                                        self.PTwoCycleInfo=0
                                        self.PTwoCycleList=[]
                                        if self.sPTCTimer:
                                                try:
                                                        self.sPTCTimer.cancel()
                                                except:
                                                        self.sPTCTimer = None
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                return "-1"

                if self.NoNumberedMaps:
                        self.ISCMstatus=3
                if self.forceNextMap:
                        forceNextMap = self.forceNextMap
                        self.forceNextMap = False
                        if forceNextMap.startswith("@"):
                                forceNextMap=forceNextMap.replace("@", "")
                                return self.selectMapSpecific(forceNextMap, True)
                        else:
                                return self.selectMapSpecific(forceNextMap, False)
                elif NewRoom:
                        if self.isBootcamp:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 3')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 13')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isNorm:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 0')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.is499969:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 222')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"										
                        elif self.isSurvivor:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 11')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isQuiz:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 54')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isHabbit:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 169')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1" 
                        elif self.isHabbit:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 169')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"										
                        elif self.isRacingRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 7')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isFootball:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 170')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"	
                        elif self.isFootball:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 170')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
										
                        elif self.isTribewarRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 7')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"										
                        elif self.isBaffbotffa:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 31')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"	
                        elif self.isRalute:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 50')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"	
                        elif self.isMusic:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 52')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"	
                        elif self.isMusic:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 52')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"											
                        elif self.isSpgame:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 60')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"											
                        elif self.isRatapult:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 51')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"										
                        elif self.isDefilante:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 18')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isArtRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 5')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isShamanRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 4')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isFightRoom:
                                tipoMapa = random.randint(1, 12)
                                tipoMapa = int(tipoMapa)
                                if tipoMapa == 1:
                                        runthismap = random.choice(LEVEL_LIST_FIGHT)
                                        while runthismap == self.currentWorld:
                                                runthismap = random.choice(LEVEL_LIST_FIGHT)
                                        if self.specificMap:
                                                runthismap = self.currentWorld
                                        return runthismap
                                else:
                                        maplist = []
                                        dbcur.execute('select code from mapeditor where perma = 32')
                                        rrfRows = dbcur.fetchall()
                                        if rrfRows is None:
                                                pass
                                        else:
                                                for rrf in rrfRows:
                                                        maplist.append(rrf[0])
                                        if len(maplist)>=1:
                                                runthismap = random.choice(maplist)
                                        else:
                                                runthismap = ""
                                        if runthismap=="":
                                                self.ISCM = -1
                                                return 0
                                        else:
                                                mapcode = int(runthismap)
                                                mapname = self.server.getMapName(mapcode)
                                                mapxml  = self.server.getMapXML(mapcode)
                                                yesvotes= int(self.server.getMapYesVotes(mapcode))
                                                novotes = int(self.server.getMapNoVotes(mapcode))
                                                perma   = int(self.server.getMapPerma(mapcode))
                                                mapnoexist = int(self.server.getMapDel(mapcode))
                                                level = int(self.server.getMapLevel(mapcode))
                                                self.ISCM = mapcode
                                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                return "-1"
                        elif self.isTribehouse:
                                tribename = self.name[2:]
                                code = self.server.getTribeCode(tribename)
                                TribeData = self.server.getTribeData(int(code[0]))
                                runthismap = TribeData[5]
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                self.tribehouseCM = mapcode
                                self.tribehouseCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                self.isTribehouseMap = True
                                return "-1"
                        elif self.isEditeur:
                                return 0
                        elif self.SPR_Room and self.SPR_CM!=0:
                                runthismap=self.SPR_CM
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                return "-1"
                        elif self.specialMap!=0:
                                return self.selectMapSpecial(self.specialMap)
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Inválido", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0, 0]
                                runthismap = random.choice(LEVEL_LIST)
                                if self.specificMap:
                                        runthismap = self.currentWorld
                                return runthismap
                else:
                        if self.isBootcamp:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 3')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 13')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isNorm:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 0')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isSurvivor:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 10')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                dbcur.execute('select code from mapeditor where perma = 11')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isTribewarRoom:
                                                maplist = [426 , 129 , 425 , 160 , 435 , 437 , 438 , 84 , 80  , 22 , 17 , 181 , 161 , 342 , 97 , 271 , 15 , 434 , 437 , 180]
                                                dbcur.execute('select code from mapeditor where perma = 7')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 7')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"										
                        elif self.isRacingRoom:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 7')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 17')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                        elif self.isHabbit:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 169')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 169')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"														
                        elif self.isMusic:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 52')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 52')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"														
                        elif self.isSpgame:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 60')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 60')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"														
														
                        elif self.isRatapult:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 51')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 51')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"															
			elif self.isBaffbotffa:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 31')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
			elif self.is499969:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 222')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"										
			elif self.isRalute:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 50')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml = self.server.getMapXML(mapcode)
                                        yesvotes = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"											
                        elif self.isDefilante:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 18')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isArtRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 5')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isShamanRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 4')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        level = int(self.server.getMapLevel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                        return "-1"
                        elif self.isFightRoom:
                                tipoMapa = random.randint(1, 12)
                                tipoMapa = int(tipoMapa)
                                if tipoMapa == 1:
                                        runthismap = random.choice(LEVEL_LIST_FIGHT)
                                        while runthismap == self.currentWorld:
                                                runthismap = random.choice(LEVEL_LIST_FIGHT)
                                        if self.specificMap:
                                                runthismap = self.currentWorld
                                        return runthismap
                                else:
                                        maplist = []
                                        dbcur.execute('select code from mapeditor where perma = 32')
                                        rrfRows = dbcur.fetchall()
                                        if rrfRows is None:
                                                pass
                                        else:
                                                for rrf in rrfRows:
                                                        maplist.append(rrf[0])
                                        if len(maplist)>=1:
                                                runthismap = random.choice(maplist)
                                        else:
                                                runthismap = ""
                                        if runthismap=="":
                                                self.ISCM = -1
                                                return 0
                                        else:
                                                mapcode = int(runthismap)
                                                mapname = self.server.getMapName(mapcode)
                                                mapxml  = self.server.getMapXML(mapcode)
                                                yesvotes= int(self.server.getMapYesVotes(mapcode))
                                                novotes = int(self.server.getMapNoVotes(mapcode))
                                                perma   = int(self.server.getMapPerma(mapcode))
                                                mapnoexist = int(self.server.getMapDel(mapcode))
                                                level = int(self.server.getMapLevel(mapcode))
                                                self.ISCM = mapcode
                                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                return "-1"
                        elif self.isTribehouse:
                                self.ISCM = 0
                                self.ISCMdata = [0, "Inválido", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0, 0]
                                return "-1"
                        elif self.isEditeur:
                                if self.ISCMV!=0:
                                        return self.ISCMV
                                else:
                                        return 0
                        elif self.SPR_Room and self.SPR_CM!=0:
                                runthismap=self.SPR_CM
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                level = int(self.server.getMapLevel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                return "-1"
                        elif self.specialMap!=0:
                                return self.selectMapSpecial(self.specialMap)
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Inválido", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0, 0]
                                if self.isVanilla:
                                        runthismap = random.choice(LEVEL_LIST)
                                        while runthismap == self.currentWorld:
                                                runthismap = random.choice(LEVEL_LIST)
                                        if self.specificMap:
                                                runthismap = self.currentWorld
                                        return runthismap
                                else: #ISCM Status: Vanilla/Normal-Protected/Art/Misc/Vanilla/Mechanism/No-shaman/Cooperation/Vanilla/Normal-Protected/Shaman/Mechanism
                                        if self.ISCMstatus==0: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==1: #normal or protected map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 0')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 1')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==2: #art map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 5')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==3: #misc map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 9')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==4: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==5: #mechanism map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 6')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==6: #racing map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 7')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==7: #cooperation map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 8')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==8: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==9: #normal or protected map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 0')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 1')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==10: #shaman map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 4')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        elif self.ISCMstatus==11: #mechanism map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 6')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        level = int(self.server.getMapLevel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist, level]
                                                        return "-1"
                                        else:
                                                #logging.info("Room "+str(self.name)+" got an invalid ISCM Status of "+str(self.ISCMstatus)+".")
                                                self.ISCMstatus=0
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap

        def closeVoting(self):
                self.initVotingMode=False
                self.votingBox=False
                if self.voteCloseTimer:
                        try:
                                self.voteCloseTimer.cancel()
                        except:
                                self.voteCloseTimer=None
                self.worldChange()

        def worldChange(self):
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                self.bBarcoEnviado = False
                self.bVentoEnviado = False
                self.bNavegarEnviado = False
                self.bChuvaEnviada = False
                self.bTempestadeEnviada = False
                self.bTrovao1 = False
                self.bTrovao2 = False
                self.bTrovao3 = False
                self.bTrovao4 = False
                self.bTrovao5 = False
                self.bTrovao6 = False
                if self.ZombieTimer:
                        try:
                                self.ZombieTimer.cancel()
                        except:
                                self.ZombieTimer=None

                if self.NavegationStartTimer:
                        try:
                                self.NavegationStartTimer.cancel()
                        except:
                                self.NavegationStartTimer=None

                if self.WindStartTimer:
                        try:
                                self.WindStartTimer.cancel()
                        except:
                                self.WindStartTimer=None

                if self.RainStartTimer:
                        try:
                                self.RainStartTimer.cancel()
                        except:
                                self.RainStartTimer=None

                if self.StormStartTimer:
                        try:
                                self.StormStartTimer.cancel()
                        except:
                                self.StormStartTimer=None

                if self.Thunder1StartTimer:
                        try:
                                self.Thunder1StartTimer.cancel()
                        except:
                                self.Thunder1StartTimer=None

                if self.Thunder2StartTimer:
                        try:
                                self.Thunder2StartTimer.cancel()
                        except:
                                self.Thunder2StartTimer=None

                if self.Thunder3StartTimer:
                        try:
                                self.Thunder3StartTimer.cancel()
                        except:
                                self.Thunder3StartTimer=None

                if self.Thunder4StartTimer:
                        try:
                                self.Thunder4StartTimer.cancel()
                        except:
                                self.Thunder4StartTimer=None

                if self.Thunder5StartTimer:
                        try:
                                self.Thunder5StartTimer.cancel()
                        except:
                                self.Thunder5StartTimer=None

                if self.Thunder6StartTimer:
                        try:
                                self.Thunder6StartTimer.cancel()
                        except:
                                self.Thunder6StartTimer=None
                if self.initVotingMode:
                        if self.votingBox:
                                pass
                                #print "Tried to go to next map during voting."
                        else:
                                if self.ISCMdata[5]==0 and self.ISCM!=-1:
                                        if not self.isTribehouse:
                                                if self.getPlayerCount()>=2:
                                                        self.votingMode=True
                                                        self.votingBox=True
                                                        self.voteCloseTimer = reactor.callLater(8, self.closeVoting)
                                                        for playerCode, client in self.clients.items():
                                                                client.sendVoteBox(self.ISCMdata[1], self.ISCMdata[3], self.ISCMdata[4])
                                                else:
                                                        self.votingMode=False
                                                        self.closeVoting()
                                        else:
                                                self.votingMode=False
                                                self.closeVoting()
                                else:
                                        self.votingMode=False
                                        self.closeVoting()
                elif self.isEditeur and self.ISCMV==0:
                        pass
                elif self.isTribehouse and self.isTribehouseMap:
                        pass
                else:
                        if self.votingMode:
                                TotalYes=self.ISCMdata[3]+self.recievedYes
                                TotalNo=self.ISCMdata[4]+self.recievedNo
                                if TotalYes+TotalNo>=100:
                                        TotalVotes=TotalYes+TotalNo
                                        Rating=(1.0*TotalYes/TotalVotes)*100
                                        Rating, adecimal, somejunk = str(Rating).partition(".")
                                        if int(Rating)<50:
                                                dbcur.execute('UPDATE mapeditor SET perma = ? WHERE code = ?', ["44", self.ISCMdata[0]])
                                                dbcon.commit()
                                dbcur.execute('UPDATE mapeditor SET yesvotes = ? WHERE code = ?', [int(TotalYes), self.ISCMdata[0]])
                                dbcur.execute('UPDATE mapeditor SET novotes = ? WHERE code = ?', [int(TotalNo), self.ISCMdata[0]])
                                dbcon.commit()
                                self.votingMode=False
                                self.recievedYes=0
                                self.recievedNo =0
                                for playerCode, client in self.clients.items():
                                        client.Voted=False
                                        client.QualifiedVoter=False
                        self.initVotingMode=True

                        self.currentSyncroniserCode = None
                        self.isCurrentlyPlayingRoom = False
                        self.identifiantTemporaire=-1
                        NextCodePartie=self.CodePartieEnCours+1
                        if NextCodePartie>9999:
                                NextCodePartie=1
                        self.CodePartieEnCours=NextCodePartie
                        self.CheckedPhysics=False

                        self.ISCMstatus+=1
                        if self.isSurvivor:
                                if self.ISCMstatus>7:
                                        self.ISCMstatus=0
                        else:
                                if self.ISCMstatus>13:
                                        self.ISCMstatus=0
                                        
                        if self.isRacing or self.isDefilante:
                                self.rounds+=1
                        else:
                                self.rounds=1
                                        
                        self.isHardSham=False

                        for playerCode, client in self.clients.items():
                                client.isAfk=True

                        if self.isSurvivor and self.getPlayerCount(True)>=3:
                                for playerCode, client in self.clients.items():
                                        if not client.isDead and not client.isZombie:
                                                client.score += 10
                                                client.shopcheese += 1
                                                client.sendGiveCurrency(0, 1)

                        if self.isCatchTheCheeseMap==True:
                                self.isCatchTheCheeseMap=False
                        else:
                                if self.isDoubleMap:
                                        numCompleted = self.FSnumCompleted-1
                                else:
                                        numCompleted = self.numCompleted-1
                                if numCompleted < 0:
                                        numCompleted = 0
                                for playerCode, client in self.clients.items():
                                        if client.playerCode == self.currentShamanCode:
                                                client.score = numCompleted
                                if self.currentShamanName:
                                        self.sendAll("\x08" + "\x11",[self.currentShamanName, numCompleted])
                                        for playerCode, client in self.clients.items():
                                                if not client.privilegeLevel==0 and self.currentShamanName == client.username:
                                                        l = client.levelcount.split('/')
                                                        lks = int(numCompleted)*10
                                                        client.nextlevel += int(lks)
                                                        if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                ns = (int(client.nextlevel)-int(l[0]))
                                                                if not ns == 0:
                                                                        lks = int(ns)
                                                                        client.nextlevel = int(ns)
                                                                else:
                                                                        client.nextlevel = 0
                                                                if not l[0] > 30:
                                                                        lehel = int(l[0])+1
                                                                        z = int(lehel)*2
                                                                        n=int(z)+int(l[0])
                                                                else:
                                                                        lehel = int(l[0])+1
                                                                        z = int(lehel)*10
                                                                        n=int(z)+int(l[0])
                                                                if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                        ns = (int(client.nextlevel)-int(l[0]))
                                                                        if not ns == 0:
                                                                                lks = int(ns)
                                                                                client.nextlevel = int(ns)
                                                                        else:
                                                                                client.nextlevel = 0
                                                                        if not l[0] > 30:
                                                                                lehel = int(l[0])+2
                                                                                z = int(lehel)*2
                                                                                n=int(z)+int(l[0])
                                                                        else:
                                                                                lehel = int(l[0])+2
                                                                                z = int(lehel)*10
                                                                                n=int(z)+int(l[0])
                                                                        if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                                ns = (int(client.nextlevel)-int(l[0]))
                                                                                if not ns == 0:
                                                                                        lks = int(ns)
                                                                                        client.nextlevel = int(ns)
                                                                                else:
                                                                                        client.nextlevel = 0
                                                                                if not l[0] > 30:
                                                                                        lehel = int(l[0])+3
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[0])
                                                                                else:
                                                                                        lehel = int(l[0])+3
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[0])
                                                                client.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                client.levelcount = str(lehel)+"/"+str(n)
                                                        if not int(lks) == 0:
                                                                client.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                        if self.isDoubleMap:
                                if self.isCatchTheCheeseMap==True:
                                        self.isCatchTheCheeseMap=False
                                else:
                                        numCompleted = self.SSnumCompleted-1
                                        if numCompleted < 0:
                                                numCompleted = 0
                                        for playerCode, client in self.clients.items():
                                                if client.playerCode == self.currentSecondShamanCode:
                                                        client.score = numCompleted
                                        if self.currentSecondShamanName:
                                                self.sendAll("\x08" + "\x11",[self.currentSecondShamanName, numCompleted])
                                                for playerCode, client in self.clients.items():
                                                        if not client.privilegeLevel==0 and self.currentSecondShamanName == client.username:
                                                                l = client.levelcount.split('/')
                                                                lks = int(numCompleted)*10
                                                                client.nextlevel += int(lks)
                                                                if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                        ns = (int(client.nextlevel)-int(l[0]))
                                                                        if not ns == 0:
                                                                                lks = int(ns)
                                                                                client.nextlevel = int(ns)
                                                                        else:
                                                                                client.nextlevel = 0
                                                                        if not l[0] > 30:
                                                                                lehel = int(l[0])+1
                                                                                z = int(lehel)*2
                                                                                n=int(z)+int(l[0])
                                                                        else:
                                                                                lehel = int(l[0])+1
                                                                                z = int(lehel)*10
                                                                                n=int(z)+int(l[0])
                                                                        if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                                ns = (int(client.nextlevel)-int(l[0]))
                                                                                if not ns == 0:
                                                                                        lks = int(ns)
                                                                                        client.nextlevel = int(ns)
                                                                                else:
                                                                                        client.nextlevel = 0
                                                                                if not l[0] > 30:
                                                                                        lehel = int(l[0])+2
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[0])
                                                                                else:
                                                                                        lehel = int(l[0])+2
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[0])
                                                                                if int(l[0]) < int(client.nextlevel) or int(l[0]) == int(client.nextlevel):
                                                                                        ns = (int(client.nextlevel)-int(l[0]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                client.nextlevel = int(ns)
                                                                                        else:
                                                                                                client.nextlevel = 0
                                                                                        if not l[0] > 30:
                                                                                                lehel = int(l[0])+3
                                                                                                z = int(lehel)*2
                                                                                                n=int(z)+int(l[0])
                                                                                        else:
                                                                                                lehel = int(l[0])+3
                                                                                                z = int(lehel)*10
                                                                                                n=int(z)+int(l[0])
                                                                        client.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                        client.levelcount = str(lehel)+"/"+str(n)
                                                                if not int(lks) == 0:
                                                                        client.sendData("\x08\x09", struct.pack("!h", int(lks)), True)


                        self.currentShamanCode = None
                        self.currentSecondShamanCode = None
                        self.currentShamanName = None
                        self.currentSecondShamanName = None
                        self.SurvivorVamp = False
                        self.isHalloween = False
                        self.isDone = False
                        self.iceenabled = False
                        self.re = 0

                        for playerCode, client in self.clients.items():
                                client.resetPlay()

                        self.isDoubleMap = False
                        self.anchors = []
                        
                        if not self.specificMap:
                                if self.isTribehouse:
                                        self.ISCM = self.tribehouseCM
                                        self.ISCMdata = self.tribehouseCMdata
                                        self.currentWorld = "-1"
                                else:
                                        runthismap = self.selectMap()
                                        self.currentWorld = runthismap

                        if int(self.currentWorld) in [1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 136, 137, 138, 139, 140, 141, 142, 143] and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if (self.ISCMdata[5] == 8 or self.ISCMdata[5] == 32) and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if (self.ISCMdata[5] == 55) and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if self.currentWorld != -1:
                                self.WorldFound = random.randint(0, 5)

                        #if random.randrange(1000, 1030)==1024 and int(self.getPlayerCount())>=2:
                        #       self.isDoubleMap = True

                        if self.currentWorld==888:
                                self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                        else:
                                if not self.roundTime == 0:
                                        self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                        #self.worldChangeTimer = reactor.callLater(120, self.worldChange)
                        self.killAfkTimer = reactor.callLater(30, self.killAfk)
                        if self.autoRespawn or self.isTribehouseMap:
                                if self.autoRespawnTimer:
                                        try:
                                                self.autoRespawnTimer.cancel()
                                        except:
                                                self.autoRespawnTimer=None
                                self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)
                        if self.isSandbox:
                                try:
                                        self.worldChangeTimer.cancel()
                                except:
                                        self.worldChangeTimer=None
                                try:
                                        self.killAfkTimer.cancel()
                                except:
                                        self.killAfkTimer=None
                        self.gameStartTime = getTime()
                        self.numCompleted = 0
                        self.FSnumCompleted = 0
                        self.SSnumCompleted = 0
                        self.numGotCheese = 0
                        self.changed20secTimer = False
                        
                        if self.isTribehouse:
                                self.isTribehouseMap = True
                        
                        for playerCode, client in self.clients.items():
                                client.startPlay(-1, 0)
                                if client.isHidden:
                                        client.sendPlayerDisconnect(client.playerCode)
                        self.closeRoomRoundJoinTimer = reactor.callLater(2, self.closeRoomRoundJoin)

        def sendCalendar(self, day):
            self.sendAllBin("\x1A\x1D", struct.pack("!h", int(day)))						
																		
        def MoveMobilViaSync(self, Map):
            if not self.HalloweenSended:
                self.HalloweenSended = True
                if Map == 1:
                    self.Tiker1 = threading.Timer(1, self.sendMoveMobMap1)
                    self.Tiker1.start()
                
                if Map == 2:
                    self.Tiker2 = threading.Timer(1, self.sendMoveMobMap2)
                    self.Tiker2.start()
                
                if Map == 3:
                    self.Tiker3 = threading.Timer(1, self.sendMoveMobMap3)
                    self.Tiker3.start()
					
                if Map == 4:
                    self.Tiker4 = threading.Timer(1, self.sendMoveMobMap4)
                    self.Tiker4.start()					

        def sendMoveMobMap1(self):
            if self.halloweenMap1:
                x = 1
                pos = -2
                while x <= self.halloweenMobsCount:
                    try:
                        if self.halloweenMobs[x]["type"] != 1123 and self.halloweenMobs[x]["health"] > 0:
                            sy = random.choice([0,1])
                            if sy == 1:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(2))))
                            else:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(-2))))
                            
                        x += 1
                    
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime1 = threading.Timer(5, self.sendMoveMobMap1)
                            self.MoveMobeMapTime1.start()
                            break

                    except:
                        x += 1
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime1 = threading.Timer(5, self.sendMoveMobMap1)
                            self.MoveMobeMapTime1.start()
                            break
            else:
                if self.MoveMobeMapTime1:
                    try:
                        self.MoveMobeMapTime1.cancel()
                    except:
                        self.MoveMobeMapTime1=None
                else:
                    try:
                        self.MoveMobeMapTime1.cancel()
                    except:
                        self.MoveMobeMapTime1=None
                
        def sendMoveMobMap2(self):
            if self.halloweenMap2:
                x = 1
                pos = -2
                while x <= self.halloweenMobsCount:
                    try:
                        if self.halloweenMobs[x]["type"] != 1123 and self.halloweenMobs[x]["health"] > 0:
                            sy = random.choice([0,1])
                            if sy == 1:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(2))))
                            else:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(-2))))
                            
                        x += 1
                    
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime2 = threading.Timer(5, self.sendMoveMobMap2)
                            self.MoveMobeMapTime2.start()
                            break

                    except:
                        x += 1
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime2 = threading.Timer(5, self.sendMoveMobMap2)
                            self.MoveMobeMapTime2.start()
                            break
            else:
                if self.MoveMobeMapTime2:
                    try:
                        self.MoveMobeMapTime2.cancel()
                    except:
                        self.MoveMobeMapTime2=None
                else:
                    try:
                        self.MoveMobeMapTime2.cancel()
                    except:
                        self.MoveMobeMapTime2=None
        
        def sendMoveMobMap3(self):
            if self.halloweenMap3:
                x = 2
                pos = -2
                while x <= self.halloweenMobsCount:
                    try:
                        if self.halloweenMobs[x]["type"] != 1123 and self.halloweenMobs[x]["health"] > 0:
                            sy = random.choice([0,1])
                            if sy == 1:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(2))))
                            else:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(-2))))
                            
                        x += 1
                    
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime3 = threading.Timer(5, self.sendMoveMobMap3)
                            self.MoveMobeMapTime3.start()
                            break

                    except:
                        x += 1
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime3 = threading.Timer(5, self.sendMoveMobMap3)
                            self.MoveMobeMapTime3.start()
                            break
            else:
                if self.MoveMobeMapTime3:
                    try:
                        self.MoveMobeMapTime3.cancel()
                    except:
                        self.MoveMobeMapTime3=None
                else:
                    try:
                        self.MoveMobeMapTime3.cancel()
                    except:
                        self.MoveMobeMapTime3=None
						
        def sendMoveMobMap4(self):
            if self.halloweenMap4:
                x = 1
                pos = -2
                while x <= self.halloweenMobsCount:
                    try:
                        if self.halloweenMobs[x]["type"] != 1123 and self.halloweenMobs[x]["health"] > 0:
                            sy = random.choice([0,1])
                            if sy == 1:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(2))))
                            else:
                                self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(x), int(-2))))
                            
                        x += 1
                    
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime2 = threading.Timer(5, self.sendMoveMobMap4)
                            self.MoveMobeMapTime2.start()
                            break

                    except:
                        x += 1
                        if x >= self.halloweenMobsCount:
                            self.MoveMobeMapTime2 = threading.Timer(5, self.sendMoveMobMap4)
                            self.MoveMobeMapTime2.start()
                            break
            else:
                if self.MoveMobeMapTime2:
                    try:
                        self.MoveMobeMapTime2.cancel()
                    except:
                        self.MoveMobeMapTime2=None
                else:
                    try:
                        self.MoveMobeMapTime2.cancel()
                    except:
                        self.MoveMobeMapTime2=None						
                
        def sendStormToMap3(self):
            if self.halloweenMap3:
                self.HalloweenStorm1 = reactor.callLater(1, self.sendAllBin, "\x05\x2C", struct.pack("!h", 7))
                self.HalloweenStorm2 = reactor.callLater(5, self.sendAllBin, "\x05\x2C", struct.pack("!h", 10))
                self.HalloweenStorm3 = reactor.callLater(7, self.sendAllBin, "\x05\x2C", struct.pack("!h", 7))
                self.StormMapTime1 = threading.Timer(15, self.sendStormToMap3)
                self.StormMapTime1.start()
            
            else:
                if self.HalloweenStorm1:
                    try:
                        self.HalloweenStorm1.cancel()
                    except:
                        self.HalloweenStorm1=None
                    
                if self.HalloweenStorm2:
                    try:
                        self.HalloweenStorm2.cancel()
                    except:
                        self.HalloweenStorm2=None
                    
                if self.HalloweenStorm3:
                    try:
                        self.HalloweenStorm3.cancel()
                    except:
                        self.HalloweenStorm3=None
                    
                if self.StormMapTime1:
                    try:
                        self.StormMapTime1.cancel()
                    except:
                        self.StormMapTime1=None
                else:
                    try:
                        self.StormMapTime1.cancel()
                    except:
                        self.StormMapTime1=None
            
        def removeMob(self, ID, Type, posX):
            self.sendAllBin("\x1A\x07", str(struct.pack("!i", int(ID))) + "\x01")
            if self.isHalloween:
                self.removeMobTime = threading.Timer(2, self.sendMobRespawn, [Type, posX])
                self.removeMobTime.start()
            
            else:
                if self.removeMobTime:
                    try:
                        self.removeMobTime.cancel()
                    except:
                        self.removeMobTime=None
                else:
                    try:
                        self.removeMobTime.cancel()
                    except:
                        self.removeMobTime=None
            
        def sendMobRespawn(self, Type, posX):
            if self.isHalloween:
                self.halloweenMobsCount += 1
                if self.halloweenMap1:
                    if Type == 358:self.spawnMonster(self.halloweenMobsCount, 358, 1295, 95)
                
                    elif Type == 627:
                        if posX == 570:self.spawnMonster(self.halloweenMobsCount, 627, 570, 100)
                        else:self.spawnMonster(self.halloweenMobsCount, 627, 480, 280)
                    
                elif self.halloweenMap2:
                    if Type == 358:self.spawnMonster(self.halloweenMobsCount, 358, 1900, 350)
                    elif Type == 627:self.spawnMonster(self.halloweenMobsCount, 627, 1000, 350)

                elif self.halloweenMap3:
                    if Type == 358:self.spawnMonster(self.halloweenMobsCount, 358, 400, 290)
					
                elif self.halloweenMap4:
                    if Type == 358:self.spawnMonster(self.halloweenMobsCount, 358, 1900, 350)
                    elif Type == 627:self.spawnMonster(self.halloweenMobsCount, 627, 1000, 350)					
                
            else:
                pass						

        def worldChangeSpecific(self, mapnumber, custom = None, special = None):
                mapnumber = int(mapnumber)
                self.identifiantTemporaire=-1
                NextCodePartie=self.CodePartieEnCours+1
                if NextCodePartie>9999:
                        NextCodePartie=1
                self.CodePartieEnCours=NextCodePartie
                self.CheckedPhysics=False
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
								
                if self.HalloweenTimer:
                        try:
                                self.HalloweenTimer.cancel()
                        except:
                                self.HalloweenTimer=None								
								
                self.currentSyncroniserCode = None
                self.isCurrentlyPlayingRoom = False
                self.isHardSham=False
                for playerCode, client in self.clients.items():
                        client.isAfk=True
                if self.isCatchTheCheeseMap==True:
                        self.isCatchTheCheeseMap=False
                else:
                        if self.isDoubleMap:
                                numCompleted = self.FSnumCompleted-1
                        else:
                                numCompleted = self.numCompleted-1
                        if numCompleted < 0:
                                numCompleted = 0
                        if self.currentShamanName:
                                self.sendAll("\x08" + "\x11",[self.currentShamanName, numCompleted])
										

                if self.isDoubleMap:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        client.score = 0
                        if self.isCatchTheCheeseMap==True:
                                self.isCatchTheCheeseMap=False
                        else:
                                numCompleted = self.SSnumCompleted-1
                                if numCompleted < 0:
                                        numCompleted = 0
                                if self.currentSecondShamanName:
                                        self.sendAll("\x08" + "\x11",[self.currentSecondShamanName, numCompleted])
                self.currentShamanCode = None
                self.currentSecondShamanCode = None
                self.currentShamanName = None
                self.currentSecondShamanName = None
                for playerCode, client in self.clients.items():
                        client.resetPlay()
                self.isDoubleMap = False
                if special:
                        self.currentWorld = self.selectMapSpecial(mapnumber)
                elif custom:
                        self.currentWorld = self.selectMapSpecific(mapnumber, True)
                else:
                        self.currentWorld = self.selectMapSpecific(mapnumber, False)
                if int(self.currentWorld) in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53] and int(self.getPlayerCount())>=2:
                        self.isDoubleMap = True
                if self.ISCMdata[5] == 8 and int(self.getPlayerCount())>=2:
                        self.isDoubleMap = True
                if self.currentWorld==888:
                        self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                #elif self.isRacingRoom:
                #        self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                else:
                        if not self.roundTime == 0:
                                self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                self.killAfkTimer = reactor.callLater(30, self.killAfk)
                if self.isSandbox:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                
                self.gameStartTime = getTime()
                self.numCompleted = 0
                self.numCompletedToGo = 0
            
                if self.isHalloween:
                    self.halloweenMobs = {}
                
                self.halloweenMobsCount = 1
                self.HalloweenSended = False
                self.HalloweenMonstersSended = False
                self.isHalloweenSend = False
        
                self.FSnumCompleted = 0
                self.SSnumCompleted = 0
                self.numGotCheese = 0
                self.changed20secTimer = False
				
                for playerCode, client in self.clients.items():
                        client.startPlay(-1, 0)
                
                if self.specificMap == 2:
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 1))
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 6))
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 2))
                
                self.closeRoomRoundJoinTimer = reactor.callLater(0, self.closeRoomRoundJoin)
                self.isTribehouseMap = False

        def checkShouldChangeWorld(self):
                if self.isBootcamp:
                        pass
                elif self.isTribehouse and self.isTribehouseMap:
                        pass
                elif self.currentWorld == 900:
                        pass
                elif self.isSandbox:
                        pass
                elif self.roundTime == 0:
                        pass
                else:
                        if all(client.isDead for client in self.clients.values()):
                                try:
                                        self.worldChangeTimer.cancel()
                                except:
                                        self.worldChangeTimer=None
                                if self.killAfkTimer:
                                        try:
                                                self.killAfkTimer.cancel()
                                        except:
                                                self.killAfkTimer=None
                                if self.HalloweenTimer:
                                        try:
                                                self.HalloweenTimer.cancel()
                                        except:
                                                self.HalloweenTimer=None												
                                if self.closeRoomRoundJoinTimer:
                                        try:
                                                self.closeRoomRoundJoinTimer.cancel()
                                        except:
                                                self.closeRoomRoundJoinTimer=None
                                                
                                self.worldChange()

        def giveShamanHardSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.hardModeSaves += 1
                                if client.privilegeLevel != 0:
                                        if client.hardModeSaves in client.hardShamTitleCheckList:
                                                unlockedtitle=client.hardShamTitleDictionary[client.hardModeSaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.HardModeTitleList=client.HardModeTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.HardModeTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList+client.BootcampTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+["440","442","444","201","445","446","447","448"]
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def giveShamanSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.micesaves += 1
                                if client.privilegeLevel != 0:
                                        if client.micesaves in client.shamanTitleCheckList:
                                                unlockedtitle=client.shamanTitleDictionary[client.micesaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.ShamanTitleList=client.ShamanTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.HardModeTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList+client.BootcampTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+["440","442","444","201","445","446","447","448"]
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def giveSecondShamanSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentSecondShamanCode:
                                client.micesaves += 1
                                if client.privilegeLevel != 0:
                                        if client.micesaves in client.shamanTitleCheckList:
                                                unlockedtitle=client.shamanTitleDictionary[client.micesaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.ShamanTitleList=client.ShamanTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+["440","442","444","201","445","446","447","448"]
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def checkDeathCount(self):
                counts=[0,0] #Dead, Alive
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                counts[0]=counts[0]+1
                        else:
                                counts[1]=counts[1]+1
                return counts
        def checkIfTooFewRemaining(self):
                counts=[0,0] #Dead, Alive
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                counts[0]=counts[0]+1
                        else:
                                counts[1]=counts[1]+1
                if self.getPlayerCount>=2:
                        if counts[1]<=2:
                                return True
                return False
        def checkIfOneFewRemaining(self):
                counts=[0,0] #Dead, Alive
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                counts[0]=counts[0]+1
                        else:
                                counts[1]=counts[1]+1
                if self.getPlayerCount>=1:
                        if counts[1]<=1:
                                return True
                return False
        def checkIfDoubleShamansAreDead(self):
                result=0
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode or client.playerCode == self.currentSecondShamanCode:
                                if client.isDead:
                                        result+=1
                                else:
                                        pass
                if result==2:
                        return True
                else:
                        return False
        def checkIfDoubleShamanAreDead(self):
                result=0
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode or client.playerCode == self.currentSecondShamanCode:
                                if client.isDead:
                                        result+=1
                                else:
                                        pass
                if result==1:
                        return True
                else:
                        return False
        def checkIfShamanIsDead(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                if client.isDead:
                                        pass
                                else:
                                        return False
                return True

        def checkIfShamanCanGoIn(self):
                allgone=1
                #if all(client.isDead for client in self.clients.values()):
                for playerCode, client in self.clients.items():
                        if client.playerCode != self.currentShamanCode:
                                if client.isDead:
                                        pass
                                else:
                                        allgone=0
                if allgone==1:
                        return 1
                else:
                        return 0

        def checkIfDoubleShamanCanGoIn(self):
                counts=[0,0,0,0] #Dead Shamans, Dead Mice, Not Dead Shamans, Not Dead Mice
                #if all(client.isDead for client in self.clients.values()):
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                if client.playerCode == self.currentShamanCode:
                                        counts[0]=counts[0]+1
                                elif client.playerCode == self.currentSecondShamanCode:
                                        counts[0]=counts[0]+1
                                else:
                                        counts[1]=counts[1]+1
                        else:
                                if client.playerCode == self.currentShamanCode:
                                        counts[2]=counts[2]+1
                                elif client.playerCode == self.currentSecondShamanCode:
                                        counts[2]=counts[2]+1
                                else:
                                        counts[3]=counts[3]+1
                #print counts
                if counts[3]==0:
                        return True
                else:
                        return False

        def resetSandbox(self):
                if self.isSandbox:
                        for playerCode, client in self.clients.items():
                                resetpscore=0
                                client.sendPlayerDied(client.playerCode, resetpscore)
                                client.isDead=True
                        if all(client.isDead for client in self.clients.values()):
                                #self.worldChangeTimer.cancel()
                                #self.worldChange()
                                for playerCode, client in self.clients.items():
                                        client.resetPlay()
                                self.currentWorld = self.currentWorld
                                for playerCode, client in self.clients.items():
                                        client.startPlay(-1,0)
                else:
                        pass
        def resetRoom(self):
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                if self.HalloweenTimer:
                        try:
                                self.HalloweenTimer.cancel()
                        except:
                                self.HalloweenTimer=None								
                if self.autoRespawnTimer:
                        try:
                                self.autoRespawnTimer.cancel()
                        except:
                                self.autoRespawnTimer=None
                for playerCode, client in self.clients.items():
                        resetpscore=0
                        client.sendPlayerDied(client.playerCode, resetpscore)
                        client.isDead=True
                if all(client.isDead for client in self.clients.values()):
                        self.worldChange()
                        #for playerCode, client in self.clients.items():
                        #       client.resetPlay()
                        #self.currentWorld = self.currentWorld
                        #for playerCode, client in self.clients.items():
                        #       client.startPlay(0,0)
        def moveAllRoomClients(self, name, rec = False):
                if rec:
                        for playerCode, client in self.clients.items():
                                self.MoveTimer = reactor.callLater(0, client.enterRoom, self.server.recommendRoom())
                else:
                        for playerCode, client in self.clients.items():
                                self.MoveTimer = reactor.callLater(0, client.enterRoom, str(name))

        def addClient(self, newClient):
                SPEC = 0

                if self.isCurrentlyPlayingRoom:
                        newClient.isDead=True
                        SPEC = 1

                self.clients[newClient.playerCode] = newClient
                newClient.room = self

                if self.sNP:
                        newClient.sendNewPlayer(newClient.getPlayerData())
						
                if self.isMinigame:
                        self.minigame.event_enterroom(newClient)						

                newClient.startPlay(self.ISCM, SPEC)

                #print self.clients

        def updatesqlserver(self):
                for playerCode, client in self.clients.items():
                        if client.username.startswith("*"):
                                pass
                        else:
                                client.updateSelfSQL()

        def removeClient(self, removeClient):
                if removeClient.playerCode in self.clients:
                        for playerCode, client in self.clients.items():
                                if playerCode == removeClient.playerCode:
                                        if client.username.startswith("*"):
                                                pass
                                        else:
                                                client.updateSelfSQL()
												
                        if self.isMinigame:
                                self.minigame.event_leaveroom(removeClient)												

                        del self.clients[removeClient.playerCode]

                        if self.getPlayerCount() == 0:
                                self.server.closeRoom(self)
                                return

                        removeClient.sendPlayerDisconnect(removeClient.playerCode)
                        if self.currentSyncroniserCode == removeClient.playerCode:
                                newSyncroniser = random.choice(self.clients.values())
                                newSyncroniser.isSyncroniser = True

                                self.currentSyncroniserCode = newSyncroniser.playerCode
                                newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

                self.checkShouldChangeWorld()

        def changeSyncroniserRandom(self):
                newSyncroniser = random.choice(self.clients.values())
                newSyncroniser.isSyncroniser = True
                self.currentSyncroniserCode = newSyncroniser.playerCode
                newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

        def changeSyncroniserSpecific(self, username):
                newSyncroniser = False
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        newSyncroniser = client
                                        break
                if newSyncroniser:
                        newSyncroniser.isSyncroniser = True
                        self.currentSyncroniserCode = newSyncroniser.playerCode
                        newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

        def changeScore(self, playerCode, score):
                for playerCode, client in self.clients.items():
                        if client.playerCode == playerCode:
                                client.score = score

        def startSnowStorm(self):
                self.sendAll("\x05" + "\x17", ["0"])
                #self.isSnowing=True
                #self.endSnowStormTimer = reactor.callLater(300, self.endSnowStorm)

        def endSnowStorm(self):
                self.sendAll("\x05" + "\x17", [])
                self.isSnowing=False
                #self.snowStormStartTimer = reactor.callLater(random.randrange(900, 1500), self.startSnowStorm)

        def informAll(self, clientFunction, args):
                #logging.warning("Deprecated Function \"informAll\". Vars: clientFunction-"+str(clientFunction)+" args-"+str(args))
                for playerCode, client in self.clients.items():
                        clientFunction(client, *args)

        def forceEmoteAll(self, emoteCode):
                for playerCode, client in self.clients.items():
                    for playerCode2, client2 in self.clients.items():
                        client.sendPlayerEmote(playerCode2, emoteCode, False)						
						
        def informAllOthers(self, senderClient, clientFunction, args):
                #logging.warning("Deprecated Function \"informAllOthers\". Vars: clientFunction-"+str(clientFunction)+" args-"+str(args))
                for playerCode, client in self.clients.items():
                        if playerCode != senderClient.playerCode:
                                clientFunction(client, *args)

        def sendSync(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.isSyncroniser:
                                client.sendData(eventTokens, data)
        def sendAll(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data)
        def sendAllBR(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.Langue == "br":
                                client.sendData(eventTokens, data)
        def sendAllEN(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.Langue == "en":
                                client.sendData(eventTokens, data)
        def sendAllOthers(self, senderClient, eventTokens, data):
                for playerCode, client in self.clients.items():
                        if client.playerCode != senderClient.playerCode:
                                client.sendData(eventTokens, data)
        def sendAllOthersAndSelf(self, senderClient, eventTokens, data):
                #logging.warning("Deprecated Function \"sendAllOthersAndSelf\". Vars: eventTokens-"+str(repr(eventTokens))+" data-"+str(repr(data)))
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data)

        def sendAllChat(self, sendplayerCode, username, message):
                for playerCode, client in self.clients.items():
                        if client.muteChat:
                                pass
                        else:
                                if client.censorChat:
                                        Cmessage=client.censorMessage(message)
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=Cmessage
                                                else:
                                                        try:
                                                                Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                        except:
                                                                pass
                                        sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                else:
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=message
                                                else:
                                                        Tmessage=message
                                                        try:
                                                                Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                        except:
                                                                pass
                                                        sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                        else:
                                                sendMessage=struct.pack('!h', len(message))+message
                                #client.sendData("\x06\x06", sendplayerCode+username+sendMessage+"\x00\x00", True)
                                reactor.callLater(0, client.sendData, "\x06\x06", sendplayerCode+username+sendMessage+"\x00\x00", True)
                                reactor.callLater(0, client.sendData, "\x06\x06", sendplayerCode+username+"\x03"+sendMessage+"\x00\x00", True)
        def sendAllChatColored(self, sendplayerCode, username, message):
                for playerCode, client in self.clients.items():
                        if client.muteChat:
                                pass
                        else:
                                if client.censorChat:
                                        Cmessage=client.censorMessage(message)
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=Cmessage
                                                else:
                                                        try:
                                                                Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                        except:
                                                                pass
                                        sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                else:
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=message
                                                else:
                                                        Tmessage=message
                                                        try:
                                                                Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                        except:
                                                                pass
                                                        sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                        else:
                                                sendMessage=struct.pack('!h', len(message))+message
                                if client.isShaman:
                                        username = "Shaman "+username[2:]
                                        sendMessage = "<CH><B>"+sendMessage[2:]+"</B>"
                                else:
                                        username = "<N>"+username[2:]
                                        sendMessage = "<N>"+sendMessage[2:]
                                client.sendMessage("<font color=\"#"+client.chatcolor+"\">["+username+"]</font> "+sendMessage)
        def sendAllChatF(self, sendplayerCode, username, message, senderClient):
                for playerCode, client in self.clients.items():
                        if int(client.playerCode)==int(senderClient.playerCode):
                                if client.muteChat:
                                        pass
                                else:
                                        if client.censorChat:
                                                Cmessage=client.censorMessage(message)
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=Cmessage
                                                        else:
                                                                try:
                                                                        Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                        else:
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=message
                                                        else:
                                                                Tmessage=message
                                                                try:
                                                                        Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                                sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                                else:
                                                        sendMessage=struct.pack('!h', len(message))+message
                                        client.sendData("\x06\x06", sendplayerCode+username+sendMessage+"\x00\x00", True)
        def sendAllChatFColored(self, sendplayerCode, username, message, senderClient):
                for playerCode, client in self.clients.items():
                        if int(client.playerCode)==int(senderClient.playerCode):
                                if client.muteChat:
                                        pass
                                else:
                                        if client.censorChat:
                                                Cmessage=client.censorMessage(message)
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=Cmessage
                                                        else:
                                                                try:
                                                                        Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                        else:
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=message
                                                        else:
                                                                Tmessage=message
                                                                try:
                                                                        Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                                sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                                else:
                                                        sendMessage=struct.pack('!h', len(message))+message
                                        if client.isShaman:
                                                username = "Shaman "+username[2:]
                                                sendMessage = "<CH>"+sendMessage[2:]
                                        else:
                                                username = "<N>"+username[2:]
                                                sendMessage = "<N>"+sendMessage[2:]
                                        client.sendMessage("<font color=\"#"+client.chatcolor+"\">["+username+"]</font> "+sendMessage)
        def sendAllBin(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data, True)
						
        def sendAllItens(self):
            for playerCode, client in self.clients.items():
                client.GetItemHalloween()						
						
        def sendAllBinEN(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.Langue == "en":
                                client.sendData(eventTokens, data, True)
        def sendAllBinBR(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.Langue == "br":
                                client.sendData(eventTokens, data, True)
        def sendAllOthersBin(self, senderClient, eventTokens, data):
                for playerCode, client in self.clients.items():
                        if client.playerCode != senderClient.playerCode:
                                client.sendData(eventTokens, data, True)
        def sendAllPvSpec(self, eventTokens, privlevels, data = None, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel in privlevels:
                                if binary:
                                        client.sendData(eventTokens, data, True)
                                else:
                                        client.sendData(eventTokens, data)
        def sendAllPvSpec2(self, eventTokens, privlevels, data = None, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel in privlevels:
                                if client.privilegeLevel>=4:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)
        def sendAllPvSpecOthers(self, senderClient, eventTokens, privlevels, data = None, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel in privlevels:
                                if client.playerCode != senderClient.playerCode:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)
        def sendWholeTribeRoom(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(senderClient.TribeCode):
                                if client.isInTribe:
                                        if binary:
                                                if NotIgnorable:
                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        if not client.muteTribe:
                                                                client.sendData(eventTokens, data, True)
                                        else:
                                                if NotIgnorable:
                                                        client.sendData(eventTokens, data)
                                                else:
                                                        if not client.muteTribe:
                                                                client.sendData(eventTokens, data)
        def sendWholeTribeOthersRoom(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(senderClient.TribeCode):
                                if client.isInTribe:
                                        if client.playerCode != senderClient.playerCode:
                                                if binary:
                                                        if NotIgnorable:
                                                                client.sendData(eventTokens, data, True)
                                                        else:
                                                                if not client.muteTribe:
                                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        if NotIgnorable:
                                                                client.sendData(eventTokens, data)
                                                        else:
                                                                if not client.muteTribe:
                                                                        client.sendData(eventTokens, data)
        def sendTribeInfoUpdateRoom(self, code, greeting = None, playerlist = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(code):
                                UserTribeInfo=self.server.getUserTribeInfo(client.username)
                                if UserTribeInfo[0]=="":
                                        client.TribeCode        = ""
                                        client.TribeName        = ""
                                        client.TribeFromage = 0
                                        client.TribeMessage = ""
                                        client.TribeInfo        = ""
                                        client.TribeRank        = ""
                                        client.TribeHouse       = "0"
                                        client.isInTribe        = False
                                        client.muteTribe        = False
                                        client.sendTribeZeroGreeting()
                                        client.tribe            = self.server.getTribeName(client.username)
                                else:
                                        TribeData                  = self.server.getTribeData(UserTribeInfo[1])
                                        client.TribeCode        = TribeData[0]
                                        client.TribeName        = TribeData[1]
                                        client.TribeFromage = TribeData[2]
                                        client.TribeMessage = TribeData[3]
                                        client.TribeInfo        = TribeData[4].split("|")
                                        client.TribeRank        = UserTribeInfo[2]
                                        client.TribeHouse       = TribeData[5]
                                        client.isInTribe        = True
                                        if greeting:
                                                client.sendTribeGreeting()
                                        if playerlist:
                                                client.sendTribeList()

        def sendWholeServer(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllBin, eventTokens, data)
                        else:
                                reactor.callLater(0, room.sendAll, eventTokens, data)
                        #for playerCode, client in room.clients.items():
                        #       if binary:
                        #               client.sendData(eventTokens, data, True)
                        #       else:
                        #               client.sendData(eventTokens, data)

        def sendWholeServerBR(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllBinBR, eventTokens, data)
                        else:
                                reactor.callLater(0, room.sendAllBR, eventTokens, data)
                        #for playerCode, client in room.clients.items():
                        #       if binary:
                        #               client.sendData(eventTokens, data, True)
                        #       else:
                        #               client.sendData(eventTokens, data)

        def sendWholeServerEN(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllBinEN, eventTokens, data)
                        else:
                                reactor.callLater(0, room.sendAllEN, eventTokens, data)
                        #for playerCode, client in room.clients.items():
                        #       if binary:
                        #               client.sendData(eventTokens, data, True)
                        #       else:
                        #               client.sendData(eventTokens, data)

        def checkRoomInvite(self, senderClient, name):
                for room in self.server.rooms.values():
                        if room.namewihout == "\x03[Private] "+name:
                                if senderClient.username in room.RoomInvite:
                                        return True
                                else:
                                        return False
                return False

        def sendMappersChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpec2, eventTokens, [10,8,6,5,4,3], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpec2, eventTokens, [10,8,6,5,4,3], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                        #               if binary:
                        #                       client.sendData(eventTokens, data, True)
                        #               else:
                        #                       client.sendData(eventTokens, data)

        def sendArbChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,8,6,5,4,3], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,8,6,5,4,3], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                        #               if binary:
                        #                       client.sendData(eventTokens, data, True)
                        #               else:
                        #                       client.sendData(eventTokens, data)
        def sendModChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,8,6,5], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,8,6,5], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5:
                        #               if binary:
                        #                       client.sendData(eventTokens, data, True)
                        #               else:
                        #                       client.sendData(eventTokens, data)
        def sendArbChatOthers(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,8,6,5,4,3], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,8,6,5,4,3], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                        #               if client.playerCode != senderClient.playerCode:
                        #                       if binary:
                        #                               client.sendData(eventTokens, data, True)
                        #                       else:
                        #                               client.sendData(eventTokens, data)
        def sendModChatOthers(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,8,6,5], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,8,6,5], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5:
                        #               if client.playerCode != senderClient.playerCode:
                        #                       if binary:
                        #                               client.sendData(eventTokens, data, True)
                        #                       else:
                        #                               client.sendData(eventTokens, data)
        def sendArbChatOthersLogin(self, senderClient, eventTokens, name):
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==4 or client.privilegeLevel==3:
                                        #if client.playerCode != senderClient.playerCode:
                                        sname="-"
                                        if client.Langue=="EN":
                                                message = name+" Conectou-se."
                                        elif client.Langue=="BR":
                                                message = name+" Acabou De Se Conectar."
                                        elif client.Langue=="FR":
                                                message = name+" vient de se connecter."
                                        elif client.Langue=="RU":
                                                message = name+" ???????????."
                                        elif client.Langue=="TR":
                                                message = name+" çevrimiçi oldu."
                                        elif client.Langue=="CN":
                                                message = name+" ?????."
                                        else:
                                                message ="[Servidor] " +name+" conectou-se."
                                        #data="\x02"+struct.pack('!h', len(sname))+sname+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #client.sendData(eventTokens, data, True)
                                        client.sendData("\x1A\x06", [sname, message])
        def sendModChatOthersLogin(self, senderClient, eventTokens, name):
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5:
                                        #if client.playerCode != senderClient.playerCode:
                                        sname="-"
                                        if client.Langue=="EN":
                                                message = "<R>" "name+" "<CH>Conectou-se."
                                        elif client.Langue=="BR":
                                                message = "<R>" "name+" " <CH>Acabou De Se Conectar."
                                        elif client.Langue=="FR":
                                                message = name+" vient de se connecter."
                                        elif client.Langue=="RU":
                                                message = name+" ???????????."
                                        elif client.Langue=="TR":
                                                message = name+" çevrimiçi oldu."
                                        elif client.Langue=="CN":
                                                message = name+" ?????."
                                        else:
                                                message =""+name+" Acabou De Se Conectar."
                                        client.sendData("\x1A\x05", [sname, message])
                                                #data="\x03"+struct.pack('!h', len(sname))+sname+struct.pack('!h', len(message))+message+"\x00\x00"
                                                #client.sendData(eventTokens, data, True)
        def sendAllStaffInRoom(self, senderClient, eventTokens, data, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==4 or client.privilegeLevel==3:
                                if binary:
                                        client.sendData(eventTokens, data, True)
                                else:
                                        client.sendData(eventTokens, data)
        def sendAllStaffInRoomVoteBan(self, senderClient, selfName, username, bancount):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel==10 or client.privilegeLevel==8 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==4 or client.privilegeLevel==3:
                                #client.sendData(eventTokens, data)
                                if client.Langue=="EN":
                                        client.sendData("\x06"+"\x14",[selfName+" Está fazendo Voto Popular Contra "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="FR":
                                        client.sendData("\x06"+"\x14",[selfName+" demande le bannissement de "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="BR":
                                        client.sendData("\x06"+"\x14",[selfName+" Está fazendo Voto Popular Contra "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="RU":
                                        client.sendData("\x06"+"\x14",[selfName+" (This string has not been translated yet [4744]) "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="TR":
                                        client.sendData("\x06"+"\x14",[selfName+" (This string has not been translated yet [4746]) "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="CN":
                                        client.sendData("\x06"+"\x14",[selfName+" (This string has not been translated yet [4748]) "+username+" ("+str(bancount)+"/6)."])
                                else:
                                        client.sendData("\x06"+"\x14",[selfName+" requested ban of "+username+" ("+str(bancount)+"/6)."])

        def getPlayerCode(self, name, OnlySelf = None):
                if OnlySelf:
                        for playerCode, client in self.clients.items():
                                if client.username == name:
                                        return playerCode
                                        break
                        return 0
                else:
                        for room in self.server.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if client.username == name:
                                                return playerCode
                                                break
                        return 0

        def getPlayer(self, name):
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == name:
                                        return client
                return 0

        def getCurrentSync(self):
                if self.eSync:
                        return "Everyone"
                elif self.sSync:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSyncroniserCode:
                                        return client.username
                                        break
                else:
                        return "Nobody"
                return 0
				
        def InitEaster(self):
                if self.EasterTimer:
                        try:
                                self.EasterTimer.cancel()
                        except:
                                self.EasterTimer = None
                                
                if int(self.getPlayerCount()) >= int(self.server.NeedsForEaster) and not self.isBootcamp and not self.isSurvivor and not self.isTribehouse and not self.isRacing and not self.isEditeur:
                        mapnumber = random.choice(["@1"])
                        self.forceNextMap = mapnumber
                
                self.EasterTimer = reactor.callLater(600, self.InitEaster)				

        def killAfk(self):
                if self.isBootcamp:
                        pass
                if self.isTribehouseMap:
                        pass
                elif self.isEditeur:
                        pass
                elif self.isTotemEditeur:
                        pass
                elif self.autoRespawn:
                        pass
                else:
                        if int((getTime()-self.gameStartTime)) > 32 or int((getTime()-self.gameStartTime)) < 29:
                                #logging.error('AFK kill timer invalid. Time: '+str(int((getTime()-self.gameStartTime))))
                                pass
                        else:
                                for playerCode, client in self.clients.items():
                                        if not client.isDead:
                                                if not client.isBot:
                                                        if client.isAfk == True:
                                                                client.isDead = True
                                                                client.score -= 1
                                                                if client.score < 0:
                                                                        client.score = 0
                                                                client.sendPlayerDied(client.playerCode, client.score)
                                                        else:
                                                                pass
                                self.checkShouldChangeWorld()

        def closeRoomRoundJoin(self):
                self.isCurrentlyPlayingRoom = True

        def killAll(self):
                for playerCode, client in self.clients.items():
                        if not client.isDead:
                                resetpscore=client.score+1
                                client.sendPlayerDied(client.playerCode, resetpscore)
                                client.isDead=True
                self.checkShouldChangeWorld()

        def killAllNoDie(self):
                for playerCode, client in self.clients.items():
                        if not client.isDead:
                                client.isDead=True
                self.checkShouldChangeWorld()

        def killShaman(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.score -= 1
                                if client.score < 0:
                                        client.score = 0
                                client.sendPlayerDied(client.playerCode, client.score)
                                client.isDead=True
                self.checkShouldChangeWorld()

        def getPlayerCount(self, UniqueIPs = None):
                if UniqueIPs:
                        IPlist=[]
                        for playerCode, client in self.clients.items():
                                if not client.address[0] in IPlist:
                                        IPlist.append(client.address[0])
                        return len(IPlist)
                else:
                        return len(self.clients)

        def getPlayerCount2(self):
                return len(self.clients)

        def getPlayerList(self, Noshop = None):
                if Noshop:
                        for playerCode, client in self.clients.items():
                                yield client.getPlayerData(True)
                else:
                        for playerCode, client in self.clients.items():
                                yield client.getPlayerData()
								
        def getHighestPlayer(self):
                clientscores = []
                clientcode = 0
                for playerCode, client in self.clients.items():
                        clientscores.append(client.score)
                for playerCode, client in self.clients.items():
                        if client.score==max(clientscores):
                                clientcode=playerCode
                                clientname=client.username
                return clientcode								

        def getHighestShaman(self):
                clientscores = []
                clientcode = 0
                for playerCode, client in self.clients.items():
                        clientscores.append(client.score)
                for playerCode, client in self.clients.items():
                        if client.score==max(clientscores):
                                clientcode=playerCode
                                clientname=client.username
                return clientcode

        def getSecondHighestShaman(self):
                clientscores = []
                clientcode = 0
                for playerCode, client in self.clients.items():
                        clientscores.append(client.score)
                clientscores.remove(max(clientscores))
                for playerCode, client in self.clients.items():
                        if client.score==max(clientscores):
                                clientcode=playerCode
                                clientname=client.username
                return clientcode

        def getShamanCode(self):
                if self.currentShamanCode is None:
                        if self.currentWorld in [7, 8, 14, 22, 23, 28, 29, 54, 55, 57, 58, 59, 60, 61, 70, 77, 78, 87, 88, 89, 92, 122, 123, 124, 125, 126, 1007, 888] + range(200,210+1):
                                self.currentShamanCode = 0
                        elif self.SPR_Room and self.spc0:
                                self.currentShamanCode = 0
                        elif self.ISCMdata[5] in [3, 7, 17, 13, 18, 11, 42]:
                                self.currentShamanCode = 0
                        elif self.ISCM == 877 or self.ISCM == 876:
                                self.currentShamanCode = 0
                        elif self.nobodyIsShaman or self.isTribehouseMap or self.isEventMap:
                                self.currentShamanCode = 0
                        elif self.everybodyIsShaman:
                                self.currentShamanCode = 0
                        elif str(self.ISCM) == "1":
                                self.currentShamanCode = 0
                        else:
                                if self.forceNextShaman!=False:
                                        self.currentShamanCode=self.forceNextShaman
                                        self.forceNextShaman=False
                                        for playerCode, client in self.clients.items():
                                                if client.playerCode == self.currentShamanCode:
                                                        self.currentShamanName = client.username
                                        return self.currentShamanCode
                                else:
                                        self.currentShamanCode = self.getHighestPlayer()
                if self.currentShamanCode == 0:
                        self.currentShamanName = None
                else:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                return self.currentShamanCode

        def getDoubleShamanCode(self):
                if self.forceNextShaman!=False:
                        self.currentShamanCode=self.forceNextShaman
                        self.forceNextShaman=False
                        if self.currentSecondShamanCode is None:
                                self.currentSecondShamanCode = self.getSecondHighestShaman()
                                while self.currentSecondShamanCode == self.currentShamanCode:
                                        self.currentSecondShamanCode = random.choice(self.clients.keys())
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        self.currentSecondShamanName = client.username
                        return [self.currentShamanCode, self.currentSecondShamanCode]
                else:
                        if self.currentShamanCode is None:
                                self.currentShamanCode = self.getHighestPlayer()
                        if self.currentSecondShamanCode is None:
                                self.currentSecondShamanCode = self.getSecondHighestShaman()
                                while self.currentSecondShamanCode == self.currentShamanCode:
                                        self.currentSecondShamanCode = random.choice(self.clients.keys())
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        self.currentSecondShamanName = client.username
                        return [self.currentShamanCode, self.currentSecondShamanCode]

        def getSyncroniserCode(self):
                if self.currentSyncroniserCode is None:
                        self.currentSyncroniserCode = random.choice(self.clients.keys())
                return self.currentSyncroniserCode

if __name__ == "__main__":
        iniports = []
        if sys.platform.startswith('win'):
                os.system('title TransforVida '+VERSION)
                #os.system('color b')
                
        TFMSERVERX = TransformiceServer()
        for port in [444, 44445, 44441, 5556, 3725, 6113]:
                try:
                        reactor.listenTCP(port, TFMSERVERX)
                        iniports = iniports+[port]
                except:
                        pass
        if iniports == []:
                print("["+str(getTime2())+"] "+"Fail on listen ports, press OK to exit")
                raw_input("")
                os._exit(20)
        print ("="*80 + str(iniports).center(80) + "="*80)
        reactor.run()
        #443, 44444, 44440, 5555, 3724, and 6112
f = TransformiceServer()
reactor.listenTCP(44444, f)
#reactor.listenTCP(443, f)
reactor.listenTCP(777, f)
reactor.listenTCP(44440, f)
reactor.listenTCP(5555, f)
reactor.listenTCP(6112, f)
reactor.listenTCP(3724, f)
reactor.listenTCP(450, f)
reactor.listenTCP(8000, f)
reactor.run()
